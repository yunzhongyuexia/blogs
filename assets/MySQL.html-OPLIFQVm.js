import{_ as l,c as e,a as i,d as n,o as a}from"./app-BVOObXQ9.js";const t="/assets/1-162a27tz.png",s={},r=n('<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h1><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h2><h3 id="_1-数据库三大范式" tabindex="-1"><a class="header-anchor" href="#_1-数据库三大范式"><span>1.数据库三大范式</span></a></h3><p>​ 数据库三大范式（标准化）是指在关系型数据库中，为了避免数据不一致而需要遵循的三个规范化级别。分别是：</p><ul><li>第一范式（1NF）：确保每个属性都是原子性的，即每个属性都不能在被分割为更小的数据单元。同时，每个属性都要具有唯一的名称，不允许重复。</li><li>第二范式（2NF）：确保非主键属性完全依赖于主键，即非主键属性不能只依赖于主键的部分属性。如果存在这要的情况，需要将表进行拆分，是每个表只包含一个实体类型。</li><li>第三范式（3NF）：保证非主键属性之间不存在供给依赖关系，即非主键属性不能依赖与其他非主键属性。如果存在这样的情况，需要将表进行拆分，是每个表只包含一个实体类型。</li></ul><p>​ 通过遵循这三个规范化级别，可以减少数据和数据的不一致性，提高数据库的数据的完整性和可靠性。</p><h3 id="_2-mysql存储引擎myisam和innodb有哪些区别" tabindex="-1"><a class="header-anchor" href="#_2-mysql存储引擎myisam和innodb有哪些区别"><span>2.MySQL存储引擎MyIsam和InnoDB有哪些区别？</span></a></h3><ul><li>事务支持：MyIsam不支持事务，InnoDB支持事务，拥有ACID四大特性（原子性（事务）、一致性、隔离性、持久性（日志）），InnoDB在高并发环境下可以更好地处理数据一致性和完整性问题（可以很好的解决常见的并发问题：1.脏读、2.幻读、3.不可重复读）。</li><li>行级锁定：InnoDB支持行级锁定，可以提高并发性能；而MyIsam则只支持表级锁定，因此在高并发环境下性能较差。</li><li>外键约束：InnoDB支持外键约束，MyIsam不支持，所以InnoDB可以确保数据的一致性和完整性。</li><li>索引方式：InnoDB使用的是B+树索引来管理数据，可以高效地处理大量数据，而MyIsam使用的B树索引，不如B+树索引高效。</li><li>磁盘空间：InnoDB的数据存储方式比MyIsam更为复杂，因此在相同的数据下，InnoDB需要更多的磁盘空间。</li></ul><h3 id="_3-什么是索引-都有哪些类型-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#_3-什么是索引-都有哪些类型-有什么优缺点"><span>3.什么是索引？都有哪些类型？有什么优缺点？</span></a></h3><p>​ 索引是一种帮助MySQL高效获取数据的数据结构，在InnoDB中使用的是B+树，MyIsam使用的是B树。</p><p>​ 索引可分为主键索引与普通索引。其中普通索引也叫二级索引，类型上包括唯一索引、单列索引、联合索引、全文索引等。</p><p>​ 优点：可以加快查询的效率。</p><p>​ 缺点：维护起来成本很高且需要占用更多的存储空间。</p><h3 id="_4-b树和b-树的区别。" tabindex="-1"><a class="header-anchor" href="#_4-b树和b-树的区别。"><span>4.B树和B+树的区别。</span></a></h3><p>B树和B+树都是一种自平衡的多叉树，它们有以下区别：</p><ul><li>数据的存放位置不同</li></ul><p>​ B树：B树的叶子节点和非叶子节点都可以存放数据。每个节点存放的是数据和指针。</p><p>​ B+树：B+树的所有数据都存放在叶子节点上，非叶子节点上存放的是索引。</p><ul><li>B+树更适合范围查询</li></ul><p>​ B+树的叶子节点是一个有序链表，B树的叶子节点是无序的。所以B+树更适合范围查询。</p><ul><li>MySQL对B+树有优化</li></ul><p>​ 经过MySQL的优化，B+树的叶子节点上存放的是数据页，数据页上面缀的是有序链表，数据页之间使用的是双向指针连接。每个数据页不超过16KB的数据。</p><h3 id="_5-为什么使用b-树而不使用红黑树、二叉树" tabindex="-1"><a class="header-anchor" href="#_5-为什么使用b-树而不使用红黑树、二叉树"><span>5.为什么使用B+树而不使用红黑树、二叉树？</span></a></h3><p>​ 红黑树和二叉树是每个节点最多有两个子节点的树结构，红黑树是二叉树的优化，增加了颜色属性；他们有以下区别：</p><ul><li>查询效率不同：当数据量足够大时，B+树的树高比红黑树和二叉树低，需要更少的磁盘I/O操作，查询效率更高。</li><li>B+树更适合范围查询：B+树的叶子节点是一个有序链表，适合范围查询。</li><li>B+树实现了聚集索引，数据和索引放在了一起，查询效率高。</li></ul><h3 id="_6-聚集索引和非聚集索引的区别" tabindex="-1"><a class="header-anchor" href="#_6-聚集索引和非聚集索引的区别"><span>6.聚集索引和非聚集索引的区别？</span></a></h3><ul><li>聚集索引的数据和索引放在一起，查询效率高；非聚集索引的索引和主键ID放在一起，可能会导致回表，查询效率低。</li><li>聚集索引数据行的物理顺序和索引的逻辑顺序一样，查询效率高，担当进行写操作的时候，数据行的物理顺序需要重新排列，导致性能下降；非聚集索引数据行的物理顺序和索引的逻辑顺序不一样，查询效率低；进行写操作时，数据行的物理顺序不需要重新排序，性能较好。</li></ul><h3 id="_7-为什么一张表要有一个主键id" tabindex="-1"><a class="header-anchor" href="#_7-为什么一张表要有一个主键id"><span>7.为什么一张表要有一个主键ID？</span></a></h3><p>​ 主键ID使用的时非聚集索引，聚集索引的数据和索引放在一起，在查询的时候更具索引查询即可；而二级索引使用的是非聚集索引：非聚集索引的索引和主键ID放在一起，在使用二级索引查询时，如果索引中没有我们需要的数据时，它就会根据主键ID到原表中查询，这个过程就是回表。如果没有主键ID，那么MySQL就会自动给我们设置一个隐藏的主键ID：rowID，它看不见，摸不到，为了方便我们对数据库进行操作，所以我们需要自行设计一个主键ID。</p><h3 id="_8-怎么减少回表" tabindex="-1"><a class="header-anchor" href="#_8-怎么减少回表"><span>8.怎么减少回表？</span></a></h3><ul><li>尽量多的使用覆盖索引</li><li>将常用字段设置为主键索引</li></ul><h3 id="_9-为什么会有索引失效的情况" tabindex="-1"><a class="header-anchor" href="#_9-为什么会有索引失效的情况"><span>9.为什么会有索引失效的情况？</span></a></h3><p>索引失效的情况：</p><ol><li>不符合最左前缀原则</li><li>条件中有or（若是想让索引生效，只能将or条件中的每个列都加上索引），like查询以%开头、！=操作符、null值查询、使用计算或函数。</li><li>字符串索引，在使用时数据一定要使用引号引用起来。若是int类型的索引，数据使不使用引号都有可以。使用函数、计算操作也会导致索引失效（隐式转换）。</li><li>当MySQL估计使用全表扫描比使用索引快的时候，如表中的数据量较少时，就不会使用索引。</li><li>索引类型不匹配:如果查询条件中的数据类型与索引列的数据类型不匹配，MySQL可能无法使用索引。</li></ol><h3 id="_10-如何进行索引调优" tabindex="-1"><a class="header-anchor" href="#_10-如何进行索引调优"><span>10.如何进行索引调优？</span></a></h3><ul><li>分析查询语句和数据模式：仔细分析查询语句和数据模式，了解查询的特点和使用频率，确保索引的创建和选择符合实际需求。</li><li>选择合适的索引策略：根据查询的特点选择合适的索引策略，包括 覆盖索引、联合索引、前缀索引等，以提高查询性能。</li><li>优化查询语句：优化查询语句的结构和条件，避免使用不合适的索引的操作符或函数操作，尽量使用查询条件能够命中索引。</li><li>避免过度索引：避免创建过多的索引，因为过多的索引会增加数据维护的开销，并可能导致索引失效或选择不正确的索引。</li><li>使用索引提示：在需要的情况下，使用索引提示（Index Hint）来强制MySQL使用指定的索引，以避免错误的索引选择。</li><li>性能测试和监测：通过性能测试和监测工具，如EXPLAIN、 Slow Query Log等，评估索引的效果，并进行必要的调整和优化。</li></ul><h3 id="_11-索引下推是什么" tabindex="-1"><a class="header-anchor" href="#_11-索引下推是什么"><span>11.索引下推是什么？</span></a></h3><p>​ 索引下推是可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h2><h3 id="_12-mysql中的锁有哪些" tabindex="-1"><a class="header-anchor" href="#_12-mysql中的锁有哪些"><span>12.MySQL中的锁有哪些？</span></a></h3><p>按照颗粒度分：</p><figure><img src="'+t+'" alt="锁的分类" tabindex="0" loading="lazy"><figcaption>锁的分类</figcaption></figure><ol><li><p>全局锁：</p><ul><li>对整个数据库实例加锁。</li><li>命令是Flush table with read lock(FTWRL)</li><li>阻塞数据的增删改、数据定义（建表、改表）和更新类事物的提交。</li><li>使用场景：全库逻辑备份。</li></ul></li><li><p>表锁：分为表锁和元数据锁（MDL）</p><ol><li><p>表锁：</p><ul><li>表锁语法：lock tables … read/write</li><li>表锁解锁：unlock tables</li><li>表锁释放时间：客户端断开连接的时候自动释放</li></ul></li><li><p><strong>元数据锁</strong>：</p><ul><li>如何使用：MDL 不需要显式使用，在访问一个表的时候会被自动加上,已保证读写的正确性</li><li>什么时候加什么锁：当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁</li><li>加锁、解锁时机：在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放</li></ul><p>读锁和读锁不冲突、读锁和写锁冲突、写锁和写锁冲突</p></li></ol></li><li><p>行锁：</p><ol><li>相比于表锁：开销大、加锁慢。但表锁不会死锁,行锁会死锁。</li><li><strong>两阶段协议</strong>：行锁是在需要的时候加上锁，在事务结束时释放锁。（导致死锁的原因）</li><li>Record Locks 行记录锁： <ul><li>是什么：最基本的锁，锁会加在索引上；没有主键索引则会加载row_id上。查询条件是二级索引时，会回到主键索引加锁。</li><li>需要注意什么：当查询没有索引时，会走全表，把查到的每一行都加锁，在RC（读提交）下，加锁的语句执行完成后，就会直接释放掉不符合要求的行锁。因此，如果一条更新语句没有走索引，会花费极大的开销。</li></ul></li><li>Gap Locks 间隙锁： <ul><li>解决幻读的问题：在RR（可重复读）的隔离级别下，解决方法就是间隙锁。</li><li>关于幻读的问题:出现幻读也不是非常严重的问题，可以把隔离级别降到RC（读提交）这样可以提高并发性。间隙锁虽然彼此不冲突，本身也是花费一些开销，而且会和写入操作发生冲突，影响并发。</li><li>功能：锁住的是两个行之间的数据，不允许其他人向中间写入一个数据。</li></ul></li><li><strong>Next-Key Locks</strong>： <ul><li>是什么：可以认为是记录锁和间隙锁的组合。</li><li>加锁后会发生什么：无论主键索引还是二级索引，都会加上间隙锁。 Next-Key Locks 因为包含行锁，因此会出现冲突。</li><li>MySQL加行锁默认加NK锁</li></ul></li><li>Insert Intention Locks 插入意向锁： <ul><li>只有在insert的时候会使用，和间隙锁冲突，但是彼此不冲突。</li></ul></li></ol></li></ol><h3 id="_13-什么是mdl锁" tabindex="-1"><a class="header-anchor" href="#_13-什么是mdl锁"><span>13. 什么是MDL锁？</span></a></h3><p>​ MDL（Metadata Locking）是数据库管理系统（DBMS）中的一种机制，用于管理和控制对数据库对象（如表、索引、视图等）的元数据的并发访问。</p><h3 id="_14-mdl什么时候加锁" tabindex="-1"><a class="header-anchor" href="#_14-mdl什么时候加锁"><span>14. MDL什么时候加锁？</span></a></h3><ol><li>事务修改数据：当一个事务对数据库中的数据进行修改（插入、更新、删除）时，会获取相应的锁来确保事务的原子性和一致性。这样可以防止其他并发事务同时修改相同的数据，避免数据冲突和不一致性。</li><li>并发事务访问同一数据：当多个事务同时访问同一数据时，可能会存在读写冲突或数据不一致的问题。为了保证数据的隔离性，需要使用锁来协调并发事务之间的访问。例如，读操作可能会获取共享锁（Shared Lock），而写操作则需要获取排它锁（Exclusive Lock）。</li><li>数据库对象的元数据访问：当多个事务同时访问数据库对象的元数据时（如表、索引、视图的定义），需要采用元数据锁（MDL）来管理并发访问。元数据锁用于保护元数据的一致性，防止并发事务之间的冲突。</li></ol><h3 id="_15-mdl有什么危害" tabindex="-1"><a class="header-anchor" href="#_15-mdl有什么危害"><span>15. MDL有什么危害？</span></a></h3><ol><li>并发性能下降：过多的元数据锁操作可能导致并发性能下降。当多个事务需要访问相同的元数据对象时，如果存在过多的元数据锁竞争，会引发锁冲突和阻塞，从而导致事务等待和执行时间延长，对并发性能产生负面影响。</li><li>阻塞和长时间等待：如果一个事务持有元数据锁并长时间不释放，其他事务需要等待该锁的释放。这可能导致其他事务阻塞和长时间等待，从而影响系统的响应性能和并发能力。</li><li>死锁：如果事务之间的元数据锁请求存在循环依赖，可能引发死锁。当多个事务相互等待对方所持有的元数据锁时，系统无法继续执行，需要通过死锁检测和解决机制来解决。</li><li>数据库对象的不一致性：如果对数据库对象的元数据访问没有正确加锁或使用不恰当的隔离级别，可能导致数据库对象的不一致性。例如，一个事务正在修改表的结构或索引定义时，其他事务可能读取到不一致的元数据，导致数据库对象定义的不一致性。</li></ol><h3 id="_16-如何避免mdl出现问题" tabindex="-1"><a class="header-anchor" href="#_16-如何避免mdl出现问题"><span>16. 如何避免MDL出现问题？</span></a></h3><p>​ 应该在设计数据库架构时合理规划和管理元数据锁的使用。可以考虑优化元数据的访问频率和方式，减少对元数据的并发访问冲突，使用合适的隔离级别，以及定期进行性能监控和调优。同时，合理并发控制和锁管理策略也是确保元数据锁正常运行和性能的重要措施。</p><h3 id="_17-行锁在什么时候加锁" tabindex="-1"><a class="header-anchor" href="#_17-行锁在什么时候加锁"><span>17. 行锁在什么时候加锁？</span></a></h3><p>​ 行锁在事务需要的时候进行加锁 ，在事务结束的时候再释放锁。什么时候需要是指当进行读操作时进行手动加锁或者是快照读升级为当前读的时候进行加锁。</p><h3 id="_18-next-key-lock锁的两优化是什么" tabindex="-1"><a class="header-anchor" href="#_18-next-key-lock锁的两优化是什么"><span>18. next-key lock锁的两优化是什么？</span></a></h3><ol><li>索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。</li><li>索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock退化为间隙锁。</li></ol><h3 id="_19-乐观锁与悲观锁" tabindex="-1"><a class="header-anchor" href="#_19-乐观锁与悲观锁"><span>19. 乐观锁与悲观锁</span></a></h3><p>​ 悲观锁是一种比较保守的锁机制，它认为在整个事务过程中，数据很有可能会被其他事务修改，因此在对数据进行操作时，必须先对其进行加锁，以防止其他事务的干扰。悲观锁通常使用数据库的锁机制实现，如行锁、表锁等，<strong>可以有效地控制并发访问，但会对系统性能产生影响。</strong></p><p>​ 乐观锁是一种比较乐观的锁机制，它认为在整个事务过程中，数据很少会被其他事务修改，因此在对数据进行操作时，并不对其进行加锁，而是在事务提交之前检查数据是否被其他事务修改过，如果被修改过，则回滚事务，重新进行操作。乐观锁通常使用版本号或时间戳等机制实现，可以减少锁的使用，提高系统性能，但需要增加一些额外的开销来实现数据版本控制。</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><h3 id="_20-mysql的事务的隔离级别有哪些" tabindex="-1"><a class="header-anchor" href="#_20-mysql的事务的隔离级别有哪些"><span>20. MySQL的事务的隔离级别有哪些？</span></a></h3><ol><li>读未提交：一个事务还未提交时可以被别的事务读取数据</li><li>读已提交：一个事务提交之后，所做的变更可以被别的事务看到</li><li>可重复读：事务在执行中用到的数据与最开始所看到的数据是一样的</li><li>串行化：加锁出现冲突时 事务必须要等到前一个事务执行完成 隔离级别越高，性能就会下降。</li></ol><p>PS：MySQL的默认隔离级别是可重复读</p><h3 id="_21-脏读、幻读和不可重复读是什么" tabindex="-1"><a class="header-anchor" href="#_21-脏读、幻读和不可重复读是什么"><span>21. 脏读、幻读和不可重复读是什么？</span></a></h3><p>​ 脏读、幻读和不可重复读是数据库并发控制中的三个问题。</p><ul><li><p>脏读（Dirty Read）指一个事务读取了另一个事务尚未提交的数据。如果后续的事务回滚，那么前面事务读取到的数据就是无效的。</p></li><li><p>幻读（Phantom Read）指一个事务在两次查询之间，另一个事务插入了新的数据行，导致前一次查询和后一次查询的结果不一致。（mvcc+间隙锁）只有插入才会出现幻读</p></li><li><p>不可重复读（Non-repeatable Read）指一个事务多次读取同一数据，在这个过程中，另一个事务对该数据进行了修改或删除，导致前一次读取和后一次读取的结果不一致。</p></li></ul><h3 id="_22-不同的隔离级别分别容易出现什么问题-又解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_22-不同的隔离级别分别容易出现什么问题-又解决了什么问题"><span>22. 不同的隔离级别分别容易出现什么问题？又解决了什么问题？</span></a></h3><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">脏读</th><th style="text-align:center;">幻读</th><th style="text-align:center;">不可重复读</th></tr></thead><tbody><tr><td style="text-align:center;">读未提交</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;">读已提交</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;">可重复读</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">串行化</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr></tbody></table><h3 id="_21-mvcc是如何实现的" tabindex="-1"><a class="header-anchor" href="#_21-mvcc是如何实现的"><span>21. MVCC是如何实现的？</span></a></h3><p>​ MVCC又叫基于版本号的多版本并发控制，主要解决隔离性的问题；mvcc工作在读已提交和可重复读的隔离级别下，两者最大的不同是创建read view的时机不同，采用read view和undo log版本链解决，undo log是事务链表，记录有(事务)trx_i和rool_pointer(指针)，在read view 读视图中有min_trx_id(最小事务id)、max_trx_id(最大事务id)、create_trx_id(创建事务id)和m_trx_id(活跃事务id);工作原理是查看当前事务是否在当前read view中，如果在，会寻找上一个版本的事务id，如果不在，该事务就是查找的事务。</p><h3 id="_23-脏读、幻读和不可重复读是如何解决的" tabindex="-1"><a class="header-anchor" href="#_23-脏读、幻读和不可重复读是如何解决的"><span>23. 脏读、幻读和不可重复读是如何解决的？</span></a></h3><ul><li><p>读提交解决脏读问题</p></li><li><p>可重复读和串行化解决不可重复读和幻读的问题</p></li></ul><h3 id="_24-数据量大的时候如何切分" tabindex="-1"><a class="header-anchor" href="#_24-数据量大的时候如何切分"><span>24. 数据量大的时候如何切分？</span></a></h3><ol><li>按位置切分：国家、省市城市。</li><li>时间切分：月份、季度、年份。</li><li>垂直切分：如user表可以切分为账号基本信息user_basic和个人资料user_profile。</li><li>水平切分：如订单数据量较大，按照日期切分成order_2020、order_2021、order_2022。</li></ol><h3 id="_25-快照度和当前读是什么" tabindex="-1"><a class="header-anchor" href="#_25-快照度和当前读是什么"><span>25. 快照度和当前读是什么？</span></a></h3><p>增删改、加锁</p><p>​ 快照读（Snapshot Read）和当前读（Current Read）是数据库中两种常见的读取数据的方式。</p><ul><li>快照读（Snapshot Read）：快照读是指读取数据库中某个时间点的数据快照。当进行快照读取时，读取的数据是在事务开始之前的一个一致的时间点的数据。这意味着无论事务中的其他并发操作是否已提交，快照读取都会返回事务开始之前的数据版本。快照读取不会受到正在进行的并发事务的修改的影响，能够提供一致性和可重复性的读取。</li><li>当前读（Current Read）：当前读是指读取数据库中最新的数据，即读取已经提交的事务所做的修改。当前读取获取的是实时的、最新的数据状态。如果存在并发事务对读取的数据进行修改但尚未提交，当前读取将能够看到这些未提交的修改。当前读取适用于需要读取最新状态的场景，但可能会受到并发事务的影响，因为读取到的数据可能会在事务提交之后发生变化。</li></ul><p>​ 在数据库中，快照读取通常用于读取一致性要求较高的数据，例如读取历史记录、生成报表等。而当前读取则适用于需要读取最新数据状态的场景，例如在线交易、实时查询等。</p><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h2><h3 id="_26-bin-log和redo-log的区别" tabindex="-1"><a class="header-anchor" href="#_26-bin-log和redo-log的区别"><span>26. bin_log和redo_log的区别？</span></a></h3><ul><li><strong>redo_log</strong> 是 <strong>InnoDB</strong> 引擎特有的；<strong>bin_log</strong> 是 <strong>MySQL</strong> 的 <strong>Server</strong> 层实现的，所有引擎都可以使用。</li><li><strong>redo_log</strong> 是物理日志，记录的是“在某个数据页上做了什么修改”；<strong>bin_log</strong> 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</li><li><strong>redo_Log</strong> 是循环写的，空间固定会用完；<strong>bin_log</strong> 是可以追加写入的。“追加写”是指 <strong>bin_log</strong> 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。 最后，简单说下：如果没有了<strong>redo_log</strong>，数据就无法做到<strong>crash-safe</strong>，因为 <strong>bin_log</strong>不具备保存事务的性质，最重要的是它并不具备记录数据页上究竟发生了什么。如果没有 <strong>bin_log</strong>的话，<strong>redo_log</strong>是个循环写入的，不存在归档这个功能。</li></ul><h3 id="_27-什么是wal机制" tabindex="-1"><a class="header-anchor" href="#_27-什么是wal机制"><span>27. 什么是WAL机制？</span></a></h3><p>​ WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo_log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><h3 id="_28-什么是两阶段提交" tabindex="-1"><a class="header-anchor" href="#_28-什么是两阶段提交"><span>28. 什么是两阶段提交？</span></a></h3><p>​ 两阶段提交是分布式系统中比较常见的一种事务提交算法。在Innodb的日志提交时用到了这个协议，用来保证事务提交时，redolog和binlog 都处于完成状态。具体而言：</p><ol><li>操作完更新语句，把数据保存到内存</li><li>写入redo_log，处于<strong>prepare</strong>阶段</li><li>写入BinLog</li><li>提交事务，BinLog和RedoLog都处于完成状态。</li></ol><h3 id="_29-mysql什么时候刷脏页" tabindex="-1"><a class="header-anchor" href="#_29-mysql什么时候刷脏页"><span>29. MySQL什么时候刷脏页？</span></a></h3><ol><li><strong>redo_log</strong>写满时，需要暂停更新操作。此时会停止所有的写入操作！</li><li>机器的物理内存满了的时候</li><li><strong>Mysql</strong>处于空闲状态时</li><li><strong>Mysql</strong>重启时</li></ol><h3 id="_30-redo-log和bin-log是如何配合工作的" tabindex="-1"><a class="header-anchor" href="#_30-redo-log和bin-log是如何配合工作的"><span>30. redo_log和bin_log是如何配合工作的？</span></a></h3><p>​ 它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 <strong>RedoLog</strong>：</p><ul><li>如果碰到既有 <strong>prepare</strong>、又有 <strong>commit</strong> 的 <strong>RedoLog</strong>，就直接提交；</li><li>如果碰到只有 <strong>prepare</strong>、而没有 <strong>commit</strong> 的<strong>RedoLog</strong>，就拿着 XID 去<strong>BinLog</strong> 找对应的事务。</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3>',92);function o(d,h){return a(),e("div",null,[i(" more "),r])}const g=l(s,[["render",o],["__file","MySQL.html.vue"]]),p=JSON.parse('{"path":"/books/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL.html","title":"MySQL","lang":"zh-CN","frontmatter":{"title":"MySQL","cover":"/assets/images/18.jpg","date":"2024-06-01T00:00:00.000Z","category":["数据库"],"tag":["学习资料"]},"headers":[{"level":2,"title":"索引","slug":"索引","link":"#索引","children":[{"level":3,"title":"1.数据库三大范式","slug":"_1-数据库三大范式","link":"#_1-数据库三大范式","children":[]},{"level":3,"title":"2.MySQL存储引擎MyIsam和InnoDB有哪些区别？","slug":"_2-mysql存储引擎myisam和innodb有哪些区别","link":"#_2-mysql存储引擎myisam和innodb有哪些区别","children":[]},{"level":3,"title":"3.什么是索引？都有哪些类型？有什么优缺点？","slug":"_3-什么是索引-都有哪些类型-有什么优缺点","link":"#_3-什么是索引-都有哪些类型-有什么优缺点","children":[]},{"level":3,"title":"4.B树和B+树的区别。","slug":"_4-b树和b-树的区别。","link":"#_4-b树和b-树的区别。","children":[]},{"level":3,"title":"5.为什么使用B+树而不使用红黑树、二叉树？","slug":"_5-为什么使用b-树而不使用红黑树、二叉树","link":"#_5-为什么使用b-树而不使用红黑树、二叉树","children":[]},{"level":3,"title":"6.聚集索引和非聚集索引的区别？","slug":"_6-聚集索引和非聚集索引的区别","link":"#_6-聚集索引和非聚集索引的区别","children":[]},{"level":3,"title":"7.为什么一张表要有一个主键ID？","slug":"_7-为什么一张表要有一个主键id","link":"#_7-为什么一张表要有一个主键id","children":[]},{"level":3,"title":"8.怎么减少回表？","slug":"_8-怎么减少回表","link":"#_8-怎么减少回表","children":[]},{"level":3,"title":"9.为什么会有索引失效的情况？","slug":"_9-为什么会有索引失效的情况","link":"#_9-为什么会有索引失效的情况","children":[]},{"level":3,"title":"10.如何进行索引调优？","slug":"_10-如何进行索引调优","link":"#_10-如何进行索引调优","children":[]},{"level":3,"title":"11.索引下推是什么？","slug":"_11-索引下推是什么","link":"#_11-索引下推是什么","children":[]}]},{"level":2,"title":"锁","slug":"锁","link":"#锁","children":[{"level":3,"title":"12.MySQL中的锁有哪些？","slug":"_12-mysql中的锁有哪些","link":"#_12-mysql中的锁有哪些","children":[]},{"level":3,"title":"13. 什么是MDL锁？","slug":"_13-什么是mdl锁","link":"#_13-什么是mdl锁","children":[]},{"level":3,"title":"14. MDL什么时候加锁？","slug":"_14-mdl什么时候加锁","link":"#_14-mdl什么时候加锁","children":[]},{"level":3,"title":"15. MDL有什么危害？","slug":"_15-mdl有什么危害","link":"#_15-mdl有什么危害","children":[]},{"level":3,"title":"16. 如何避免MDL出现问题？","slug":"_16-如何避免mdl出现问题","link":"#_16-如何避免mdl出现问题","children":[]},{"level":3,"title":"17. 行锁在什么时候加锁？","slug":"_17-行锁在什么时候加锁","link":"#_17-行锁在什么时候加锁","children":[]},{"level":3,"title":"18. next-key lock锁的两优化是什么？","slug":"_18-next-key-lock锁的两优化是什么","link":"#_18-next-key-lock锁的两优化是什么","children":[]},{"level":3,"title":"19. 乐观锁与悲观锁","slug":"_19-乐观锁与悲观锁","link":"#_19-乐观锁与悲观锁","children":[]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"20. MySQL的事务的隔离级别有哪些？","slug":"_20-mysql的事务的隔离级别有哪些","link":"#_20-mysql的事务的隔离级别有哪些","children":[]},{"level":3,"title":"21. 脏读、幻读和不可重复读是什么？","slug":"_21-脏读、幻读和不可重复读是什么","link":"#_21-脏读、幻读和不可重复读是什么","children":[]},{"level":3,"title":"22. 不同的隔离级别分别容易出现什么问题？又解决了什么问题？","slug":"_22-不同的隔离级别分别容易出现什么问题-又解决了什么问题","link":"#_22-不同的隔离级别分别容易出现什么问题-又解决了什么问题","children":[]},{"level":3,"title":"21. MVCC是如何实现的？","slug":"_21-mvcc是如何实现的","link":"#_21-mvcc是如何实现的","children":[]},{"level":3,"title":"23. 脏读、幻读和不可重复读是如何解决的？","slug":"_23-脏读、幻读和不可重复读是如何解决的","link":"#_23-脏读、幻读和不可重复读是如何解决的","children":[]},{"level":3,"title":"24. 数据量大的时候如何切分？","slug":"_24-数据量大的时候如何切分","link":"#_24-数据量大的时候如何切分","children":[]},{"level":3,"title":"25. 快照度和当前读是什么？","slug":"_25-快照度和当前读是什么","link":"#_25-快照度和当前读是什么","children":[]}]},{"level":2,"title":"日志","slug":"日志","link":"#日志","children":[{"level":3,"title":"26. bin_log和redo_log的区别？","slug":"_26-bin-log和redo-log的区别","link":"#_26-bin-log和redo-log的区别","children":[]},{"level":3,"title":"27. 什么是WAL机制？","slug":"_27-什么是wal机制","link":"#_27-什么是wal机制","children":[]},{"level":3,"title":"28. 什么是两阶段提交？","slug":"_28-什么是两阶段提交","link":"#_28-什么是两阶段提交","children":[]},{"level":3,"title":"29. MySQL什么时候刷脏页？","slug":"_29-mysql什么时候刷脏页","link":"#_29-mysql什么时候刷脏页","children":[]},{"level":3,"title":"30. redo_log和bin_log是如何配合工作的？","slug":"_30-redo-log和bin-log是如何配合工作的","link":"#_30-redo-log和bin-log是如何配合工作的","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"git":{"createdTime":1721785802000,"updatedTime":1721792929000,"contributors":[{"name":"yunzhongyue","email":"15737369015@163.com","commits":2}]},"readingTime":{"minutes":19.11,"words":5732},"filePathRelative":"books/数据库/MySQL.md","localizedDate":"2024年6月1日","excerpt":""}');export{g as comp,p as data};
