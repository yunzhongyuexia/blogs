import{_ as l,c as i,a as t,d as e,o as s}from"./app-Bgm6S5eR.js";const o={},n=e('<h1 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络"><span>计算机网络</span></a></h1><h2 id="_1-经典网络分层-五层七层是哪些" tabindex="-1"><a class="header-anchor" href="#_1-经典网络分层-五层七层是哪些"><span>1. 经典网络分层，五层七层是哪些？</span></a></h2><p>经典的网络分层模型有两种：</p><ul><li><p>五层协议模型（TCP/IP模型）：分为物理层、数据链路层、网络层、传输层和应用层。</p></li><li><p>七层协议模型（OSI模型）：分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p></li></ul><p>传输层常见协议：</p><ol><li><strong>TCP (Transmission Control Protocol)</strong>: <ul><li>提供可靠的、面向连接的字节流服务。</li><li>使用三次握手建立连接，确保数据传输的可靠性。</li><li>支持拥塞控制、流量控制和错误恢复。</li></ul></li><li><strong>UDP (User Datagram Protocol)</strong>: <ul><li>提供无连接的、不可靠的数据报服务。</li><li>适用于需要快速传输但可以容忍一定数据丢失的应用，如视频会议、在线游戏等。</li></ul></li><li><strong>QUIC (Quick UDP Internet Connections)</strong>: <ul><li>一种基于UDP的传输层协议，由Google开发。</li><li>提供类似TCP的可靠性和有序性，同时减少连接建立时间，提高传输效率。</li></ul></li></ol><p>应用层常见协议：</p><ul><li><p><strong>HTTP (Hypertext Transfer Protocol)</strong>: 用于从网络传输超文本到本地浏览器的协议，是构建Web的基础。</p></li><li><p><strong>HTTPS (HTTP Secure)</strong>: HTTP的安全版本，通过SSL/TLS协议提供加密、身份验证和数据完整性。</p></li><li><p><strong>DNS (Domain Name System)</strong>: 将域名转换为IP地址的系统。</p></li><li><p><strong>WebSocket</strong>: 提供全双工通信渠道的协议，允许服务器主动发送信息给客户端。</p></li><li><p><strong>FTP (File Transfer Protocol)</strong>: 用于在网络上的计算机之间传输文件。</p></li><li><p><strong>SFTP (Secure File Transfer Protocol)</strong>: FTP的安全版本，使用SSH协议进行文件传输。</p></li></ul><h2 id="_2-在浏览器地址中输入url-后续的网络世界会发生什么" tabindex="-1"><a class="header-anchor" href="#_2-在浏览器地址中输入url-后续的网络世界会发生什么"><span>2. 在浏览器地址中输入URL，后续的网络世界会发生什么？</span></a></h2><ol><li><p><strong>解析URL</strong>:</p><ul><li>浏览器首先解析URL，确定协议（如HTTP、HTTPS）、域名、端口（如果有指定）和路径。</li></ul></li><li><p><strong>DNS查询</strong>:</p><ul><li>如果浏览器没有缓存域名对应的IP地址，它会向DNS服务器发起查询，将域名解析为IP地址。</li></ul></li><li><p><strong>建立TCP连接</strong> (对于HTTP/1.0、1.1和2.0):</p><ul><li>浏览器使用解析得到的IP地址，通过TCP协议与服务器建立连接。这涉及到三次握手过程。</li><li>如果使用HTTP/3，则使用QUIC（基于UDP的传输层协议）</li></ul></li><li><p><strong>TLS/SSL握手</strong> (如果使用HTTPS):</p><ul><li>如果URL以HTTPS开头，浏览器将启动TLS握手过程，与服务器协商加密参数，交换密钥，并验证服务器的身份。</li></ul></li><li><p><strong>发送HTTP请求(应用层)</strong>:</p><ul><li>浏览器构建一个HTTP请求，包括请求行（方法，URL，HTTP版本），请求头（如Host, User-Agent等），以及可能的请求体（如POST请求的数据）。</li></ul></li><li><p><strong>封装数据</strong>：</p><ul><li>传输层：如果使用HTTP/1.0、1.1、2.0和HTTPS添加TCP头部。如果使用HTTP/3，则添加的是QUIC头部（基于UDP的传输层协议）。</li><li>网络层：添加报文头部（包含源地址IP和目标地址IP）。</li><li>数据链路层：添加MAC头部（包含接收方和发送方的MAC地址）。</li><li>物理层：通过网卡、交换机、路由器以及网线等其他的传输介质将数据发送到目标服务器。</li></ul></li><li><p><strong>服务器处理请求</strong>:</p><ul><li><p>解封装数据：</p><ul><li>电信号&gt;数字信号(物理层)</li><li>数据信号&gt;帧（数据链路层）</li><li>帧&gt;数据包（网路层）</li><li>数据包&gt;数据段（传输层）</li></ul></li><li><p>服务器接收到请求后，根据请求类型（GET, POST等）和资源路径，进行相应的处理。这可能包括查询数据库、执行后端脚本等。</p></li></ul></li><li><p><strong>发送HTTP响应</strong>:</p><ul><li>服务器处理完请求后，会发送一个HTTP响应给浏览器，包括状态码（如200表示成功）、响应头和响应体（网页内容）。</li></ul></li><li><p><strong>浏览器渲染页面</strong>:</p><ul><li>浏览器接收到响应后，开始解析HTML文档，构建DOM树，然后根据CSS样式进行渲染。同时，浏览器会请求HTML中引用的CSS文件、JavaScript脚本、图片等资源。</li></ul></li><li><p><strong>连接关闭</strong> :</p><ul><li>服务器在数据传输完成后，浏览器向服务器发起TCP四次挥手，断开连接。</li></ul></li></ol><h2 id="_3-介绍一下dns服务" tabindex="-1"><a class="header-anchor" href="#_3-介绍一下dns服务"><span>3. 介绍一下DNS服务</span></a></h2><p>​ DNS（域名系统，Domain Name System）是互联网上用于将域名转换为IP地址的分布式服务。它是一个分层和可扩展的命名系统，用于将易于记忆的域名（如<code>www.example.com</code>）转换为计算机用于网络通信的IP地址（如<code>192.168.1.1</code>）。</p><p>以下是DNS服务的一些关键特点：</p><ol><li><strong>分布式数据库</strong>: <ul><li>DNS是一个分布式数据库，存储在全世界的DNS服务器上。这些服务器相互协作，提供域名解析服务。</li></ul></li><li><strong>层次结构</strong>: <ul><li>DNS使用层次结构来组织域名，顶级域名（如com、net等）下面是二级域名（如example、baidu等），然后是子域名（如www、mali等）。</li></ul></li><li><strong>迭代查询和递归查询</strong>: <ul><li>DNS查询可以是迭代的或递归的。迭代查询是客户端自己向不同的DNS服务器查询直到找到结果；递归查询是由一个DNS服务器代替客户端完成所有查询工作。</li></ul></li><li><strong>DNS负载均衡和故障转移</strong>: <ul><li>DNS可以用于实现负载均衡和故障转移，通过将同一个域名解析到多个IP地址，分发网络流量或提供高可用性。</li></ul></li></ol><p>DNS的工作流程：</p><ol><li><strong>用户输入域名</strong>: <ul><li>用户在浏览器地址栏输入一个域名，如<code>www.example.com</code>。</li></ul></li><li><strong>本地DNS缓存查询</strong>: <ul><li>浏览器首先检查自己的DNS缓存，看是否已经有了该域名的IP地址记录。</li></ul></li><li><strong>操作系统DNS缓存查询</strong>: <ul><li>如果浏览器缓存中没有记录，操作系统会检查自己的DNS缓存。</li></ul></li><li><strong>配置的本地DNS服务器查询</strong>: <ul><li>如果本地缓存中没有找到记录，查询请求会被发送到配置的本地DNS服务器，通常是ISP（互联网服务提供商）提供的。</li></ul></li><li><strong>递归查询</strong>: <ul><li>本地DNS服务器会尝试解析域名。如果它也没有缓存结果，它会向其他DNS服务器发起递归查询。</li></ul></li><li><strong>根DNS服务器</strong>: <ul><li>如果本地DNS服务器没有该记录，它会首先查询根DNS服务器，获取负责该顶级域（如.com、.org）的顶级域DNS服务器的地址。</li></ul></li><li><strong>顶级域DNS服务器</strong>: <ul><li>根DNS服务器响应后，本地DNS服务器再向相应的顶级域DNS服务器查询。</li></ul></li><li><strong>权威DNS服务器</strong>: <ul><li>顶级域DNS服务器会提供负责目标域名的权威DNS服务器的地址，然后本地DNS服务器向权威DNS服务器查询。</li></ul></li><li><strong>获取IP地址</strong>: <ul><li>权威DNS服务器拥有域名到IP地址映射的记录，它会将查询结果返回给本地DNS服务器。</li></ul></li><li><strong>缓存结果</strong>: <ul><li>本地DNS服务器将返回的IP地址记录缓存起来，以备后续使用，然后返回给发起查询的客户端。</li></ul></li><li><strong>客户端使用IP地址</strong>: <ul><li>客户端（如用户的浏览器）接收到IP地址后，使用该地址建立与目标服务器的连接。</li></ul></li><li><strong>DNS轮询</strong>: <ul><li>在某些情况下，权威DNS服务器可能有多条记录对应同一个域名，使用DNS轮询可以分发请求到多个服务器。</li></ul></li><li><strong>DNS缓存过期</strong>: <ul><li>DNS记录通常有生存时间（TTL），过期后需要重新查询，以获取最新的IP地址信息。</li></ul></li></ol><h2 id="_4-tcp和udp有什么特点-有什么区别" tabindex="-1"><a class="header-anchor" href="#_4-tcp和udp有什么特点-有什么区别"><span>4. TCP和UDP有什么特点，有什么区别？</span></a></h2><p>​ TCP(Transmission Control Protocol)和UDP(User Datagram Protocol)是两种常见的传输层协议，用于在计算机网络中实现数据的可靠传输和通信。它们有不同的特点和适用场景，下面是它们的主要特点和区别：</p><p>TCP的特点：</p><ul><li>可靠性：TCP是一种可靠的传输协议，它确保数据的传输是可靠的。通过使用确认和重传机制，TCP保证数据能够完整地按序到达目的地，并且可以处理丢弃、重复、乱序等问题。</li><li>面向连接：TCP是面向连接的协议，通信双方在进行数据传输之前需要先建立连接。连接的建立和断开都需要一定的开销，但这样可以确保通信的稳定和可靠性。</li><li>有序性：TCP保证数据按照发送的顺序被接收，不会出现数据乱序的情况。</li><li>流控制和拥塞控制：TCP具有流控制和拥塞控制机制，可以避免发送方发送过多的数据导致接收方无法及时处理，同时也能适应网络拥塞情况。</li><li>基于字节流：TCP 是以字节流的方式进行数据传输的，没有边界，但保证顺序和可靠。</li><li>适用场景：TCP适用于对数据可靠性要求较高的应用场景，如文件传输、网页浏览、电子邮件等。</li></ul><p>UDP的特点：</p><ul><li>不可靠性：UDP是一种不可靠的传输协议，它不保证数据的可靠传输。UDP不使用确认和重传机制，数据发送后不会等待接收方的确认，也不会重发数据，可能导致数据丢失或乱序。</li><li>无连接：UDP是面向无连接的协议，通信双方不需要先建立连接就可以直接发送数据。这样可以减少连接建立和断开的开销，但也意味着没有建立连接的保障。</li><li>无序性：UDP不保证数据按照发送顺序被接收，接收方收到数据的顺序可能与发送顺序不一致。</li><li>不支持流控制和拥塞控制：UDP不提供流控制和拥塞控制，发送方可以以任意速率发送数据，可能导致网络拥塞。</li><li>基于报文：UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。</li><li>适用场景：UDP适用于对实时性要求较高、对数据可靠性要求相对较低的应用场景，如音频/视频传输、实时游戏等。</li></ul><p>总结：</p><p>​ TCP和UDP是两种不同的传输层协议，TCP提供了可靠性和有序性，适用于对数据完整性要求高的场景；而UDP提供了低延迟和实时性，适用于对数据完整性要求相对较低、实时性要求高的场景。在实际应用中，根据不同的需求选择合适的传输协议可以提高网络通信的效率和性能。</p><h2 id="_5-请详细介绍一下tcp的三次握手和四次挥手机制" tabindex="-1"><a class="header-anchor" href="#_5-请详细介绍一下tcp的三次握手和四次挥手机制"><span>5. 请详细介绍一下TCP的三次握手和四次挥手机制？</span></a></h2><p>​ TCP（Transmission Control Protocol）是一种可靠的传输协议，用于在网络中建立可靠的连接。TCP使用三次握手（Three-Way Handshake）来建立连接，并使用四次挥手（Four-Way Handshake）来关闭连接。</p><p>三次握手的过程如下：</p><ul><li><p>第一步：客户端发送SYN（同步）包给服务器。这个包包含了客户端的初始序列号（Client Sequence Number）以及请求建立连接的标志位（SYN=1）。</p></li><li><p>第二步：服务器接收到SYN包后，会发送一个SYN/ACK（同步/确认）包给客户端。这个包包含了服务器的初始序列号（Server Sequence Number）以及对客户端的请求建立连接的确认。</p></li><li><p>第三步：客户端收到SYN/ACK包后，会发送一个ACK（确认）包给服务器，确认服务器的请求建立连接。此时连接已经建立，客户端和服务器可以开始进行数据传输。</p></li></ul><p>​ 通过三次握手，客户端和服务器就建立了可靠的连接。这种机制可以确保双方都同意建立连接，并且可以互相确认对方的请求和确认。</p><p>四次挥手的过程如下：</p><ul><li>第一步：当客户端想要关闭连接时，它发送一个FIN（结束）包给服务器，表示它不再发送数据了。</li><li>第二步：服务器接收到FIN包后，进入close_wait阶段，并发送一个ACK包给客户端，确认收到了客户端的关闭请求。</li><li>第三步：服务器处理完数据后，发送一个FIN包给客户端，表示服务器也准备关闭连接。</li><li>第四步：客户端接收到FIN包后，进入time_wait阶段，并发送一个ACK包给服务器，确认收到了服务器的关闭请求。此时服务器的连接已经关闭，客户端在TIME_WAIT状态等待2MSL时间后，确保服务端接收到了最终的确认，然后关闭客户端的连接。</li></ul><h2 id="_6-什么是close-wait、time-wait和2msl时间-都有什么作用" tabindex="-1"><a class="header-anchor" href="#_6-什么是close-wait、time-wait和2msl时间-都有什么作用"><span>6. 什么是close_wait、time_wait和2MSL时间?都有什么作用？</span></a></h2><p>close_wait：表示对方已经发送了关闭连接的请求，等待本端应用程序也关闭连接。这个阶段就是为了让应用程序有时间处理完剩余的数据，并主动关闭连接。</p><p>time_wait：表示一个连接已经完成了关闭连接，并且在等待最后的确认报文。这个阶段有两个作用：一是防止上一次连接中的延迟或重复的数据包被下一次连接错误的接收；二是确保被动关闭方在规定的时间内正常的关闭连接。</p><p>2MSL时间：</p><ul><li>2MSL（最大报文段生存时间的两倍）是一个时间参数，用于确定在TIME_WAIT状态下等待的时间长度。</li><li>MSL是TCP实现定义的一个时间值，表示一个TCP段在网络中生存的最大时间。2MSL确保了即使在最坏的情况下，任何旧的重复TCP段也会在2MSL时间后从网络中消失。</li><li>等待2MSL时间是TCP连接关闭过程的一个重要安全特性，它防止了旧的数据包在连接重新建立后干扰新的通信。</li></ul><h2 id="_7-tcp的重传机制是什么" tabindex="-1"><a class="header-anchor" href="#_7-tcp的重传机制是什么"><span>7. TCP的重传机制是什么？</span></a></h2><p>​ TCP（传输控制协议）的重传机制是其确保数据可靠传输的关键组成部分。</p><p>以下是TCP重传机制的几个主要方面：</p><ol><li><strong>超时重传（Timeout Retransmission）</strong>： <ul><li>发送方在发送数据后会启动一个计时器，如果在设定的时间内没有收到确认（ACK），则会认为数据包丢失或损坏，并重新发送该数据包。</li></ul></li><li><strong>快速重传（Fast Retransmit）</strong>： <ul><li>发送方在没有收到预期的ACK，而是收到了三个重复的ACK（表明接收方收到了特定的数据包多次），会立即重传丢失的数据包，而不是等待超时计时器到期。</li></ul></li><li><strong>选择性确认（Selective Acknowledgment, SACK）</strong>： <ul><li>这是一种可选的TCP扩展，允许接收方明确告知发送方哪些数据包已经成功接收，哪些需要重传。这可以减少不必要的重传，提高效率。</li></ul></li></ol><h2 id="_8-tcp是如何进行流量控制的" tabindex="-1"><a class="header-anchor" href="#_8-tcp是如何进行流量控制的"><span>8. TCP是如何进行流量控制的？</span></a></h2><p>​ TCP是通过<strong>滑动窗口</strong>的方式来进行流量控制的。网络传输有一个特点：数据往返时间越长，通讯效率越低。通过指定滑动窗口的大小，就可以实现双方无需等待确认，可以继续发送数据的最大值。滑动窗口的大小一般有接收方的窗口大小来决定的，TCP的头部中存在一个Window的字段用来描述接收方的数据大小，发送方可以根据这个值来发送数据，进而避免接受方出现数据溢出的情况。</p><h2 id="_9-http和https有哪些区别" tabindex="-1"><a class="header-anchor" href="#_9-http和https有哪些区别"><span>9. HTTP和HTTPS有哪些区别？</span></a></h2><ol><li>HTTPS协议需要到CA申请SSL证书,而HTTP不需要。SSL证书能够证明网站的身份,保证通信安全。</li><li>HTTPS使用的是TLS/SSL加密通信,而HTTP是明文传输。HTTPS在传输前会将数据加密,能够防止数据在传输过程中被窃取。</li><li>HTTPS协议的默认端口是443,而HTTP协议的默认端口是80。</li><li>HTTPS速度会略慢于HTTP,因为需要进行加密解密等过程。</li><li>HTTPS可以防止DNS劫持攻击,而HTTP容易受到攻击。</li></ol><p>​ 总体来说,HTTPS协议是更安全的选择。在涉及敏感信息的场景下,都应该使用HTTPS来保证通信安全。</p><h2 id="_10-什么是ssl加密" tabindex="-1"><a class="header-anchor" href="#_10-什么是ssl加密"><span>10. 什么是SSL加密？</span></a></h2><p>SSL（Secure Sockets Layer）加密是一种安全协议，用于在互联网上建立一个加密的链接，确保数据在客户端和服务器之间传输过程中的安全性。SSL协议通过使用加密算法来保护数据不被未授权的第三方访问或篡改。</p><p>SSL加密的主要功能包括：</p><ol><li><strong>身份验证</strong>：SSL使用数字证书来验证服务器和（可选的）客户端的身份，确保通信双方是可信的。</li><li><strong>数据加密</strong>：SSL使用对称加密算法（如AES）来加密传输的数据，确保数据在传输过程中的机密性。</li><li><strong>数据完整性</strong>：SSL使用消息摘要算法（如SHA）来确保数据在传输过程中没有被篡改。</li></ol><p>SSL的替代者是TLS（Transport Layer Security），它是基于SSL协议进一步发展的，提供了更强的安全性和更多的功能。在实际应用中，&quot;SSL&quot;这个术语经常被用来泛指SSL和TLS协议。</p><p>SSL/TLS加密通常用于以下场景：</p><ul><li>网上银行和在线支付系统</li><li>电子商务网站</li><li>任何需要保护用户隐私和数据安全的在线服务</li></ul><p>当用户通过浏览器访问一个使用SSL/TLS的网站时，浏览器地址栏通常会出现一个锁形图标，表示当前连接是安全的。点击这个图标可以查看网站的安全证书和其他安全信息。</p><h2 id="_11-http1、http2和http3的区别" tabindex="-1"><a class="header-anchor" href="#_11-http1、http2和http3的区别"><span>11. HTTP1、HTTP2和HTTP3的区别？</span></a></h2><p>HTTP（超文本传输协议）是互联网上应用最为广泛的网络协议之一，用于从服务器传输超文本到本地浏览器。随着技术的发展，HTTP经历了几个版本的更新，其中包括HTTP/1.x、HTTP/2和HTTP/3。以下是它们之间的主要区别：</p><ol><li><p><strong>HTTP/1.x</strong>:</p><ul><li>支持文本协议，基于TCP连接。</li><li>每个TCP连接只能发送一个请求，需要等待响应后才能发送下一个请求（队头阻塞）。</li><li>支持持久连接（HTTP/1.1），可以减少连接建立和关闭的开销，但仍然存在队头阻塞问题。</li><li>只支持头部压缩（HTTP/1.1），不包括内容压缩。</li></ul></li><li><p><strong>HTTP/2</strong>:</p><ul><li>基于二进制协议，提高了解析效率。</li><li>引入了多路复用（Multiplexing），允许在单个TCP连接上并行交错发送多个请求和响应，减少了队头阻塞问题。</li><li>支持头部压缩（HPACK），减少了头部信息的传输大小。</li><li>允许服务器推送（Server Push），服务器可以在客户端请求之前主动发送资源。</li><li>支持流量控制和优先级设置，更有效地管理资源。</li></ul></li><li><p><strong>HTTP/3</strong>:</p><ul><li>基于QUIC协议，运行在UDP之上，而不是TCP。</li><li>解决了TCP在某些网络环境下的队头阻塞问题，提高了连接的稳定性和效率。</li><li>继承了HTTP/2的多路复用、头部压缩和服务器推送特性。</li><li>支持0-RTT连接建立，减少了连接建立的延迟。</li><li>提供更好的拥塞控制和网络恢复机制，提高了网络适应性。</li></ul></li></ol><p>总的来说，HTTP/2相比HTTP/1.x在性能上有显著提升，而HTTP/3则进一步优化了传输效率和稳定性，特别是在移动和不稳定网络环境下。随着技术的发展，HTTP/3可能会逐渐成为主流的网络协议。</p><h2 id="_12-get和post有哪些区别" tabindex="-1"><a class="header-anchor" href="#_12-get和post有哪些区别"><span>12. GET和POST有哪些区别？</span></a></h2><p>​ GET和POST是HTTP协议中常用的两种请求方法，它们在数据传输和语义上有以下区别：</p><ol><li>数据位置：GET请求将参数数据附加在URL的查询字符串中，即放在URL的后面，以?符号分隔参数。例如：http://example.com/path?param1=value1¶m2=value2。而POST请求将参数数据放在请求的消息体中，作为请求的一部分。</li><li>数据长度限制：GET请求对URL长度有限制，不同浏览器和服务器对URL长度的限制不同，一般在几千个字符左右。而POST请求没有长度限制，因为参数数据放在请求的消息体中。</li><li>数据类型：GET请求的参数数据以键值对的形式出现在URL中，数据类型是明文的，可以直接在URL中看到。而POST请求的参数数据在消息体中，数据类型是隐藏的，不会直接显示在URL中，更安全。</li><li>数据语义：GET请求是幂等的，即多次重复请求不会产生副作用，只是获取数据，不会对服务器产生影响，可以被缓存。POST请求是非幂等的，可能会对服务器产生副作用，例如创建、更新或删除数据，不适合被缓存。</li><li>安全性：GET请求的参数数据暴露在URL中，容易被拦截、篡改或缓存，不适合传输敏感信息。POST请求的参数数据在消息体中，相对安全，适合传输敏感信息。</li></ol><p>​ 总结来说，GET适合用于获取数据，参数在URL中明文传输；而POST适合用于提交数据，参数在请求消息体中传输，更安全且没有长度限制。根据具体需求和场景，选择适合的请求方法。</p>',61);function r(T,p){return s(),i("div",null,[t(" more "),n])}const P=l(o,[["render",r],["__file","计算机网络.html.vue"]]),S=JSON.parse('{"path":"/books/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html","title":"计算机网络","lang":"zh-CN","frontmatter":{"title":"计算机网络","cover":"/assets/images/11.jpg","date":"2024-06-01T00:00:00.000Z","category":["计算机"],"tag":["学习资料"]},"headers":[{"level":2,"title":"1. 经典网络分层，五层七层是哪些？","slug":"_1-经典网络分层-五层七层是哪些","link":"#_1-经典网络分层-五层七层是哪些","children":[]},{"level":2,"title":"2. 在浏览器地址中输入URL，后续的网络世界会发生什么？","slug":"_2-在浏览器地址中输入url-后续的网络世界会发生什么","link":"#_2-在浏览器地址中输入url-后续的网络世界会发生什么","children":[]},{"level":2,"title":"3. 介绍一下DNS服务","slug":"_3-介绍一下dns服务","link":"#_3-介绍一下dns服务","children":[]},{"level":2,"title":"4. TCP和UDP有什么特点，有什么区别？","slug":"_4-tcp和udp有什么特点-有什么区别","link":"#_4-tcp和udp有什么特点-有什么区别","children":[]},{"level":2,"title":"5. 请详细介绍一下TCP的三次握手和四次挥手机制？","slug":"_5-请详细介绍一下tcp的三次握手和四次挥手机制","link":"#_5-请详细介绍一下tcp的三次握手和四次挥手机制","children":[]},{"level":2,"title":"6. 什么是close_wait、time_wait和2MSL时间?都有什么作用？","slug":"_6-什么是close-wait、time-wait和2msl时间-都有什么作用","link":"#_6-什么是close-wait、time-wait和2msl时间-都有什么作用","children":[]},{"level":2,"title":"7. TCP的重传机制是什么？","slug":"_7-tcp的重传机制是什么","link":"#_7-tcp的重传机制是什么","children":[]},{"level":2,"title":"8. TCP是如何进行流量控制的？","slug":"_8-tcp是如何进行流量控制的","link":"#_8-tcp是如何进行流量控制的","children":[]},{"level":2,"title":"9. HTTP和HTTPS有哪些区别？","slug":"_9-http和https有哪些区别","link":"#_9-http和https有哪些区别","children":[]},{"level":2,"title":"10. 什么是SSL加密？","slug":"_10-什么是ssl加密","link":"#_10-什么是ssl加密","children":[]},{"level":2,"title":"11. HTTP1、HTTP2和HTTP3的区别？","slug":"_11-http1、http2和http3的区别","link":"#_11-http1、http2和http3的区别","children":[]},{"level":2,"title":"12. GET和POST有哪些区别？","slug":"_12-get和post有哪些区别","link":"#_12-get和post有哪些区别","children":[]}],"git":{"createdTime":1721895090000,"updatedTime":1721895090000,"contributors":[{"name":"yunzhongyue","email":"15737369015@163.com","commits":1}]},"readingTime":{"minutes":18.38,"words":5513},"filePathRelative":"books/计算机基础/计算机网络.md","localizedDate":"2024年6月1日","excerpt":""}');export{P as comp,S as data};
