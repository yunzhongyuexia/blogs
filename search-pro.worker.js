const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":164,\"nextId\":164,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"2@1\",\"4\":\"3\",\"5\":\"3@0\",\"6\":\"3@1\",\"7\":\"4\",\"8\":\"4#channel类型\",\"9\":\"4#send语句\",\"10\":\"4#receive-操作符\",\"11\":\"4#blocking\",\"12\":\"4#buffered-channels\",\"13\":\"4#range\",\"14\":\"4#select\",\"15\":\"4#timeout\",\"16\":\"4#timer和ticker\",\"17\":\"4#close\",\"18\":\"4#同步\",\"19\":\"4@0\",\"20\":\"4@1\",\"21\":\"5\",\"22\":\"5#接口类型\",\"23\":\"5#接口的定义\",\"24\":\"5#实现接口的条件\",\"25\":\"5#为什么使用接口\",\"26\":\"5#面向接口编程\",\"27\":\"5#接口类型变量\",\"28\":\"5#值接收者和指针接收者\",\"29\":\"5#值接收者实现接口\",\"30\":\"5#指针接收者实现接口\",\"31\":\"5#类型与接口的关系\",\"32\":\"5#一个类型实现多个接口\",\"33\":\"5#多个类型实现统一接口\",\"34\":\"5#接口组合\",\"35\":\"5#空接口\",\"36\":\"5#空接口的定义\",\"37\":\"5#空接口的应用\",\"38\":\"5#接口值\",\"39\":\"5#类型断言\",\"40\":\"5@0\",\"41\":\"5@1\",\"42\":\"6\",\"43\":\"6#单例模型简介\",\"44\":\"6#go语言实现单例模型\",\"45\":\"6@0\",\"46\":\"6@1\",\"47\":\"7\",\"48\":\"7#观察者模型简介\",\"49\":\"7#go语言实现观察者模型\",\"50\":\"7@0\",\"51\":\"7@1\",\"52\":\"8\",\"53\":\"8@0\",\"54\":\"8@1\",\"55\":\"9\",\"56\":\"9@0\",\"57\":\"9@1\",\"58\":\"10\",\"59\":\"10@0\",\"60\":\"10@1\",\"61\":\"11\",\"62\":\"11@0\",\"63\":\"11@1\",\"64\":\"12\",\"65\":\"12#css语法\",\"66\":\"12#css三种导入方式\",\"67\":\"12#选择器\",\"68\":\"12#盒子模型\",\"69\":\"12#浮动\",\"70\":\"12#传统网页布局五种方式\",\"71\":\"12#浮动的三大特性\",\"72\":\"12#定位\",\"73\":\"12#定位方式\",\"74\":\"12@0\",\"75\":\"12@1\",\"76\":\"13\",\"77\":\"13#html文件结构\",\"78\":\"13#常用文本标签\",\"79\":\"13#html属性\",\"80\":\"13#html区块-块元素与行内元素\",\"81\":\"13#块元素-block\",\"82\":\"13#行内元素-inline\",\"83\":\"13#html表单\",\"84\":\"13@0\",\"85\":\"13@1\",\"86\":\"14\",\"87\":\"14#javascript的作用\",\"88\":\"14#javascript基本语法\",\"89\":\"14#控制语句\",\"90\":\"14#条件语句\",\"91\":\"14#循环语句\",\"92\":\"14#函数\",\"93\":\"14#事件\",\"94\":\"14#dom\",\"95\":\"14@0\",\"96\":\"14@1\",\"97\":\"15\",\"98\":\"15#表格的增删改查\",\"99\":\"15@0\",\"100\":\"15@1\",\"101\":\"16\",\"102\":\"16#索引\",\"103\":\"16#_1-数据库三大范式\",\"104\":\"16#_2-mysql存储引擎myisam和innodb有哪些区别\",\"105\":\"16#_3-什么是索引-都有哪些类型-有什么优缺点\",\"106\":\"16#_4-b树和b-树的区别。\",\"107\":\"16#_5-为什么使用b-树而不使用红黑树、二叉树\",\"108\":\"16#_6-聚集索引和非聚集索引的区别\",\"109\":\"16#_7-为什么一张表要有一个主键id\",\"110\":\"16#_8-怎么减少回表\",\"111\":\"16#_9-为什么会有索引失效的情况\",\"112\":\"16#_10-如何进行索引调优\",\"113\":\"16#_11-索引下推是什么\",\"114\":\"16#锁\",\"115\":\"16#_12-mysql中的锁有哪些\",\"116\":\"16#_13-什么是mdl锁\",\"117\":\"16#_14-mdl什么时候加锁\",\"118\":\"16#_15-mdl有什么危害\",\"119\":\"16#_16-如何避免mdl出现问题\",\"120\":\"16#_17-行锁在什么时候加锁\",\"121\":\"16#_18-next-key-lock锁的两优化是什么\",\"122\":\"16#_19-乐观锁与悲观锁\",\"123\":\"16#事务\",\"124\":\"16#_20-mysql的事务的隔离级别有哪些\",\"125\":\"16#_21-脏读、幻读和不可重复读是什么\",\"126\":\"16#_22-不同的隔离级别分别容易出现什么问题-又解决了什么问题\",\"127\":\"16#_21-mvcc是如何实现的\",\"128\":\"16#_23-脏读、幻读和不可重复读是如何解决的\",\"129\":\"16#_24-数据量大的时候如何切分\",\"130\":\"16#_25-快照度和当前读是什么\",\"131\":\"16#日志\",\"132\":\"16#_26-bin-log和redo-log的区别\",\"133\":\"16#_27-什么是wal机制\",\"134\":\"16#_28-什么是两阶段提交\",\"135\":\"16#_29-mysql什么时候刷脏页\",\"136\":\"16#_30-redo-log和bin-log是如何配合工作的\",\"137\":\"16@0\",\"138\":\"16@1\",\"139\":\"17\",\"140\":\"17#_1-经典网络分层-五层七层是哪些\",\"141\":\"17#_2-在浏览器地址中输入url-后续的网络世界会发生什么\",\"142\":\"17#_3-介绍一下dns服务\",\"143\":\"17#_4-tcp和udp有什么特点-有什么区别\",\"144\":\"17#_5-请详细介绍一下tcp的三次握手和四次挥手机制\",\"145\":\"17#_6-什么是close-wait、time-wait和2msl时间-都有什么作用\",\"146\":\"17#_7-tcp的重传机制是什么\",\"147\":\"17#_8-tcp是如何进行流量控制的\",\"148\":\"17#_9-http和https有哪些区别\",\"149\":\"17#_10-什么是ssl加密\",\"150\":\"17#_11-http1、http2和http3的区别\",\"151\":\"17#_12-get和post有哪些区别\",\"152\":\"17@0\",\"153\":\"17@1\",\"154\":\"18\",\"155\":\"19\",\"156\":\"20\",\"157\":\"21\",\"158\":\"22\",\"159\":\"23\",\"160\":\"24\",\"161\":\"25\",\"162\":\"26\",\"163\":\"27\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,28],\"1\":[1,1],\"2\":[null,null,1],\"3\":[null,null,1],\"4\":[1,1],\"5\":[null,null,1],\"6\":[null,null,1],\"7\":[1,26],\"8\":[1,72],\"9\":[1,45],\"10\":[2,24],\"11\":[1,40],\"12\":[2,11],\"13\":[1,31],\"14\":[1,62],\"15\":[1,40],\"16\":[1,55],\"17\":[1,45],\"18\":[1,26],\"19\":[null,null,1],\"20\":[null,null,1],\"21\":[1,27],\"22\":[1],\"23\":[1,33],\"24\":[1,27],\"25\":[1,76],\"26\":[1,82],\"27\":[1,21],\"28\":[1,8],\"29\":[1,29],\"30\":[1,33],\"31\":[1],\"32\":[1,37],\"33\":[1,56],\"34\":[1,64],\"35\":[1],\"36\":[1,35],\"37\":[1,31],\"38\":[1,90],\"39\":[1,92],\"40\":[null,null,1],\"41\":[null,null,1],\"42\":[1],\"43\":[1,14],\"44\":[1,144],\"45\":[null,null,1],\"46\":[null,null,1],\"47\":[1],\"48\":[1,56],\"49\":[1,91],\"50\":[null,null,1],\"51\":[null,null,1],\"52\":[1,52],\"53\":[null,null,1],\"54\":[null,null,1],\"55\":[1,112],\"56\":[null,null,1],\"57\":[null,null,1],\"58\":[1,57],\"59\":[null,null,1],\"60\":[null,null,1],\"61\":[1,39],\"62\":[null,null,1],\"63\":[null,null,1],\"64\":[1],\"65\":[1,23],\"66\":[1,65],\"67\":[1,134],\"68\":[1,71],\"69\":[1,4],\"70\":[1,23],\"71\":[1,57],\"72\":[1,3],\"73\":[1,60],\"74\":[null,null,1],\"75\":[null,null,1],\"76\":[1,41],\"77\":[1,42],\"78\":[1,98],\"79\":[1,92],\"80\":[2],\"81\":[3,20],\"82\":[3,67],\"83\":[1,63],\"84\":[null,null,1],\"85\":[null,null,1],\"86\":[1,13],\"87\":[1,55],\"88\":[1,38],\"89\":[1],\"90\":[1,47],\"91\":[1,55],\"92\":[1,55],\"93\":[1,69],\"94\":[1,101],\"95\":[null,null,1],\"96\":[null,null,1],\"97\":[1],\"98\":[1,133],\"99\":[null,null,1],\"100\":[null,null,1],\"101\":[1],\"102\":[1],\"103\":[2,29],\"104\":[3,37],\"105\":[5,15],\"106\":[3,21],\"107\":[4,18],\"108\":[3,14],\"109\":[3,18],\"110\":[3,2],\"111\":[3,24],\"112\":[3,34],\"113\":[3,6],\"114\":[1],\"115\":[3,112],\"116\":[3,13],\"117\":[3,31],\"118\":[3,26],\"119\":[3,9],\"120\":[3,5],\"121\":[5,9],\"122\":[2,24],\"123\":[1],\"124\":[3,14],\"125\":[4,23],\"126\":[4,9],\"127\":[3,35],\"128\":[4,2],\"129\":[3,19],\"130\":[3,34],\"131\":[1],\"132\":[5,44],\"133\":[3,21],\"134\":[3,16],\"135\":[3,7],\"136\":[5,20],\"137\":[null,null,1],\"138\":[null,null,1],\"139\":[1],\"140\":[4,67],\"141\":[4,97],\"142\":[2,94],\"143\":[4,82],\"144\":[3,70],\"145\":[7,25],\"146\":[3,31],\"147\":[3,13],\"148\":[3,21],\"149\":[3,40],\"150\":[4,59],\"151\":[3,59],\"152\":[null,null,1],\"153\":[null,null,1],\"154\":[1,3],\"155\":[1],\"156\":[1],\"157\":[1],\"158\":[1],\"159\":[1],\"160\":[1],\"161\":[1],\"162\":[1],\"163\":[1]},\"averageFieldLength\":[1.6960839760285449,41.14965877564224,0.7806343182563051],\"storedFields\":{\"0\":{\"h\":\"个人介绍\",\"t\":[\"大家好!我是一名资深二次元宅男，对编程和技术创新充满热情。作为一个终身学习者，我对世界保持好奇，并且不断追求知识的深度与广度。除了编程，我的爱好还包括阅读和游戏，这些兴趣不仅丰富了我的生活体验，也为我的技术工作带来了新的视角和灵感。\",\"因此，我创建了这个博客，一个记录我学习旅程、技术见解和生活点滴的空间。在这里，我将分享我的技术探索、项目案例、学习笔记以及对行业的见解。我的目标是通过这个平台记录自己的成长，与志同道合的朋友们交流思想，并为初学者提供易于理解的教程和指南。\",\"如果你对我的分享感兴趣，或者有任何问题和建议，欢迎在文章下方留言，或者通过电子邮件与我联系。非常感谢你的访问，希望我们能在这个知识共享的社区中共同成长和进步。\"]},\"1\":{\"h\":\"鸣潮\",\"t\":[\"待开发\"]},\"2\":{\"c\":[\"游戏杂谈\"]},\"3\":{\"c\":[\"游戏攻略\"]},\"4\":{\"h\":\"聊天室\",\"t\":[\"待开发\"]},\"5\":{\"c\":[\"项目介绍\"]},\"6\":{\"c\":[\"WebSocket\"]},\"7\":{\"h\":\"Channel详解\",\"t\":[\"​ Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。它的操作符是箭头 <-\",\"ch <- v // 发送值v到Channel ch中 v := <-ch // 从Channel ch中接收数据，并将数据赋值给v\",\"(箭头的指向就是数据的流向)\",\"就像 map 和 slice 数据类型一样, channel必须先创建再使用:\",\"ch := make(chan int)\"]},\"8\":{\"h\":\"Channel类型\",\"t\":[\"Channel类型的定义格式如下：\",\"ChannelType = ( \\\"chan\\\" | \\\"chan\\\" \\\"<-\\\" | \\\"<-\\\" \\\"chan\\\" ) ElementType .\",\"​ 它包括三种类型的定义。可选的<-代表channel的方向。如果没有指定方向，那么Channel就是双向的，既可以接收数据，也可以发送数据。\",\"chan T // 可以接收和发送类型为 T 的数据 chan<- float64 // 只可以用来发送 float64 类型的数据 <-chan int // 只可以用来接收 int 类型的数据\",\"<-总是优先和最左边的类型结合。\",\"chan<- chan int // 等价 chan<- (chan int) chan<- <-chan int // 等价 chan<- (<-chan int) <-chan <-chan int // 等价 <-chan (<-chan int) chan (<-chan int)\",\"使用make初始化Channel,并且可以设置容量:\",\"make(chan int, 100)\",\"​ 容量(capacity)代表Channel容纳的最多的元素的数量，代表Channel的缓存的大小。如果没有设置容量，或者容量设置为0, 说明Channel没有缓存，只有sender和receiver都准备好了后它们的通讯(communication)才会发生(Blocking)。如果设置了缓存，就有可能不发生阻塞， 只有buffer满了后 send才会阻塞， 而只有缓存空了后receive才会阻塞。一个nil channel不会通信。可以通过内建的close方法可以关闭Channel。\",\"​ 你可以在多个goroutine从/往 一个channel 中 receive/send 数据, 不必考虑额外的同步措施。Channel可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。channel的 receive支持 multi-valued assignment，如：\",\"v, ok := <-ch\",\"它可以用来检查Channel是否已经被关闭。\"]},\"9\":{\"h\":\"send语句\",\"t\":[\"send语句用来往Channel中发送数据， 如ch <- 3。它的定义如下:\",\"SendStmt = Channel \\\"<-\\\" Expression . Channel = Expression .\",\"在通讯(communication)开始前channel和expression必选先求值出来(evaluated)，比如下面的(3+4)先计算出7然后再发送给channel。\",\"c := make(chan int) defer close(c) go func() { c <- 3 + 4 }() i := <-c fmt.Println(i)//输出7\",\"send被执行前(proceed)通讯(communication)一直被阻塞着。如前所言，无缓存的channel只有在receiver准备好后send才被执行。如果有缓存，并且缓存未满，则send会被执行。往一个已经被close的channel中继续发送数据会导致run-time panic。往nil channel中发送数据会一致被阻塞着。\"]},\"10\":{\"h\":\"receive 操作符\",\"t\":[\"<-ch用来从channel ch中接收数据，这个表达式会一直被block,直到有数据可以接收。从一个nil channel中接收数据会一直被block。从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。如前所述，你可以使用一个额外的返回参数来检查channel是否关闭。\",\"x, ok := <-ch x, ok = <-ch var x, ok = <-ch\",\"如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。\"]},\"11\":{\"h\":\"blocking\",\"t\":[\"默认情况下，发送和接收会一直阻塞着，直到另一方准备好。这种方式可以用来在gororutine中进行同步，而不必使用显示的锁或者条件变量。如官方的例子中x, y := <-c, <-c这句会一直等待计算结果发送到channel中。\",\"import \\\"fmt\\\" func sum(s []int, c chan int) { sum := 0 for _, v := range s { sum += v } c <- sum // send sum to c } func main() { s := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(s[:len(s)/2], c) go sum(s[len(s)/2:], c) x, y := <-c, <-c // receive from c fmt.Println(x, y, x+y) }\"]},\"12\":{\"h\":\"Buffered Channels\",\"t\":[\"make的第二个参数指定缓存的大小：ch := make(chan int, 100)。通过缓存的使用，可以尽量避免阻塞，提供应用的性能。\"]},\"13\":{\"h\":\"Range\",\"t\":[\"for …… range语句可以处理Channel。\",\"func main() { go func() { time.Sleep(1 * time.Hour) }() c := make(chan int) go func() { for i := 0; i < 10; i = i + 1 { c <- i } close(c) }() for i := range c { fmt.Println(i) } fmt.Println(\\\"Finished\\\") }\",\"range c产生的迭代值为Channel中发送的值，它会一直迭代直到channel被关闭。上面的例子中如果把close(c)注释掉，程序会一直阻塞在for …… range那一行。\"]},\"14\":{\"h\":\"select\",\"t\":[\"select语句选择一组可能的send操作和receive操作去处理。它类似switch,但是只是用来处理通讯(communication)操作。它的case可以是send语句，也可以是receive语句，亦或者default。receive语句可以将值赋值给一个或者两个变量。它必须是一个receive操作。最多允许有一个default case,它可以放在case列表的任何位置，尽管我们大部分会将它放在最后。\",\"import \\\"fmt\\\" func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) }\",\"如果有同时多个case去处理,比如同时有多个channel可以接收数据，那么Go会伪随机的选择一个case处理(pseudo-random)。如果没有case需要处理，则会选择default去处理，如果default case存在的情况下。如果没有default case，则select语句会阻塞，直到某个case需要处理。需要注意的是，nil channel上的操作会一直被阻塞，如果没有default case,只有nil channel的select会一直被阻塞。select语句和switch语句一样，它不是循环，它只会选择一个case来处理，如果想一直处理channel，你可以在外面加一个无限的for循环：\",\"for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } }\"]},\"15\":{\"h\":\"timeout\",\"t\":[\"select有很重要的一个应用就是超时处理。 因为上面我们提到，如果没有case需要处理，select语句就会一直阻塞着。这时候我们可能就需要一个超时操作，用来处理超时的情况。 下面这个例子我们会在2秒后往channel c1中发送一个数据，但是select设置为1秒超时,因此我们会打印出timeout 1,而不是result 1。\",\"import \\\"time\\\" import \\\"fmt\\\" func main() { c1 := make(chan string, 1) go func() { time.Sleep(time.Second * 2) c1 <- \\\"result 1\\\" }() select { case res := <-c1: fmt.Println(res) case <-time.After(time.Second * 1): fmt.Println(\\\"timeout 1\\\") } }\",\"其实它利用的是time.After方法，它返回一个类型为<-chan Time的单向的channel，在指定的时间发送一个当前时间给返回的channel中。\"]},\"16\":{\"h\":\"Timer和Ticker\",\"t\":[\"我们看一下关于时间的两个Channel。 timer是一个定时器，代表未来的一个单一事件，你可以告诉timer你要等待多长时间，它提供一个Channel，在将来的那个时间那个Channel提供了一个时间值。下面的例子中第二行会阻塞2秒钟左右的时间，直到时间到了才会继续执行。\",\"timer1 := time.NewTimer(time.Second * 2) <-timer1.C fmt.Println(\\\"Timer 1 expired\\\")\",\"当然如果你只是想单纯的等待的话，可以使用time.Sleep来实现。\",\"你还可以使用timer.Stop来停止计时器。\",\"timer2 := time.NewTimer(time.Second) go func() { <-timer2.C fmt.Println(\\\"Timer 2 expired\\\") }() stop2 := timer2.Stop() if stop2 { fmt.Println(\\\"Timer 2 stopped\\\") }\",\"ticker是一个定时触发的计时器，它会以一个间隔(interval)往Channel发送一个事件(当前时间)，而Channel的接收者可以以固定的时间间隔从Channel中读取事件。下面的例子中ticker每500毫秒触发一次，你可以观察输出的时间。\",\"ticker := time.NewTicker(time.Millisecond * 500) go func() { for t := range ticker.C { fmt.Println(\\\"Tick at\\\", t) } }()\",\"类似timer, ticker也可以通过Stop方法来停止。一旦它停止，接收者不再会从channel中接收数据了。\"]},\"17\":{\"h\":\"close\",\"t\":[\"内建的close方法可以用来关闭channel。总结一下channel关闭后sender的receiver操作。如果channel c已经被关闭,继续往它发送数据会导致panic: send on closed channel:\",\"import \\\"time\\\" func main() { go func() { time.Sleep(time.Hour) }() c := make(chan int, 10) c <- 1 c <- 2 close(c) c <- 3 }\",\"但是从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值:\",\"c := make(chan int, 10) c <- 1 c <- 2 close(c) fmt.Println(<-c) //1 fmt.Println(<-c) //2 fmt.Println(<-c) //0 fmt.Println(<-c) //0\",\"但是如果通过range读取，channel关闭后for循环会跳出：\",\"c := make(chan int, 10) c <- 1 c <- 2 close(c) for i := range c { fmt.Println(i) }\",\"通过i, ok := <-c可以查看Channel的状态，判断值是零值还是正常读取的值。\",\"c := make(chan int, 10) close(c) i, ok := <-c fmt.Printf(\\\"%d, %t\\\", i, ok) //0, false\"]},\"18\":{\"h\":\"同步\",\"t\":[\"channel可以用在goroutine之间的同步。 下面的例子中main goroutine通过done channel等待worker完成任务。 worker做完任务后只需往channel发送一个数据就可以通知main goroutine任务完成。\",\"import ( \\\"fmt\\\" \\\"time\\\" ) func worker(done chan bool) { time.Sleep(time.Second) // 通知任务已完成 done <- true } func main() { done := make(chan bool, 1) go worker(done) // 等待任务完成 <-done }\"]},\"19\":{\"c\":[\"Go语言基础\"]},\"20\":{\"c\":[\"学习资料\"]},\"21\":{\"h\":\"接口详解\",\"t\":[\"​ 接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。\",\"​ 在Go语言中接口（interface）是一种类型，一种抽象的类型。相较于之前章节中讲到的那些具体类型（字符串、切片、结构体等）更注重“我是谁”，接口类型更注重“我能做什么”的问题。接口类型就像是一种约定——概括了一种类型应该具备哪些方法，在Go语言中提倡使用面向接口的编程方式实现解耦。\",\"​ 接口是一种由程序员来定义的类型，一个接口类型就是一组方法的集合，它规定了需要实现的所有方法。相较于使用结构体类型，当我们使用接口类型说明相比于它是什么更关心它能做什么。\"]},\"22\":{\"h\":\"接口类型\"},\"23\":{\"h\":\"接口的定义\",\"t\":[\"type 接口类型名 interface{ 方法名1( 参数列表1 ) 返回值列表1 方法名2( 参数列表2 ) 返回值列表2 … }\",\"其中：\",\"接口类型名：Go语言的接口在命名时，一般会在单词后面添加er，如有写操作的接口叫Writer，有关闭操作的接口叫closer等。接口名最好要能突出该接口的类型含义。\",\"方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。\",\"参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。\",\"举个例子，定义一个包含Write方法的Writer接口：\",\"type Writer interface{ Write([]byte) error }\",\"当你看到一个Writer接口类型的值时，你不知道它是什么，唯一知道的就是可以通过调用它的Write方法来做一些事情。\"]},\"24\":{\"h\":\"实现接口的条件\",\"t\":[\"​ 接口就是规定了一个需要实现的方法列表，在 Go 语言中一个类型只要实现了接口中规定的所有方法，那么我们就称它实现了这个接口。\",\"我们定义的Singer接口类型，它包含一个Sing方法：\",\"// Singer 接口 type Singer interface { Sing() }\",\"我们有一个Bird 结构体类型如下：\",\"type Bird struct {}\",\"因为Singer接口只包含一个Sing方法，所以只需要给Bird结构体添加一个Sing方法就可以满足Singer接口的要求：\",\"// Sing Bird类型的Sing方法 func (b Bird) Sing() { fmt.Println(\\\"汪汪汪\\\") }\",\"这样就称为Bird实现了Singer接口。\"]},\"25\":{\"h\":\"为什么使用接口\",\"t\":[\"现在假设我们的代码世界里有很多小动物，下面的代码片段定义了猫和狗，它们饿了都会叫。\",\"package main import \\\"fmt\\\" type Cat struct{} func (c Cat) Say() { fmt.Println(\\\"喵喵喵~\\\") } type Dog struct{} func (d Dog) Say() { fmt.Println(\\\"汪汪汪~\\\") } func main() { c := Cat{} c.Say() d := Dog{} d.Say() }\",\"这个时候又跑来了一只羊，羊饿了也会发出叫声。\",\"type Sheep struct{} func (s Sheep) Say() { fmt.Println(\\\"咩咩咩~\\\") }\",\"我们接下来定义一个饿肚子的场景。\",\"// MakeCatHungry 猫饿了会喵喵喵~ func MakeCatHungry(c Cat) { c.Say() } // MakeSheepHungry 羊饿了会咩咩咩~ func MakeSheepHungry(s Sheep) { s.Say() }\",\"接下来会有越来越多的小动物跑过来，我们的代码世界该怎么拓展呢？\",\"在饿肚子这个场景下，我们可不可以把所有动物都当成一个“会叫的类型”来处理呢？当然可以！使用接口类型就可以实现这个目标。 我们的代码其实并不关心究竟是什么动物在叫，我们只是在代码中调用它的Say()方法，这就足够了。\",\"我们可以约定一个Sayer类型，它必须实现一个Say()方法，只要饿肚子了，我们就调用Say()方法。\",\"type Sayer interface { Say() }\",\"然后我们定义一个通用的MakeHungry函数，接收Sayer类型的参数。\",\"// MakeHungry 饿肚子了... func MakeHungry(s Sayer) { s.Say() }\",\"我们通过使用接口类型，把所有会叫的动物当成Sayer类型来处理，只要实现了Say()方法都能当成Sayer类型的变量来处理。\",\"var c cat MakeHungry(c) var d dog MakeHungry(d)\",\"​ 在电商系统中我们允许用户使用多种支付方式（支付宝支付、微信支付、银联支付等），我们的交易流程中可能不太在乎用户究竟使用什么支付方式，只要它能提供一个实现支付功能的Pay方法让调用方调用就可以了。\",\"​ 再比如我们需要在某个程序中添加一个将某些指标数据向外输出的功能，根据不同的需求可能要将数据输出到终端、写入到文件或者通过网络连接发送出去。在这个场景下我们可以不关注最终输出的目的地是什么，只需要它能提供一个Write方法让我们把内容写入就可以了。\",\"​ Go语言中为了解决类似上面的问题引入了接口的概念，接口类型区别于我们之前章节中介绍的那些具体类型，让我们专注于该类型提供的方法，而不是类型本身。使用接口类型通常能够让我们写出更加通用和灵活的代码。\"]},\"26\":{\"h\":\"面向接口编程\",\"t\":[\"​ PHP、Java等语言中也有接口的概念，不过在PHP和Java语言中需要显式声明一个类实现了哪些接口，在Go语言中使用隐式声明的方式实现接口。只要一个类型实现了接口中规定的所有方法，那么它就实现了这个接口。\",\"Go语言中的这种设计符合程序开发中抽象的一般规律，例如在下面的代码示例中，我们的电商系统最开始只设计了支付宝一种支付方式：\",\"type ZhiFuBao struct { // 支付宝 } // Pay 支付宝的支付方法 func (z *ZhiFuBao) Pay(amount int64) { fmt.Printf(\\\"使用支付宝付款：%.2f元。\\\\n\\\", float64(amount/100)) } // Checkout 结账 func Checkout(obj *ZhiFuBao) { // 支付100元 obj.Pay(100) } func main() { Checkout(&ZhiFuBao{}) }\",\"随着业务的发展，根据用户需求添加支持微信支付。\",\"type WeChat struct { // 微信 } // Pay 微信的支付方法 func (w *WeChat) Pay(amount int64) { fmt.Printf(\\\"使用微信付款：%.2f元。\\\\n\\\", float64(amount/100)) }\",\"在实际的交易流程中，我们可以根据用户选择的支付方式来决定最终调用支付宝的Pay方法还是微信支付的Pay方法。\",\"// Checkout 支付宝结账 func CheckoutWithZFB(obj *ZhiFuBao) { // 支付100元 obj.Pay(100) } // Checkout 微信支付结账 func CheckoutWithWX(obj *WeChat) { // 支付100元 obj.Pay(100) }\",\"实际上，从上面的代码示例中我们可以看出，我们其实并不怎么关心用户选择的是什么支付方式，我们只关心调用Pay方法时能否正常运行。这就是典型的“不关心它是什么，只关心它能做什么”的场景。\",\"在这种场景下我们可以将具体的支付方式抽象为一个名为Payer的接口类型，即任何实现了Pay方法的都可以称为Payer类型。\",\"// Payer 包含支付方法的接口类型 type Payer interface { Pay(int64) }\",\"此时只需要修改下原始的Checkout函数，它接收一个Payer类型的参数。这样就能够在不修改既有函数调用的基础上，支持新的支付方式。\",\"// Checkout 结账 func Checkout(obj Payer) { // 支付100元 obj.Pay(100) } func main() { Checkout(&ZhiFuBao{}) // 之前调用支付宝支付 Checkout(&WeChat{}) // 现在支持使用微信支付 }\",\"像类似的例子在我们编程过程中会经常遇到：\",\"比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？\",\"比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？\",\"比如满减券、立减券、打折券都属于电商场景下常见的优惠方式，我们能不能把它们当成“优惠券”来处理呢？\",\"接口类型是Go语言提供的一种工具，在实际的编码过程中是否使用它由你自己决定，但是通常使用接口类型可以使代码更清晰易读。\"]},\"27\":{\"h\":\"接口类型变量\",\"t\":[\"那实现了接口又有什么用呢？一个接口类型的变量能够存储所有实现了该接口的类型变量。\",\"例如在上面的示例中，Dog和Cat类型均实现了Sayer接口，此时一个Sayer类型的变量就能够接收Cat和Dog类型的变量。\",\"var x Sayer // 声明一个Sayer类型的变量x a := Cat{} // 声明一个Cat类型变量a b := Dog{} // 声明一个Dog类型变量b x = a // 可以把Cat类型变量直接赋值给x x.Say() // 喵喵喵 x = b // 可以把Dog类型变量直接赋值给x x.Say() // 汪汪汪\"]},\"28\":{\"h\":\"值接收者和指针接收者\",\"t\":[\"我们定义一个Mover接口，它包含一个Move方法。\",\"// Mover 定义一个接口类型 type Mover interface { Move() }\"]},\"29\":{\"h\":\"值接收者实现接口\",\"t\":[\"我们定义一个Dog结构体类型，并使用值接收者为其定义一个Move方法。\",\"// Dog 狗结构体类型 type Dog struct{} // Move 使用值接收者定义Move方法实现Mover接口 func (d Dog) Move() { fmt.Println(\\\"狗会动\\\") }\",\"此时实现Mover接口的是Dog类型。\",\"var x Mover // 声明一个Mover类型的变量x var d1 = Dog{} // d1是Dog类型 x = d1 // 可以将d1赋值给变量x x.Move() var d2 = &Dog{} // d2是Dog指针类型 x = d2 // 也可以将d2赋值给变量x x.Move()\",\"从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是结构体类型还是对应的结构体指针类型的变量都可以赋值给该接口变量。\"]},\"30\":{\"h\":\"指针接收者实现接口\",\"t\":[\"我们再来测试一下使用指针接收者实现接口有什么区别。\",\"// Cat 猫结构体类型 type Cat struct{} // Move 使用指针接收者定义Move方法实现Mover接口 func (c *Cat) Move() { fmt.Println(\\\"猫会动\\\") }\",\"此时实现Mover接口的是*Cat类型，我们可以将*Cat类型的变量直接赋值给Mover接口类型的变量x。\",\"var c1 = &Cat{} // c1是*Cat类型 x = c1 // 可以将c1当成Mover类型 x.Move()\",\"但是不能给将Cat类型的变量赋值给Mover接口类型的变量x。\",\"// 下面的代码无法通过编译 var c2 = Cat{} // c2是Cat类型 x = c2 // 不能将c2当成Mover类型\",\"由于Go语言中有对指针求值的语法糖，对于值接收者实现的接口，无论使用值类型还是指针类型都没有问题。但是我们并不总是能对一个值求址，所以对于指针接收者实现的接口要额外注意。\"]},\"31\":{\"h\":\"类型与接口的关系\"},\"32\":{\"h\":\"一个类型实现多个接口\",\"t\":[\"一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。例如狗不仅可以叫，还可以动。我们完全可以分别定义Sayer接口和Mover接口，具体代码示例如下。\",\"// Sayer 接口 type Sayer interface { Say() } // Mover 接口 type Mover interface { Move() }\",\"Dog既可以实现Sayer接口，也可以实现Mover接口。\",\"type Dog struct { Name string } // 实现Sayer接口 func (d Dog) Say() { fmt.Printf(\\\"%s会叫汪汪汪\\\\n\\\", d.Name) } // 实现Mover接口 func (d Dog) Move() { fmt.Printf(\\\"%s会动\\\\n\\\", d.Name) }\",\"同一个类型实现不同的接口互相不影响使用。\",\"var d = Dog{Name: \\\"旺财\\\"} var s Sayer = d var m Mover = d s.Say() // 对Sayer类型调用Say方法 m.Move() // 对Mover类型调用Move方法\"]},\"33\":{\"h\":\"多个类型实现统一接口\",\"t\":[\"Go语言中不同的类型还可以实现同一接口。例如在我们的代码世界中不仅狗可以动，汽车也可以动。我们可以使用如下代码体现这个关系。\",\"// 实现Mover接口 func (d Dog) Move() { fmt.Printf(\\\"%s会动\\\\n\\\", d.Name) } // Car 汽车结构体类型 type Car struct { Brand string } // Move Car类型实现Mover接口 func (c Car) Move() { fmt.Printf(\\\"%s速度70迈\\\\n\\\", c.Brand) }\",\"这样我们在代码中就可以把狗和汽车当成一个会动的类型来处理，不必关注它们具体是什么，只需要调用它们的Move方法就可以了。\",\"var obj Mover obj = Dog{Name: \\\"旺财\\\"} obj.Move() obj = Car{Brand: \\\"宝马\\\"} obj.Move()\",\"上面的代码执行结果如下：\",\"旺财会跑 宝马速度70迈\",\"一个接口的所有方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。\",\"// WashingMachine 洗衣机 type WashingMachine interface { wash() dry() } // 甩干器 type dryer struct{} // 实现WashingMachine接口的dry()方法 func (d dryer) dry() { fmt.Println(\\\"甩一甩\\\") } // 海尔洗衣机 type haier struct { dryer //嵌入甩干器 } // 实现WashingMachine接口的wash()方法 func (h haier) wash() { fmt.Println(\\\"洗刷刷\\\") }\"]},\"34\":{\"h\":\"接口组合\",\"t\":[\"接口与接口之间可以通过互相嵌套形成新的接口类型，例如Go标准库io源码中就有很多接口之间互相组合的示例。\",\"// src/io/io.go type Reader interface { Read(p []byte) (n int, err error) } type Writer interface { Write(p []byte) (n int, err error) } type Closer interface { Close() error } // ReadWriter 是组合Reader接口和Writer接口形成的新接口类型 type ReadWriter interface { Reader Writer } // ReadCloser 是组合Reader接口和Closer接口形成的新接口类型 type ReadCloser interface { Reader Closer } // WriteCloser 是组合Writer接口和Closer接口形成的新接口类型 type WriteCloser interface { Writer Closer }\",\"对于这种由多个接口类型组合形成的新接口类型，同样只需要实现新接口类型中规定的所有方法就算实现了该接口类型。\",\"接口也可以作为结构体的一个字段，我们来看一段Go标准库sort源码中的示例。\",\"// src/sort/sort.go // Interface 定义通过索引对元素排序的接口类型 type Interface interface { Len() int Less(i, j int) bool Swap(i, j int) } // reverse 结构体中嵌入了Interface接口 type reverse struct { Interface }\",\"通过在结构体中嵌入一个接口类型，从而让该结构体类型实现了该接口类型，并且还可以改写该接口的方法。\",\"// Less 为reverse类型添加Less方法，重写原Interface接口类型的Less方法 func (r reverse) Less(i, j int) bool { return r.Interface.Less(j, i) }\",\"Interface类型原本的Less方法签名为 Less(i, j int) bool，此处重写为r.Interface.Less(j, i)，即通过将索引参数交换位置实现反转。\",\"在这个示例中还有一个需要注意的地方是reverse结构体本身是不可导出的（结构体类型名称首字母小写），sort.go中通过定义一个可导出的Reverse函数来让使用者创建reverse结构体实例。\",\"func Reverse(data Interface) Interface { return &reverse{data} }\",\"这样做的目的是保证得到的reverse结构体中的Interface属性一定不为nil，否者r.Interface.Less(j, i)就会出现空指针panic。\",\"此外在Go内置标准库database/sql中也有很多类似的结构体内嵌接口类型的使用示例，各位读者可自行查阅。\"]},\"35\":{\"h\":\"空接口\"},\"36\":{\"h\":\"空接口的定义\",\"t\":[\"空接口是指没有定义任何方法的接口类型。因此任何类型都可以视为实现了空接口。也正是因为空接口类型的这个特性，空接口类型的变量可以存储任意类型的值。\",\"package main import \\\"fmt\\\" // 空接口 // Any 不包含任何方法的空接口类型 type Any interface{} // Dog 狗结构体 type Dog struct{} func main() { var x Any x = \\\"你好\\\" // 字符串型 fmt.Printf(\\\"type:%T value:%v\\\\n\\\", x, x) x = 100 // int型 fmt.Printf(\\\"type:%T value:%v\\\\n\\\", x, x) x = true // 布尔型 fmt.Printf(\\\"type:%T value:%v\\\\n\\\", x, x) x = Dog{} // 结构体类型 fmt.Printf(\\\"type:%T value:%v\\\\n\\\", x, x) }\",\"通常我们在使用空接口类型时不必使用type关键字声明，可以像下面的代码一样直接使用interface{}。\",\"var x interface{} // 声明一个空接口类型变量x\"]},\"37\":{\"h\":\"空接口的应用\",\"t\":[\"空接口作为函数的参数\",\"使用空接口实现可以接收任意类型的函数参数。\",\"// 空接口作为函数参数 func show(a interface{}) { fmt.Printf(\\\"type:%T value:%v\\\\n\\\", a, a) }\",\"空接口作为map的值\",\"使用空接口实现可以保存任意值的字典。\",\"// 空接口作为map值 var studentInfo = make(map[string]interface{}) studentInfo[\\\"name\\\"] = \\\"沙河娜扎\\\" studentInfo[\\\"age\\\"] = 18 studentInfo[\\\"married\\\"] = false fmt.Println(studentInfo)\"]},\"38\":{\"h\":\"接口值\",\"t\":[\"由于接口类型的值可以是任意一个实现了该接口的类型值，所以接口值除了需要记录具体值之外，还需要记录这个值属于的类型。也就是说接口值由“类型”和“值”组成，鉴于这两部分会根据存入值的不同而发生变化，我们称之为接口的动态类型和动态值。\",\"接口值示例\",\"我们接下来通过一个示例来加深对接口值的理解。\",\"下面的示例代码中，定义了一个Mover接口类型和两个实现了该接口的Dog和Car结构体类型。\",\"type Mover interface { Move() } type Dog struct { Name string } func (d *Dog) Move() { fmt.Println(\\\"狗在跑~\\\") } type Car struct { Brand string } func (c *Car) Move() { fmt.Println(\\\"汽车在跑~\\\") }\",\"首先，我们创建一个Mover接口类型的变量m。\",\"var m Mover\",\"此时，接口变量m是接口类型的零值，也就是它的类型和值部分都是nil，就如下图所示。\",\"接口值示例\",\"我们可以使用m == nil来判断此时的接口值是否为空。\",\"fmt.Println(m == nil) // true\",\"**注意：**我们不能对一个空接口值调用任何方法，否则会产生panic。\",\"m.Move() // panic: runtime error: invalid memory address or nil pointer dereference\",\"接下来，我们将一个*Dog结构体指针赋值给变量m。\",\"m = &Dog{Name: \\\"旺财\\\"}\",\"此时，接口值m的动态类型会被设置为*Dog，动态值为结构体变量的拷贝。\",\"接口值示例\",\"然后，我们给接口变量m赋值为一个*Car类型的值。\",\"var c *Car m = c\",\"这一次，接口值m的动态类型为*Car，动态值为nil。\",\"接口值示例\",\"**注意：**此时接口变量m与nil并不相等，因为它只是动态值的部分为nil，而动态类型部分保存着对应值的类型。\",\"fmt.Println(m == nil) // false\",\"接口值是支持相互比较的，当且仅当接口值的动态类型和动态值都相等时才相等。\",\"var ( x Mover = new(Dog) y Mover = new(Car) ) fmt.Println(x == y) // false\",\"但是有一种特殊情况需要特别注意，如果接口值保存的动态类型相同，但是这个动态类型不支持互相比较（比如切片），那么对它们相互比较时就会引发panic。\",\"var z interface{} = []int{1, 2, 3} fmt.Println(z == z) // panic: runtime error: comparing uncomparable type []int\"]},\"39\":{\"h\":\"类型断言\",\"t\":[\"接口值可能赋值为任意类型的值，那我们如何从接口值获取其存储的具体数据呢？\",\"我们可以借助标准库fmt包的格式化打印获取到接口值的动态类型。\",\"var m Mover m = &Dog{Name: \\\"旺财\\\"} fmt.Printf(\\\"%T\\\\n\\\", m) // *main.Dog m = new(Car) fmt.Printf(\\\"%T\\\\n\\\", m) // *main.Car\",\"而fmt包内部其实是使用反射的机制在程序运行时获取到动态类型的名称。关于反射的内容我们会在后续章节详细介绍。\",\"而想要从接口值中获取到对应的实际值需要使用类型断言，其语法格式如下。\",\"x.(T)\",\"其中：\",\"x：表示接口类型的变量\",\"T：表示断言x可能是的类型。\",\"该语法返回两个参数，第一个参数是x转化为T类型后的变量，第二个值是一个布尔值，若为true则表示断言成功，为false则表示断言失败。\",\"举个例子：\",\"var n Mover = &Dog{Name: \\\"旺财\\\"} v, ok := n.(*Dog) if ok { fmt.Println(\\\"类型断言成功\\\") v.Name = \\\"富贵\\\" // 变量v是*Dog类型 } else { fmt.Println(\\\"类型断言失败\\\") }\",\"如果对一个接口值有多个实际类型需要判断，推荐使用switch语句来实现。\",\"// justifyType 对传入的空接口类型变量x进行类型断言 func justifyType(x interface{}) { switch v := x.(type) { case string: fmt.Printf(\\\"x is a string，value is %v\\\\n\\\", v) case int: fmt.Printf(\\\"x is a int is %v\\\\n\\\", v) case bool: fmt.Printf(\\\"x is a bool is %v\\\\n\\\", v) default: fmt.Println(\\\"unsupport type！\\\") } }\",\"由于接口类型变量能够动态存储不同类型值的特点，所以很多初学者会滥用接口类型（特别是空接口）来实现编码过程中的便捷。只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。切记不要为了使用接口类型而增加不必要的抽象，导致不必要的运行时损耗。\",\"在 Go 语言中接口是一个非常重要的概念和特性，使用接口类型能够实现代码的抽象和解耦，也可以隐藏某个功能的内部实现，但是缺点就是在查看源码的时候，不太方便查找到具体实现接口的类型。\",\"相信很多读者在刚接触到接口类型时都会有很多疑惑，请牢记接口是一种类型，一种抽象的类型。区别于我们在之前章节提到的那些具体类型（整型、数组、结构体类型等），它是一个只要求实现特定方法的抽象类型。\",\"小技巧： 下面的代码可以在程序编译阶段验证某一结构体是否满足特定的接口类型。\",\"// 摘自gin框架routergroup.go type IRouter interface{ ... } type RouterGroup struct { ... } var _ IRouter = &RouterGroup{} // 确保RouterGroup实现了接口IRouter\",\"上面的代码中也可以使用var _ IRouter = (*RouterGroup)(nil)进行验证。\"]},\"40\":{\"c\":[\"Go语言基础\"]},\"41\":{\"c\":[\"学习资料\"]},\"42\":{\"h\":\"单例模型\"},\"43\":{\"h\":\"单例模型简介\",\"t\":[\"单例模式（Singleton Pattern）是一种设计模式，它确保一个类只有一个实例，并提供一个全局访问点来获取这个唯一的实例。单例模式在很多情况下都是有用的，特别是当一个对象需要跨系统共享数据时，或者当创建对象需要消耗大量资源时（如访问数据库的连接对象）。\",\"单例模式的关键是私有化其构造函数，以防止外部通过new操作符创建类的实例，同时提供一个公共的静态方法用来获取这个唯一实例。\"]},\"44\":{\"h\":\"Go语言实现单例模型\",\"t\":[\"懒汉模式\",\"在Go语言中实现单例模式要考虑线程安全问题。可以使用sync包中的Once类型来确保全局实例只被创建一次。下面是一个使用sync.Once的Go语言单例模式实现示例：\",\"package singleton import ( \\\"sync\\\" ) // Singleton 是单例模式类 type Singleton struct { // 这里可以放置你需要的变量 } var ( instance *Singleton once sync.Once ) // GetInstance 用来获取单例对象的方法 func GetInstance() *Singleton { once.Do(func() { instance = &Singleton // 这里可以初始化单例的一些属性 }) return instance }\",\"在这个例子中，instance变量指向Singleton的实例，它是一个全局变量。once变量确保instance的赋值操作只执行一次，无论有多少个goroutine同时调用GetInstance()方法。\",\"sync.Once的Do方法可以确保无论调用多少次，传入的函数只会被执行一次，这正是我们实现单例的关键。\",\"这种方式是懒汉式单例模式的实现，在第一次调用GetInstance()的时候才会创建实例。这种方式是并发安全的，并且在单例不需要提前初始化的场景下非常有用。\",\"使用这个单例的方法如下：\",\"func main() { s := singleton.GetInstance() // 使用 s 的方法... }\",\"每次调用singleton.GetInstance()都会返回同一个Singleton实例。\",\"饿汉模式\",\"在Go语言中，饿汉式单例模式是指在程序启动时，实例就已经被创建好了。由于Go的init函数特性，这种模式在Go中非常容易实现。下面是一个饿汉式单例模式的实现：\",\"package singleton // Singleton 是单例模式类 type Singleton struct { // 这里可以放置你需要的变量 } // instance 是一个已经在程序启动时就创建好的Singleton实例 var instance = &Singleton{ // 这里可以初始化单例的一些属性 } // GetInstance 用来获取单例对象的方法 func GetInstance() *Singleton { return instance }\",\"在这个示例中，instance是一个包级别的私有变量，它的值在包被初始化时就已经被赋予一个&Singleton{}，这意味着在程序的任何地方调用GetInstance()都会返回相同的Singleton实例。\",\"使用这个单例的方法如下：\",\"package main import ( \\\"fmt\\\" \\\"yourapp/singleton\\\" ) func main() { s := singleton.GetInstance() // 使用 s 的方法... fmt.Println(s) }\",\"在上面的代码中，yourapp/singleton应当替换为你实际的模块路径。\",\"这种实现方式确保了单例实例的创建是线程安全的，并且在程序的执行过程中只会创建一次。此外，由于实例是在包初始化时创建的，因此无需使用互斥锁来保护实例的创建过程，这可以提高程序的性能。\",\"单例饿汉并发安全\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) // Singleton 结构体 type Singleton struct { value int } // 实例变量 var instance *Singleton // 定义一个全局的sync.Mutex变量 var mutex sync.Mutex // GetInstance 获取单例对象 func GetInstance() *Singleton { if instance == nil { // 确保在创建实例时只有一个goroutine可以进入这个代码块 mutex.Lock() defer mutex.Unlock() // 再次检查instance，以避免多个goroutine同时创建实例 if instance == nil { instance = &Singleton{value: 42} // 初始化单例 } } return instance } func main() { // 获取单例对象 singleton := GetInstance() // 打印带有单位的值 fmt.Printf(\\\"The singleton value is: %dm\\\\n\\\", singleton.value) }\",\"懒汉式和饿汉式是两种常见的单例模式实现方式，它们在Java等编程语言中用来确保一个类只有一个实例，并提供一个全局访问点。下面是两者的主要区别：\",\"初始化时机：\",\"懒汉式：类实例在第一次使用时才创建。这种方式可以延迟对象的创建，节省资源，但如果多个线程同时访问，可能会创建多个实例。\",\"饿汉式：类实例在类加载时就创建好了。这种方式可以保证线程安全，但不管是否需要，对象都会被创建，可能会浪费资源。\",\"线程安全性：\",\"懒汉式：如果不加以控制，懒汉式单例在多线程环境下可能不是线程安全的，因为多个线程可能同时创建多个实例。\",\"饿汉式：由于实例在类加载时就创建，所以它是线程安全的。\",\"实现方式：\",\"懒汉式：通常使用一个私有静态变量来存储实例，并通过一个公有静态方法来获取这个实例。如果需要线程安全，可以使用synchronized关键字或者静态内部类来实现。\",\"饿汉式：通常使用一个公有的静态变量直接存储实例，这个变量在类加载时就初始化。\",\"性能考虑：\",\"懒汉式：由于实例是在需要时才创建，所以可能会在首次访问时有轻微的性能开销，但之后的性能会很好。\",\"饿汉式：由于实例在类加载时就创建，所以不存在首次访问的性能开销，但可能会有不必要的内存占用。\",\"使用场景：\",\"懒汉式：适用于实例化过程比较耗时，或者实例化过程需要消耗大量资源的情况。\",\"饿汉式：适用于实例化过程简单，或者实例化成本较低，或者需要保证严格的线程安全的场景。\",\"在实际开发中，选择哪种单例模式实现方式取决于具体的需求和场景。如果需要确保线程安全，通常会选择饿汉式或者使用懒汉式的线程安全变体。\"]},\"45\":{\"c\":[\"Go语言模型\"]},\"46\":{\"c\":[\"学习资料\"]},\"47\":{\"h\":\"观察者模型\"},\"48\":{\"h\":\"观察者模型简介\",\"t\":[\"观察者模式（Observer Pattern），也称为发布-订阅（Publish-Subscribe）模式，是一种常用的设计模式，属于行为型模式。这种模式用于建立对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。\",\"观察者模式通常涉及以下两类角色：\",\"主题（Subject）：主题是观察者模式中的核心。它维护一系列观察者，提供用于增加或删除观察者的方法，并在其内部状态发生变化时通知所有观察者。\",\"观察者（Observer）：观察者订阅主题的状态变化。每个观察者都必须实现一个更新接口，以便在主题状态变化时接收更新。\",\"观察者模式的工作流程通常如下：\",\"观察者向主题注册，表明它们对主题状态的变化感兴趣。\",\"主题在其内部状态发生变化时，通过调用观察者的更新方法来通知所有注册的观察者。\",\"观察者收到通知后，可以相应地更新自己或执行特定操作。\",\"观察者模式的优点包括：\",\"支持广播通信：主题可以无差别地通知所有感兴趣的观察者，无需关心它们的具体类型。\",\"解耦：主题不需要知道观察者的具体实现，只需要知道它实现了观察者接口。这有助于降低系统各部分之间的耦合度。\",\"动态订阅：观察者可以根据需要动态地订阅或取消订阅主题。\",\"然而，它也有一些缺点，如：\",\"可能导致更新的过度调用：在某些情况下，当主题状态频繁变化时，可能会导致大量的更新通知，从而影响性能。\",\"观察者与主题之间的依赖关系：虽然减少了耦合，但观察者仍然需要了解它们需要更新的内容。 观察者模式广泛应用于实现事件处理系统、GUI工具、数据监视等场景。\"]},\"49\":{\"h\":\"Go语言实现观察者模型\",\"t\":[\"在Go语言中实现观察者模式，我们可以定义两个主要的接口：Observer 和 Subject。Observer 接口将包含一个方法，该方法在被通知时调用。Subject 接口则包含添加、删除和通知观察者的方法。以下是一个简单的实现示例：\",\"Observer 接口 - 这个接口定义了一个 Update 方法，当 Subject 发生变化时，该方法将被调用。\",\"Subject 接口 - 这个接口定义了 Attach, Detach 和 Notify 方法。Attach 用于添加新的观察者，Detach 用于移除观察者，而 Notify 用于通知所有注册的观察者。\",\"具体的 Subject 实现 - 这是一个实现了 Subject 接口的具体类。它将维护观察者列表，并在状态发生变化时通知它们。\",\"具体的 Observer 实现 - 实现了 Observer 接口的具体类，当收到通知时做出相应的反应。\",\"下面是用Go实现的代码示例：\",\"package main import ( \\\"fmt\\\" ) // Observer 接口 type Observer interface { Update(string) } // Subject 接口 type Subject interface { Attach(Observer) Detach(Observer) Notify() } // ConcreteSubject 是 Subject 的具体实现 type ConcreteSubject struct { observers []Observer state string } // Attach 方法添加新的观察者 func (cs *ConcreteSubject) Attach(o Observer) { cs.observers = append(cs.observers, o) } // Detach 方法移除观察者 func (cs *ConcreteSubject) Detach(o Observer) { var indexToRemove int for i, observer := range cs.observers { if observer == o { indexToRemove = i break } } cs.observers = append(cs.observers[:indexToRemove], cs.observers[indexToRemove+1:]...) } // Notify 方法通知所有观察者 func (cs *ConcreteSubject) Notify() { for _, observer := range cs.observers { observer.Update(cs.state) } } // SetState 改变状态并通知观察者 func (cs *ConcreteSubject) SetState(state string) { cs.state = state cs.Notify() } // ConcreteObserver 是 Observer 的具体实现 type ConcreteObserver struct { id int } // Update 方法是观察者接收通知的方式 func (co *ConcreteObserver) Update(state string) { fmt.Printf(\\\"Observer %d received new state: %s\\\\n\\\", co.id, state) } // 主函数 func main() { subject := &ConcreteSubject{} observer1 := &ConcreteObserver{id: 1} observer2 := &ConcreteObserver{id: 2} subject.Attach(observer1) subject.Attach(observer2) subject.SetState(\\\"some state\\\") subject.Detach(observer1) subject.SetState(\\\"another state\\\") }\",\"在这个示例中，当 ConcreteSubject 的状态发生变化时，它将通知所有已注册的 ConcreteObserver。观察者模式在需要实现事件监听和通知机制的场景中非常有用。\"]},\"50\":{\"c\":[\"Go语言模型\"]},\"51\":{\"c\":[\"学习资料\"]},\"52\":{\"h\":\"二分查找\",\"t\":[\"package main import ( \\\"fmt\\\" ) // binarySearch 执行二分查找算法，返回目标值在切片中的索引 func binarySearch(arr []int, target int) int { low, high := 0, len(arr)-1 for low <= high { mid := low + (high - low) / 2 if arr[mid] == target { return mid // 找到目标值，返回索引 } else if arr[mid] < target { low = mid + 1 // 在右侧继续查找 } else { high = mid - 1 // 在左侧继续查找 } } return -1 // 未找到目标值，返回-1 } func main() { arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} target := 5 index := binarySearch(arr, target) if index != -1 { fmt.Printf(\\\"Found %d at index %d\\\\n\\\", target, index) } else { fmt.Printf(\\\"%d not found in the array\\\\n\\\", target) } }\"]},\"53\":{\"c\":[\"Go语言算法\"]},\"54\":{\"c\":[\"学习资料\"]},\"55\":{\"h\":\"冒泡排序\",\"t\":[\"package main import \\\"fmt\\\" // 冒泡排序函数 func bubbleSort(arr []int) { n := len(arr) for i := 0; i < n-1; i++ { // 标记是否发生了交换 swapped := false // 最后一个元素已经排序好，所以每次减少比较的元素数量 for j := 0; j < n-i-1; j++ { if arr[j] > arr[j+1] { // 交换 arr[j] 和 arr[j+1] arr[j], arr[j+1] = arr[j+1], arr[j] swapped = true } } // 如果在这一轮排序中没有发生交换，说明数组已经有序，可以提前结束 if !swapped { break } } } func main() { arr := []int{64, 34, 25, 12, 22, 11, 90} fmt.Println(\\\"Original array:\\\", arr) bubbleSort(arr) fmt.Println(\\\"Sorted array: \\\", arr) }\",\"冒泡排序和快速排序是两种常见的排序算法，它们的时间复杂度如下：\",\"冒泡排序： \",\"最好情况：当输入数组已经是有序的，冒泡排序的时间复杂度为 𝑂(𝑛)O(n)，其中 𝑛n 是数组的长度。\",\"最坏情况：当输入数组是逆序的，冒泡排序的时间复杂度为 𝑂(𝑛2)O(n2)。\",\"平均情况：冒泡排序的平均时间复杂度也是 𝑂(𝑛2)O(n2)。\",\"快速排序： \",\"最好情况：快速排序的时间复杂度为 𝑂(𝑛log⁡𝑛)O(nlogn)，这通常发生在每次选择的基准元素都能将数组大致分为两部分时。\",\"最坏情况：当输入数组已经是有序的（或接近有序），且每次选择的基准元素都是最小或最大值时，快速排序的时间复杂度为 𝑂(𝑛2)O(n2)。\",\"平均情况：快速排序的平均时间复杂度为 𝑂(𝑛log⁡𝑛)O(nlogn)。\",\"快速排序在实际应用中通常比冒泡排序更高效，尤其是在处理大数据集时。然而，快速排序的性能依赖于基准元素的选择，因此在最坏情况下可能会退化到 𝑂(𝑛2)O(n2)。为了避免这种情况，通常会采用随机选择基准元素的方法来提高其平均性能。\",\"冒泡排序和快速排序在稳定性方面有所不同：\",\"冒泡排序： \",\"冒泡排序是一种稳定的排序算法。稳定性指的是在排序过程中，相等的元素之间的相对顺序不会改变。冒泡排序通过相邻元素的比较和交换来工作，如果两个元素相等，它们就不会交换位置，因此保持了它们的原始顺序。\",\"快速排序： \",\"快速排序通常被认为是不稳定的排序算法。这是因为在分区过程中，如果遇到相等的元素，它们可能会被交换位置，从而改变了它们原来的相对顺序。然而，这并不是绝对的，快速排序的稳定性取决于具体的实现。有些变种的快速排序算法，如三数取中法（median-of-three pivot selection）和随机选择基准元素的方法，可以减少稳定性问题，但通常不会完全消除。\",\"稳定性是排序算法的一个重要属性，特别是在需要保持相等元素原始顺序的应用场景中。如果稳定性是一个关键需求，选择冒泡排序或其它稳定的排序算法（如插入排序、归并排序等）可能更合适。\"]},\"56\":{\"c\":[\"Go语言算法\"]},\"57\":{\"c\":[\"学习资料\"]},\"58\":{\"h\":\"快速排序\",\"t\":[\"package main import \\\"fmt\\\" // 快速排序函数 func quickSort(arr []int) { if len(arr) < 2 { // 如果数组长度小于2，不需要排序 return } sort(arr, 0, len(arr)-1) } ​ // 递归排序函数 func sort(arr []int, low int, high int) { if low < high { // 找到分区的索引 pi := partition(arr, low, high) // 分别对分区前的和分区后的序列进行递归排序 sort(arr, low, pi-1) sort(arr, pi+1, high) } } // 划分函数，返回分区索引 func partition(arr []int, low int, high int) int { // 选择最后一个元素作为基准 pivot := arr[high] i := low - 1 for j := low; j < high; j++ { // 如果当前元素小于或等于pivot if arr[j] <= pivot { i++ // 交换 arr[i] 和 arr[j] arr[i], arr[j] = arr[j], arr[i] } } // 交换 pivot 元素到它最终的位置 arr[i+1], arr[high] = arr[high], arr[i+1] return i + 1 } func main() { arr := []int{10, 7, 8, 9, 1, 5} fmt.Println(\\\"Original array:\\\", arr) quickSort(arr) fmt.Println(\\\"Sorted array: \\\", arr) }\",\"最差n^2,平均和理想n*logn\"]},\"59\":{\"c\":[\"Go语言算法\"]},\"60\":{\"c\":[\"学习资料\"]},\"61\":{\"h\":\"选择排序\",\"t\":[\"package main import ( \\\"fmt\\\" ) // 选择排序 func selectionSort(arr []int) { n := len(arr) for i := 0; i < n-1; i++ { minIndex := i // 假设当前位置为最小值的索引 for j := i + 1; j < n; j++ { if arr[j] < arr[minIndex] { minIndex = j // 发现更小的值，更新最小值的索引 } } if minIndex != i { // 交换当前位置和最小值位置的元素 arr[i], arr[minIndex] = arr[minIndex], arr[i] } } } func main() { arr := []int{64, 34, 25, 12, 22, 11, 90} fmt.Println(\\\"Original array:\\\", arr) selectionSort(arr) fmt.Println(\\\"Sorted array: \\\", arr) }\"]},\"62\":{\"c\":[\"Go语言算法\"]},\"63\":{\"c\":[\"学习资料\"]},\"64\":{\"h\":\"CSS\"},\"65\":{\"h\":\"CSS语法\",\"t\":[\"​ CSS通常由选择器、属性和属性值组成，多个规则可以组合在一起，以便同时应用多个样式。\",\"选择器{ 属性1：属性值1 属性2：属性值2 }\",\"选择器的声明中可以写无数条属性\",\"声明的每一行属性，都可以以英文分号结尾\",\"声明中的所有属性和值都是以键值对的形式出现的\",\"示例：\",\"/*这是一个p标签选择器*/ p{ color:blue; font-size:16px; }\"]},\"66\":{\"h\":\"CSS三种导入方式\",\"t\":[\"内联样式（Inline Styles）\",\"内部样式表（Internal Stylesheet）\",\"外部样式表（External Stylesheet）\",\"三种导入方式的优先级：内联样式>内部样式表>外部样式表（优先级高的会覆盖优先级低的样式）\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>CSS导入方式</title> <link rel=\\\"stylesheet\\\" href=\\\"/server/web/css/main.css\\\"> <style> p { color:blue; font-size:16px; } h2 { color:plum; font-size: 30px; } </style> </head> <body> <p>这是一个应用了css样式的文本</p> <h1 style=\\\"color: red;font-size: 20px\\\">这是一个应用了内联样式的文本</h1> <h2>这是一个应用了内部样式表的文本</h2> <h3>这是一个应用了外部样式表的文本</h3> </body> </html>\",\"同父级文件夹web下的同级文件夹css的css.main文件\",\"h3 { color:green; font-size:40px; }\"]},\"67\":{\"h\":\"选择器\",\"t\":[\"​ 选择器是CSS中的关键部分，它允许你对特定元素或一组元素定义样式。\",\"元素选择器\",\"类选择器\",\"ID选择器\",\"通用选择器\",\"子元素选择器\",\"后代选择器（包含选择器）\",\"并集选择器（兄弟选择器）\",\"伪类选择器\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>CSS选择器</title> <style> /*元素选择器*/ h2 { color:plum; font-size: 30px; } /*类选择器*/ .high-light{ font-size: 20px; color:green; } /*ID选择器*/ #header{ color:red; font-size:40px; } /*通用选择器*/ *{ font-family: '楷体'; } /*子元素选择器*/ .father>.son{ color:yellowgreen; } /*后代选择器*/ .father p{ color: aqua; font-size: larger; } /*相邻元素选择器*/ h3+p{ background-color:blue; } /*伪类选择器*/ #element:hover{ background-color: red; } /*选中第一个元素 :first-child*/ /* :nth-child*/ /* :active*/ /*为元素选择器*/ /*::before*/ /*::after*/ </style> </head> <body> <h1>不同类型的选择器</h1> <h2>这是一个元素选择器示例</h2> <h3 class=\\\"high-light\\\">这是一个类选择器示例</h3> <h4 id=\\\"header\\\">这是一个ID选择器示例</h4> <div class=\\\"father\\\"> <p class=\\\"son\\\">这是一个子元素选择器示例</p> <div> <p class=\\\"grandson\\\">这是一个后代选择器示例</p> </div> </div> <p>这是一个普通的p标签</p> <h3>这是一个相邻元素选择器示例</h3> <p>这是一个普通的p标签</p> <h3 id=\\\"element\\\">这是一个伪类选择器</h3> </body> </html>\",\"CSS中的块元素、行内元素和行内块元素\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>CSS块元素</title> <style> .block{ background-color:aqua; } .inline{ background-color:red; } .inline-block{ width: 100px; height: 100px; } .div-inline{ display: inline; background-color:green; } .span-inline-block{ display: block; background-color:blueviolet; width:300px; } </style> </head> <body> <h1 style=\\\"font:bolder 50px 'kaiti';\\\">这是一个font复合属性</h1> <p style=\\\"line-height: 40px\\\">这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本</p> <div class=\\\"block\\\">这是一个块级元素</div> <span class=\\\"inline\\\">这是一个行内元素</span> <img src=\\\"https://img-s-msn-com.akamaized.net/tenant/amp/entityid/BB1msOOU.img\\\" alt=\\\"图片不见了\\\" class=\\\"inline-block\\\"> <h1>display</h1> <div class=\\\"div-inline\\\">这是一个转换为行内元素的div标签</div> <span class=\\\"span-inline-block\\\">这是一个转换为行内块元素的span标签</span> </body> </html>\"]},\"68\":{\"h\":\"盒子模型\",\"t\":[\"属性名\",\"说明\",\"内容（Content）\",\"盒子包含的实际内容，比如文本、图片等\",\"内边距（Padding）\",\"围绕在内容的内部，是内容与边框之间的空间。可以使用padding属性来设置\",\"边框（Border）\",\"围绕在内边距的外部，是盒子的边界。可以使用border属性来设置\",\"外边距（Margin）\",\"围绕在边框的外部，是盒子与其他元素之间的空间。可以使用margin属性来设置\",\"image-20240629142509994\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>盒子模型</title> <style> .demo{ background-color:aqua; display: inline-block; border: 5px solid yellowgreen; padding: 50px; margin:40px; } .border-demo{ background-color:yellow; width:300px; height:200px; border-style: solid; border-width:10px; border-color:red; } </style> </head> <body> <div class=\\\"demo\\\">B站搜索云中月花开</div> <div class=\\\"border-demo\\\">这是一个边框属性</div> </body> </html>\"]},\"69\":{\"h\":\"浮动\",\"t\":[\"​ 元素脱离文档流，根据开发者的意愿漂浮到网页的任意方向。\"]},\"70\":{\"h\":\"传统网页布局五种方式\",\"t\":[\"标准流（普通流、文档流）：网页按照元素的书写顺序依次排列\",\"浮动\",\"定位\",\"Flexbox和Grid（自适应布局）\",\"​ 标准流是由块级元素和行内元素按照默认规定的方式来排列，块级就是占一行，行内元素一行放好多个元素。\",\"浮动属性用于创建浮动框，将其移到一边直到左边缘或右边缘触及包含块或另一个浮动框的边缘，这样即可使得元素进行浮动。\",\"选择器{ float:left/right/none; }\",\"注意：浮动是相对于父元素浮动，只会在父元素的内部移动\"]},\"71\":{\"h\":\"浮动的三大特性\",\"t\":[\"脱标：脱离标准流\",\"一行显示，顶部对齐\",\"具备行内块元素特性\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>浮动</title> <style> .father{ background-color:aqua; /*height:150px;*/ border: 3px solid blueviolet; /*overflow:hidden;*/ } .father::after{ content:\\\"\\\"; display: table; clear: both; } .left-son{ width: 100px; height:100px; background-color:yellowgreen; float:left; } .right-son{ width: 100px; height:100px; background-color:yellow; float:right; } </style> </head> <body> <div class=\\\"father\\\"> <div class=\\\"left-son\\\">左浮动</div> <div class=\\\"right-son\\\">右浮动</div> </div> <p>这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本</p> </body> </html>\"]},\"72\":{\"h\":\"定位\",\"t\":[\"​ 定位布局可以精准定位，但缺乏灵活性\"]},\"73\":{\"h\":\"定位方式\",\"t\":[\"相对定位：相对于元素在文档流中的正常位置进行定位\",\"绝对定位：相对于其最近的已定位祖先元素进行定位，不占据文档流\",\"固定定位：相对于浏览器窗口进行定位，不占据文档流，固定在屏幕上的位置，不随滚动而移动\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>定位</title> <style> .box1{ height:350px; background-color: aqua; } .box-normal{ width:100px; height:100px; background-color:purple; } .box1-relative{ width:100px; height:100px; background-color:pink; position:relative; left:120px; top:120px; } .box2{ height:350px; background-color: yellow; } .box2-absolute{ width:100px; height:100px; background-color:pink; position:absolute; left:120px; } .box-fixed{ width:100px; height:100px; background-color:brown; position:fixed; right:0; top:120px; } </style> </head> <body> <p>相对定位</p> <div class=\\\"box1\\\"> <div class=\\\"box-normal\\\"></div> <div class=\\\"box1-relative\\\"></div> <div class=\\\"box-normal\\\"></div> </div> <p>绝对定位</p> <div class=\\\"box2\\\"> <div class=\\\"box-normal\\\"></div> <div class=\\\"box2-absolute\\\"></div> <div class=\\\"box-normal\\\"></div> </div> <p>固定定位</p> <div class=\\\"box-fixed\\\"></div> </body> </html>\"]},\"74\":{\"c\":[\"前端知识\"]},\"75\":{\"c\":[\"学习资料\"]},\"76\":{\"h\":\"HTML\",\"t\":[\"​ 'HTML'全称是'Hypertext Markup Language'（超文本标记语言）。\",\"HTML通过一系列的**'标签(也称元素)'**来定义文本、图像、链接等等。HTML标签是由尖括号包围的关键字。\",\"标签通常成对出现，包括开始标签和结束标签（也称双标签），内容位于这两个标签之间，例如：\",\"<p>这是一个段落</p> <h1>这是一个标题</h1> <a href=\\\"#\\\">这是一个超链接</a>\",\"除了双标签，也存在单标签，例如：\",\"<input type=\\\"text\\\"> <br>//换行标签 <hr>//分割线标签\",\"区别：单标签用于没有内容的元素，双标签用于有内容的元素。\"]},\"77\":{\"h\":\"HTML文件结构\",\"t\":[\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>文档标题</title> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"style.css\\\"> <script src=\\\"script.js\\\"></script> </head> <body> <h1>这是一个一级标题</h1> <p>这是一个段落</p> <a href=\\\"http://www.google.com\\\">这是一个超链接</a> </body> </html>\"]},\"78\":{\"h\":\"常用文本标签\",\"t\":[\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>常见文本标签</title> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"style.css\\\"> <script src=\\\"script.js\\\"></script> </head> <body> <h1>这是一个一级标题</h1> <h2>这是一个二级标题</h2> <h3>这是一个三级标题</h3> <h4>这是一个四级标题</h4> <h5>这是一个五级标题</h5> <h6>这是一个六级标题</h6> <p>这是一个段落</p> <p>文本样式：<b>字体加粗</b>、<strong>字体加粗</strong>、<i>斜体</i>、<u>下划线</u>、<s>删除线</s></p> <ul> <li>无序列表1</li> <li>无序列表2</li> <li>无序列表3</li> </ul> <ol> <li>有序列表1</li> <li>有序列表2</li> <li>有序列表3</li> </ol> <h1>table row</h1> <h1>table data</h1> <h1>table header</h1> <table border=\\\"1\\\"> <tr> <th>列标题1</th> <th>列标题2</th> <th>列标题3</th> </tr> <tr> <td>元素11</td> <td>元素12</td> <td>元素13</td> </tr> <tr> <td>元素21</td> <td>元素22</td> <td>元素23</td> </tr> <tr> <td>元素31</td> <td>元素32</td> <td>元素33</td> </tr> </table> <a href=\\\"http://www.google.com\\\">这是一个超链接</a> </body> </html>\"]},\"79\":{\"h\":\"HTMl属性\",\"t\":[\"属性在HTML中起到非常重要的作用，它们用于定义元素的行为和外观，以及与其他元素的关系。\",\"基本语法：\",\"<开始标签 属性名=\\\"属性值\\\">\",\"每个HTML元素可以具有不同的属性\",\"<p id=\\\"describe\\\" class=\\\"section\\\"> 这是一个段落标签 </p> <a href=\\\"https://www.baidu.com\\\">这是一个超链接标签</a>\",\"属性名称不区分大小写，属性值对大小写敏感\",\"<img src=\\\"example.jpg\\\" alt=\\\"\\\"> <img SRC=\\\"example.jpg\\\" alt=\\\"\\\"> <img src=\\\"EXAMPLE.JPG\\\" alt=\\\"\\\">\",\"适用与大多数HTML元素的属性\",\"属性\",\"描述\",\"class\",\"为HTML元素定义一个或多个类名（类名从样式文件引入）\",\"id\",\"定义元素唯一的id\",\"style\",\"规定元素的行内样式\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>HTML属性</title> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"style.css\\\"> <script src=\\\"script.js\\\"></script> </head> <body> <a href=\\\"https://www.bilibili.com/\\\">这是一个超链接</a> <br> <a href=\\\"https://www.bilibili.com/\\\" target=\\\"_blank\\\">这是又一个超链接</a> <hr> <img src=\\\"https://img-s-msn-com.akamaized.net/tenant/amp/entityid/BB1msIHC.img\\\" alt=\\\"图片不见了\\\" width=\\\"100\\\" height=\\\"100\\\"> <br> <img src=\\\"23123.img\\\" alt=\\\"图片不见了\\\"> </body> </html>\"]},\"80\":{\"h\":\"HTML区块-块元素与行内元素\"},\"81\":{\"h\":\"块元素（block）\",\"t\":[\"块级元素通常用于组织和布局页面的主要结构和内容，例如段落、标题、列表、表格等。它们用于创建页面的主要部分，将内容分割成逻辑块。\",\"块级元素通常会从新行开始，并占据整行的宽度，因此它们会在页面上呈现为一块独立的内容块。\",\"可以包含其他块级元素和行内元素。\",\"常见的块级元素包括div、p、h1到h6、ul、ol、li、table、form等。\"]},\"82\":{\"h\":\"行内元素（inline）\",\"t\":[\"行内元素通常用于添加文本样式或为文本中的一部分应用样式。它们可以在文本中插如小的元素，例如超链接、强调文本等。\",\"行内元素通常在一行内呈现，不会独占一行。\",\"它们只占据其内容所需的宽度，而不是整行的宽度。\",\"行内元素不能包括块级元素，但可以包含其他行内元素。\",\"常见的行内元素包括span、a、strong、em、img、br、input等。\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>HTML区块</title> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"style.css\\\"> <script src=\\\"script.js\\\"></script> </head> <body> <div class=\\\"nav\\\"> <a href=\\\"#\\\">链接1</a> <a href=\\\"#\\\">链接2</a> <a href=\\\"#\\\">链接3</a> <a href=\\\"#\\\">链接4</a> </div> <div class=\\\"content\\\"> <h1>文章标题</h1> <p>文章内容</p> <p>文章内容</p> <p>文章内容</p> </div> <span>这是一个span标签</span> <span>链接点击这里<a href=\\\"#\\\">链接</a> </span> </body> </html>\"]},\"83\":{\"h\":\"HTML表单\",\"t\":[\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>HTML表单</title> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"style.css\\\"> <script src=\\\"script.js\\\"></script> </head> <body> <form action=\\\"http://localhost:8080/login\\\"> <label>用户名: <input type=\\\"text\\\" placeholder=\\\"请输入用户名\\\"> </label> <br> <label>密码: <input type=\\\"password\\\" placeholder=\\\"请输入密码\\\"> </label> <br> <label>性别： <input type=\\\"radio\\\" name=\\\"gender\\\">男 <input type=\\\"radio\\\" name=\\\"gender\\\">女 <input type=\\\"radio\\\" name=\\\"gender\\\">其他 </label> <br> <label>爱好： <input type=\\\"checkbox\\\" name=\\\"hobby\\\">唱歌 <input type=\\\"checkbox\\\" name=\\\"hobby\\\">RAP <input type=\\\"checkbox\\\" name=\\\"hobby\\\">篮球 </label> <br> <input type=\\\"submit\\\" value=\\\"上传\\\"> </form> </body> </html>\"]},\"84\":{\"c\":[\"前端知识\"]},\"85\":{\"c\":[\"学习资料\"]},\"86\":{\"h\":\"JavaScript\",\"t\":[\"​ JavaScript是一种轻量级、解释型、面向对象的脚本语言。它主要被设计用于在网页上实现动态效果，增加用户与网页的交互性。\",\"​ 作为一种客户端脚本语言，JavaScript可以直接嵌入HTML，并在浏览器中执行。\",\"​ 与HTML和CSS不同，JavaScript使得网页不在是静态的，而是可以根据用户操作动态变化的。\"]},\"87\":{\"h\":\"JavaScript的作用\",\"t\":[\"​ JavaScript在前端开发中扮演着重要的角色，其应用领域包括但不限于：\",\"客户端脚本：用于在用户浏览器中执行，实现动态效果和用户交互。\",\"网页开发：与HTML和CSS协同工作，使得网页具有更强的交互性和动态性。\",\"后端开发：使用Node.js，JavaScript也可以在服务器端运行，实现服务器端的应用开发。\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS的导入方式</title> <style></style> <script src=\\\"/server/web/js/main.js\\\"></script> <script> console.log(\\\"Hello,head标签的内联样式\\\") </script> </head> <body> <p>JavaScript的导入方式</p> <script> console.log(\\\"Hello,body标签的内联样式\\\") alert(\\\"你好，内联样式弹窗\\\") </script> </body> </html>\",\"server/web/js/main.js文件\",\"console.log(\\\"hello,外联样式\\\")\"]},\"88\":{\"h\":\"JavaScript基本语法\",\"t\":[\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS基本语法</title> </head> <body> <script> var x; let y=5; const z =3.14 console.log(x,y,z)//undefined 5 3.14 const name = \\\"如花\\\" console.log(name)//如花 const value = null console.log(value)//null </script> </body> </html>\"]},\"89\":{\"h\":\"控制语句\"},\"90\":{\"h\":\"条件语句\",\"t\":[\"​ 条件语句是编程中常见的结构，用于基于不同的条件执行不同的代码块。\",\"if语句：用于执行一个代码块，当指定的条件为真（true）时执行。语法如下：\",\"if (condition){ //如果条件为true时，执行这里的代码 }\",\"else语句：用户在上一个if和所有的else if 都为false时执行的代码块。语法如下：\",\"if (condition){ //如果条件为true时，执行这里的代码 }else{ //如果条件为false时，执行这里的代码 }\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS基本语法</title> </head> <body> <script> const time = 17 if (time<=12){ alert(\\\"上午好\\\") }else if(time<=18){ alert(\\\"下午好\\\") }else{ alert(\\\"晚上好\\\") } </script> </body> </html>\"]},\"91\":{\"h\":\"循环语句\",\"t\":[\"​ 循环语句用于重复执行一段代码，直到指定条件不再满足为止。\",\"for循环：是一种常见的循环结构，用于按照指定的条件重复执行台吗块。语法如下：\",\"for (初始化表达式；循环条件；迭代器){ //循环体，执行这里的代码 }\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS循环语句</title> </head> <body> <script> console.log(\\\"for循环\\\") for(let i=1; i<=10; i++){ console.log(i) } </script> </body> </html>\",\"while循环：会在指定的条件为真时执行代码块。语法如下：\",\"whlie(循环条件){ //循环体，执行这里的代码 }\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS循环语句</title> </head> <body> <script> console.log(\\\"while循环\\\") let i=1 while(i<=10){ console.log(i) i++ } </script> </body> </html>\",\"break用于跳出循环，结束循环的执行。\",\"continue用于跳过当前循环中的剩余代码，继续下一次循环。\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS循环语句</title> </head> <body> <script> for (let i = 0; i <9;i++){ if (i===3){ continue } if (i===7){ break } console.log(i) } </script> </body> </html>\"]},\"92\":{\"h\":\"函数\",\"t\":[\"函数是一段可重复使用的代码块，它接受输入参数、执行特定任务，并返回输出。\",\"function function_name(参数1,参数2,...){//参数可以不写，表示不传参 //函数体，执行这里的代码 return 返回值;//可选，返回值 }\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS循环语句</title> </head> <body> <script> function hello() { console.log(\\\"Hello!\\\"); } hello() function hello_with_params(name) { console.log(\\\"Hello，\\\" + name); } hello_with_params(\\\"如花\\\") //作用域 const global_var = \\\"全局变量\\\" function local_var_func() { const local_var =\\\"局部变量\\\" console.log(\\\"函数内打印\\\"+ global_var) console.log(\\\"函数内打印\\\"+ local_var) } local_var_func() console.log(\\\"全局打印\\\"+ global_var) // console.log(\\\"全局打印\\\"+ local_var) //local_var全局未定义，函数有定义 </script> </body> </html>\"]},\"93\":{\"h\":\"事件\",\"t\":[\"​ 事件是文档或浏览器窗口中发生的特定瞬间，例如用户的点击、键盘的按下、页面的加载等。常见的事件如下：\",\"事件\",\"描述\",\"onClick\",\"点击事件\",\"onMouseOver\",\"鼠标经过\",\"onMouseOut\",\"鼠标移出\",\"onChange\",\"文本内容改变事件\",\"onSelect\",\"文本框选中\",\"onFocus\",\"光标聚集\",\"onBlur\",\"移开光标\",\"JavaScript绑定事件的方法有三种：\",\"HTML属性\",\"DOM属性\",\"addEventListener方法\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JS循环语句</title> </head> <body> <button onclick=\\\"click_event()\\\">这是一个点击事件按钮</button> <label> <input type=\\\"text\\\" onfocus=\\\"focus_event()\\\" onblur=\\\"blur_event()\\\"> </label> <script> //点击事件 function click_event(){ alert(\\\"点击事件触发了\\\") } //聚焦事件 function focus_event(){ console.log(\\\"获取焦点\\\") } //失焦事件 function blur_event(){ console.log(\\\"失去焦点\\\") } </script> </body> </html>\"]},\"94\":{\"h\":\"DOM\",\"t\":[\"​ 在Web开发中，DOM通常于JavaScript一起使用。当网页被加载时，浏览器会创建页面的文档对象模型，也就是DOM（Document Object Model）。每个HTML或XML文档都可以被视为一个文档树，文档树是整个文档的层次结构表示。文档节点是整个文档树的根节点。DOM为这个文档树提供了一个编程接口，开发者可以使用JavaScript来操作这个树状结构。\",\"image-20240701114204298\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>JSDOM</title> </head> <body> <div id=\\\"box1\\\">这是一个ID选择器标签</div> <div class=\\\"box2\\\">这是一个类选择器标签</div> <div>普通的div标签</div> <button>点击按钮</button> <script> const element_id = document.getElementById(\\\"box1\\\"); console.log(element_id) const element_class = document.getElementsByClassName(\\\"box2\\\")[0]; console.log(element_class) const element_tag = document.getElementsByTagName(\\\"div\\\")[2]; console.log(element_tag) element_id.innerHTML='<a href=\\\"#\\\">跳转链接</a>' element_class.innerText='<a href=\\\"#\\\">跳转链接</a>' element_tag.style.color='red' element_tag.style.fontSize='20px' //DOM属性绑定事件 const button_element=document.getElementsByTagName(\\\"button\\\")[0] console.log(button_element) // button_element.onclick=function (){ // alert(\\\"DOM属性案件触发了\\\") // } button_element.addEventListener('click',function(){ alert(\\\"DOM通过addEventListener触发了\\\") }) </script> </body> </html>\",\"DOM对象常用方法\",\"方法\",\"描述\",\"appendChild()\",\"把新的子节点添加到指定节点\",\"removeChild()\",\"删除子节点\",\"replaceChild()\",\"替换子节点\",\"insertBefore()\",\"在指定的子节点前面插入新的子节点\",\"createAttribute()\",\"创建属性节点\",\"createElement()\",\"创建元素节点\",\"createTextNode()\",\"创建文本节点\",\"getAttribute()\",\"返回指定的属性值\"]},\"95\":{\"c\":[\"前端知识\"]},\"96\":{\"c\":[\"学习资料\"]},\"97\":{\"h\":\"示例说明\"},\"98\":{\"h\":\"表格的增删改查\",\"t\":[\"HTML文件：\",\"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>表格的增删改查</title> <link rel=\\\"stylesheet\\\" href=\\\"/server/web/css/1.css\\\"> <script src=\\\"/server/web/js/1.js\\\"></script> </head> <body> <h1 style=\\\"text-align:center\\\">表格的增删改查</h1> <button onclick=\\\"addRow()\\\">新增数据</button> <table id=\\\"table\\\"> <tr> <th>姓名</th> <th>联系方式</th> <th>操作</th> </tr> <tr> <td>云中月</td> <td>12345678901</td> <td> <button onclick=\\\"editRow(this)\\\">编辑</button><button onclick=\\\"deleteRow(this)\\\">删除</button> </td> </tr> </table> </body> </html>\",\"CSS文件：\",\"table{ width: 100%; border-collapse: collapse; margin-top:20px; } th, td { border: 1px solid #ddd; text-align: center; padding: 8px; } th{ background-color: #4CAF50; color: white; } button{ margin-left: 5px; }\",\"JavaScript文件：\",\"//新增数据 function addRow(){ const table=document.getElementById(\\\"table\\\"); // console.log(table) //获取插入位置 const length=table.rows.length; // console.log(length) //插入行节点 const newRow=table.insertRow(length); console.log(newRow) //插入列节点 const cells=newRow.insertCell(0); const cells1=newRow.insertCell(1); const cells2=newRow.insertCell(2); //添加数据 cells.innerHTML='未命名'; cells1.innerHTML='无联系方式'; cells2.innerHTML=' <button onclick=\\\"editRow(this)\\\">编辑</button><button onclick=\\\"deleteRow(this)\\\">删除</button>\\\\n'; } //编辑 function editRow(button){ // console.log(button) const row=button.parentNode.parentNode; // console.log(row) const name=row.cells[0]; const phone=row.cells[1]; const inputName=prompt(\\\"请输入姓名：\\\") const inputPhone=prompt(\\\"请输入联系方式：\\\") name.innerHTML=inputName; phone.innerHTML=inputPhone; } //删除 function deleteRow(button){ // console.log(button) const row=button.parentNode.parentNode; // console.log(row) row.parentNode.removeChild(row) }\"]},\"99\":{\"c\":[\"前端知识\"]},\"100\":{\"c\":[\"学习资料\"]},\"101\":{\"h\":\"MySQL\"},\"102\":{\"h\":\"索引\"},\"103\":{\"h\":\"1.数据库三大范式\",\"t\":[\"​ 数据库三大范式（标准化）是指在关系型数据库中，为了避免数据不一致而需要遵循的三个规范化级别。分别是：\",\"第一范式（1NF）：确保每个属性都是原子性的，即每个属性都不能在被分割为更小的数据单元。同时，每个属性都要具有唯一的名称，不允许重复。\",\"第二范式（2NF）：确保非主键属性完全依赖于主键，即非主键属性不能只依赖于主键的部分属性。如果存在这要的情况，需要将表进行拆分，是每个表只包含一个实体类型。\",\"第三范式（3NF）：保证非主键属性之间不存在供给依赖关系，即非主键属性不能依赖与其他非主键属性。如果存在这样的情况，需要将表进行拆分，是每个表只包含一个实体类型。\",\"​ 通过遵循这三个规范化级别，可以减少数据和数据的不一致性，提高数据库的数据的完整性和可靠性。\"]},\"104\":{\"h\":\"2.MySQL存储引擎MyIsam和InnoDB有哪些区别？\",\"t\":[\"事务支持：MyIsam不支持事务，InnoDB支持事务，拥有ACID四大特性（原子性（事务）、一致性、隔离性、持久性（日志）），InnoDB在高并发环境下可以更好地处理数据一致性和完整性问题（可以很好的解决常见的并发问题：1.脏读、2.幻读、3.不可重复读）。\",\"行级锁定：InnoDB支持行级锁定，可以提高并发性能；而MyIsam则只支持表级锁定，因此在高并发环境下性能较差。\",\"外键约束：InnoDB支持外键约束，MyIsam不支持，所以InnoDB可以确保数据的一致性和完整性。\",\"索引方式：InnoDB使用的是B+树索引来管理数据，可以高效地处理大量数据，而MyIsam使用的B树索引，不如B+树索引高效。\",\"磁盘空间：InnoDB的数据存储方式比MyIsam更为复杂，因此在相同的数据下，InnoDB需要更多的磁盘空间。\"]},\"105\":{\"h\":\"3.什么是索引？都有哪些类型？有什么优缺点？\",\"t\":[\"​ 索引是一种帮助MySQL高效获取数据的数据结构，在InnoDB中使用的是B+树，MyIsam使用的是B树。\",\"​ 索引可分为主键索引与普通索引。其中普通索引也叫二级索引，类型上包括唯一索引、单列索引、联合索引、全文索引等。\",\"​ 优点：可以加快查询的效率。\",\"​ 缺点：维护起来成本很高且需要占用更多的存储空间。\"]},\"106\":{\"h\":\"4.B树和B+树的区别。\",\"t\":[\"B树和B+树都是一种自平衡的多叉树，它们有以下区别：\",\"数据的存放位置不同\",\"​ B树：B树的叶子节点和非叶子节点都可以存放数据。每个节点存放的是数据和指针。\",\"​ B+树：B+树的所有数据都存放在叶子节点上，非叶子节点上存放的是索引。\",\"B+树更适合范围查询\",\"​ B+树的叶子节点是一个有序链表，B树的叶子节点是无序的。所以B+树更适合范围查询。\",\"MySQL对B+树有优化\",\"​ 经过MySQL的优化，B+树的叶子节点上存放的是数据页，数据页上面缀的是有序链表，数据页之间使用的是双向指针连接。每个数据页不超过16KB的数据。\"]},\"107\":{\"h\":\"5.为什么使用B+树而不使用红黑树、二叉树？\",\"t\":[\"​ 红黑树和二叉树是每个节点最多有两个子节点的树结构，红黑树是二叉树的优化，增加了颜色属性；他们有以下区别：\",\"查询效率不同：当数据量足够大时，B+树的树高比红黑树和二叉树低，需要更少的磁盘I/O操作，查询效率更高。\",\"B+树更适合范围查询：B+树的叶子节点是一个有序链表，适合范围查询。\",\"B+树实现了聚集索引，数据和索引放在了一起，查询效率高。\"]},\"108\":{\"h\":\"6.聚集索引和非聚集索引的区别？\",\"t\":[\"聚集索引的数据和索引放在一起，查询效率高；非聚集索引的索引和主键ID放在一起，可能会导致回表，查询效率低。\",\"聚集索引数据行的物理顺序和索引的逻辑顺序一样，查询效率高，担当进行写操作的时候，数据行的物理顺序需要重新排列，导致性能下降；非聚集索引数据行的物理顺序和索引的逻辑顺序不一样，查询效率低；进行写操作时，数据行的物理顺序不需要重新排序，性能较好。\"]},\"109\":{\"h\":\"7.为什么一张表要有一个主键ID？\",\"t\":[\"​ 主键ID使用的时非聚集索引，聚集索引的数据和索引放在一起，在查询的时候更具索引查询即可；而二级索引使用的是非聚集索引：非聚集索引的索引和主键ID放在一起，在使用二级索引查询时，如果索引中没有我们需要的数据时，它就会根据主键ID到原表中查询，这个过程就是回表。如果没有主键ID，那么MySQL就会自动给我们设置一个隐藏的主键ID：rowID，它看不见，摸不到，为了方便我们对数据库进行操作，所以我们需要自行设计一个主键ID。\"]},\"110\":{\"h\":\"8.怎么减少回表？\",\"t\":[\"尽量多的使用覆盖索引\",\"将常用字段设置为主键索引\"]},\"111\":{\"h\":\"9.为什么会有索引失效的情况？\",\"t\":[\"索引失效的情况：\",\"不符合最左前缀原则\",\"条件中有or（若是想让索引生效，只能将or条件中的每个列都加上索引），like查询以%开头、！=操作符、null值查询、使用计算或函数。\",\"字符串索引，在使用时数据一定要使用引号引用起来。若是int类型的索引，数据使不使用引号都有可以。使用函数、计算操作也会导致索引失效（隐式转换）。\",\"当MySQL估计使用全表扫描比使用索引快的时候，如表中的数据量较少时，就不会使用索引。\",\"索引类型不匹配:如果查询条件中的数据类型与索引列的数据类型不匹配，MySQL可能无法使用索引。\"]},\"112\":{\"h\":\"10.如何进行索引调优？\",\"t\":[\"分析查询语句和数据模式：仔细分析查询语句和数据模式，了解查询的特点和使用频率，确保索引的创建和选择符合实际需求。\",\"选择合适的索引策略：根据查询的特点选择合适的索引策略，包括 覆盖索引、联合索引、前缀索引等，以提高查询性能。\",\"优化查询语句：优化查询语句的结构和条件，避免使用不合适的索引的操作符或函数操作，尽量使用查询条件能够命中索引。\",\"避免过度索引：避免创建过多的索引，因为过多的索引会增加数据维护的开销，并可能导致索引失效或选择不正确的索引。\",\"使用索引提示：在需要的情况下，使用索引提示（Index Hint）来强制MySQL使用指定的索引，以避免错误的索引选择。\",\"性能测试和监测：通过性能测试和监测工具，如EXPLAIN、 Slow Query Log等，评估索引的效果，并进行必要的调整和优化。\"]},\"113\":{\"h\":\"11.索引下推是什么？\",\"t\":[\"​ 索引下推是可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。\"]},\"114\":{\"h\":\"锁\"},\"115\":{\"h\":\"12.MySQL中的锁有哪些？\",\"t\":[\"按照颗粒度分：\",\"锁的分类\",\"全局锁：\",\"对整个数据库实例加锁。\",\"命令是Flush table with read lock(FTWRL)\",\"阻塞数据的增删改、数据定义（建表、改表）和更新类事物的提交。\",\"使用场景：全库逻辑备份。\",\"表锁：分为表锁和元数据锁（MDL）\",\"表锁：\",\"表锁语法：lock tables … read/write\",\"表锁解锁：unlock tables\",\"表锁释放时间：客户端断开连接的时候自动释放\",\"元数据锁：\",\"如何使用：MDL 不需要显式使用，在访问一个表的时候会被自动加上,已保证读写的正确性\",\"什么时候加什么锁：当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁\",\"加锁、解锁时机：在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放\",\"读锁和读锁不冲突、读锁和写锁冲突、写锁和写锁冲突\",\"行锁：\",\"相比于表锁：开销大、加锁慢。但表锁不会死锁,行锁会死锁。\",\"两阶段协议：行锁是在需要的时候加上锁，在事务结束时释放锁。（导致死锁的原因）\",\"Record Locks 行记录锁： \",\"是什么：最基本的锁，锁会加在索引上；没有主键索引则会加载row_id上。查询条件是二级索引时，会回到主键索引加锁。\",\"需要注意什么：当查询没有索引时，会走全表，把查到的每一行都加锁，在RC（读提交）下，加锁的语句执行完成后，就会直接释放掉不符合要求的行锁。因此，如果一条更新语句没有走索引，会花费极大的开销。\",\"Gap Locks 间隙锁： \",\"解决幻读的问题：在RR（可重复读）的隔离级别下，解决方法就是间隙锁。\",\"关于幻读的问题:出现幻读也不是非常严重的问题，可以把隔离级别降到RC（读提交）这样可以提高并发性。间隙锁虽然彼此不冲突，本身也是花费一些开销，而且会和写入操作发生冲突，影响并发。\",\"功能：锁住的是两个行之间的数据，不允许其他人向中间写入一个数据。\",\"Next-Key Locks： \",\"是什么：可以认为是记录锁和间隙锁的组合。\",\"加锁后会发生什么：无论主键索引还是二级索引，都会加上间隙锁。 Next-Key Locks 因为包含行锁，因此会出现冲突。\",\"MySQL加行锁默认加NK锁\",\"Insert Intention Locks 插入意向锁： \",\"只有在insert的时候会使用，和间隙锁冲突，但是彼此不冲突。\"]},\"116\":{\"h\":\"13. 什么是MDL锁？\",\"t\":[\"​ MDL（Metadata Locking）是数据库管理系统（DBMS）中的一种机制，用于管理和控制对数据库对象（如表、索引、视图等）的元数据的并发访问。\"]},\"117\":{\"h\":\"14. MDL什么时候加锁？\",\"t\":[\"事务修改数据：当一个事务对数据库中的数据进行修改（插入、更新、删除）时，会获取相应的锁来确保事务的原子性和一致性。这样可以防止其他并发事务同时修改相同的数据，避免数据冲突和不一致性。\",\"并发事务访问同一数据：当多个事务同时访问同一数据时，可能会存在读写冲突或数据不一致的问题。为了保证数据的隔离性，需要使用锁来协调并发事务之间的访问。例如，读操作可能会获取共享锁（Shared Lock），而写操作则需要获取排它锁（Exclusive Lock）。\",\"数据库对象的元数据访问：当多个事务同时访问数据库对象的元数据时（如表、索引、视图的定义），需要采用元数据锁（MDL）来管理并发访问。元数据锁用于保护元数据的一致性，防止并发事务之间的冲突。\"]},\"118\":{\"h\":\"15. MDL有什么危害？\",\"t\":[\"并发性能下降：过多的元数据锁操作可能导致并发性能下降。当多个事务需要访问相同的元数据对象时，如果存在过多的元数据锁竞争，会引发锁冲突和阻塞，从而导致事务等待和执行时间延长，对并发性能产生负面影响。\",\"阻塞和长时间等待：如果一个事务持有元数据锁并长时间不释放，其他事务需要等待该锁的释放。这可能导致其他事务阻塞和长时间等待，从而影响系统的响应性能和并发能力。\",\"死锁：如果事务之间的元数据锁请求存在循环依赖，可能引发死锁。当多个事务相互等待对方所持有的元数据锁时，系统无法继续执行，需要通过死锁检测和解决机制来解决。\",\"数据库对象的不一致性：如果对数据库对象的元数据访问没有正确加锁或使用不恰当的隔离级别，可能导致数据库对象的不一致性。例如，一个事务正在修改表的结构或索引定义时，其他事务可能读取到不一致的元数据，导致数据库对象定义的不一致性。\"]},\"119\":{\"h\":\"16. 如何避免MDL出现问题？\",\"t\":[\"​ 应该在设计数据库架构时合理规划和管理元数据锁的使用。可以考虑优化元数据的访问频率和方式，减少对元数据的并发访问冲突，使用合适的隔离级别，以及定期进行性能监控和调优。同时，合理并发控制和锁管理策略也是确保元数据锁正常运行和性能的重要措施。\"]},\"120\":{\"h\":\"17. 行锁在什么时候加锁？\",\"t\":[\"​ 行锁在事务需要的时候进行加锁 ，在事务结束的时候再释放锁。什么时候需要是指当进行读操作时进行手动加锁或者是快照读升级为当前读的时候进行加锁。\"]},\"121\":{\"h\":\"18. next-key lock锁的两优化是什么？\",\"t\":[\"索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。\",\"索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock退化为间隙锁。\"]},\"122\":{\"h\":\"19. 乐观锁与悲观锁\",\"t\":[\"​ 悲观锁是一种比较保守的锁机制，它认为在整个事务过程中，数据很有可能会被其他事务修改，因此在对数据进行操作时，必须先对其进行加锁，以防止其他事务的干扰。悲观锁通常使用数据库的锁机制实现，如行锁、表锁等，可以有效地控制并发访问，但会对系统性能产生影响。\",\"​ 乐观锁是一种比较乐观的锁机制，它认为在整个事务过程中，数据很少会被其他事务修改，因此在对数据进行操作时，并不对其进行加锁，而是在事务提交之前检查数据是否被其他事务修改过，如果被修改过，则回滚事务，重新进行操作。乐观锁通常使用版本号或时间戳等机制实现，可以减少锁的使用，提高系统性能，但需要增加一些额外的开销来实现数据版本控制。\"]},\"123\":{\"h\":\"事务\"},\"124\":{\"h\":\"20. MySQL的事务的隔离级别有哪些？\",\"t\":[\"读未提交：一个事务还未提交时可以被别的事务读取数据\",\"读已提交：一个事务提交之后，所做的变更可以被别的事务看到\",\"可重复读：事务在执行中用到的数据与最开始所看到的数据是一样的\",\"串行化：加锁出现冲突时 事务必须要等到前一个事务执行完成 隔离级别越高，性能就会下降。\",\"PS：MySQL的默认隔离级别是可重复读\"]},\"125\":{\"h\":\"21. 脏读、幻读和不可重复读是什么？\",\"t\":[\"​ 脏读、幻读和不可重复读是数据库并发控制中的三个问题。\",\"脏读（Dirty Read）指一个事务读取了另一个事务尚未提交的数据。如果后续的事务回滚，那么前面事务读取到的数据就是无效的。\",\"幻读（Phantom Read）指一个事务在两次查询之间，另一个事务插入了新的数据行，导致前一次查询和后一次查询的结果不一致。（mvcc+间隙锁）只有插入才会出现幻读\",\"不可重复读（Non-repeatable Read）指一个事务多次读取同一数据，在这个过程中，另一个事务对该数据进行了修改或删除，导致前一次读取和后一次读取的结果不一致。\"]},\"126\":{\"h\":\"22. 不同的隔离级别分别容易出现什么问题？又解决了什么问题？\",\"t\":[\"脏读\",\"幻读\",\"不可重复读\",\"读未提交\",\"×\",\"×\",\"×\",\"读已提交\",\"√\",\"×\",\"×\",\"可重复读\",\"√\",\"×\",\"√\",\"串行化\",\"√\",\"√\",\"√\"]},\"127\":{\"h\":\"21. MVCC是如何实现的？\",\"t\":[\"​ MVCC又叫基于版本号的多版本并发控制，主要解决隔离性的问题；mvcc工作在读已提交和可重复读的隔离级别下，两者最大的不同是创建read view的时机不同，采用read view和undo log版本链解决，undo log是事务链表，记录有(事务)trx_i和rool_pointer(指针)，在read view 读视图中有min_trx_id(最小事务id)、max_trx_id(最大事务id)、create_trx_id(创建事务id)和m_trx_id(活跃事务id);工作原理是查看当前事务是否在当前read view中，如果在，会寻找上一个版本的事务id，如果不在，该事务就是查找的事务。\"]},\"128\":{\"h\":\"23. 脏读、幻读和不可重复读是如何解决的？\",\"t\":[\"读提交解决脏读问题\",\"可重复读和串行化解决不可重复读和幻读的问题\"]},\"129\":{\"h\":\"24. 数据量大的时候如何切分？\",\"t\":[\"按位置切分：国家、省市城市。\",\"时间切分：月份、季度、年份。\",\"垂直切分：如user表可以切分为账号基本信息user_basic和个人资料user_profile。\",\"水平切分：如订单数据量较大，按照日期切分成order_2020、order_2021、order_2022。\"]},\"130\":{\"h\":\"25. 快照度和当前读是什么？\",\"t\":[\"增删改、加锁\",\"​ 快照读（Snapshot Read）和当前读（Current Read）是数据库中两种常见的读取数据的方式。\",\"快照读（Snapshot Read）：快照读是指读取数据库中某个时间点的数据快照。当进行快照读取时，读取的数据是在事务开始之前的一个一致的时间点的数据。这意味着无论事务中的其他并发操作是否已提交，快照读取都会返回事务开始之前的数据版本。快照读取不会受到正在进行的并发事务的修改的影响，能够提供一致性和可重复性的读取。\",\"当前读（Current Read）：当前读是指读取数据库中最新的数据，即读取已经提交的事务所做的修改。当前读取获取的是实时的、最新的数据状态。如果存在并发事务对读取的数据进行修改但尚未提交，当前读取将能够看到这些未提交的修改。当前读取适用于需要读取最新状态的场景，但可能会受到并发事务的影响，因为读取到的数据可能会在事务提交之后发生变化。\",\"​ 在数据库中，快照读取通常用于读取一致性要求较高的数据，例如读取历史记录、生成报表等。而当前读取则适用于需要读取最新数据状态的场景，例如在线交易、实时查询等。\"]},\"131\":{\"h\":\"日志\"},\"132\":{\"h\":\"26. bin_log和redo_log的区别？\",\"t\":[\"redo_log 是 InnoDB 引擎特有的；bin_log 是 MySQL 的 Server 层实现的，所有引擎都可以使用。\",\"redo_log 是物理日志，记录的是“在某个数据页上做了什么修改”；bin_log 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。\",\"redo_Log 是循环写的，空间固定会用完；bin_log 是可以追加写入的。“追加写”是指 bin_log 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。 最后，简单说下：如果没有了redo_log，数据就无法做到crash-safe，因为 bin_log不具备保存事务的性质，最重要的是它并不具备记录数据页上究竟发生了什么。如果没有 bin_log的话，redo_log是个循环写入的，不存在归档这个功能。\"]},\"133\":{\"h\":\"27. 什么是WAL机制？\",\"t\":[\"​ WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo_log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。\"]},\"134\":{\"h\":\"28. 什么是两阶段提交？\",\"t\":[\"​ 两阶段提交是分布式系统中比较常见的一种事务提交算法。在Innodb的日志提交时用到了这个协议，用来保证事务提交时，redolog和binlog 都处于完成状态。具体而言：\",\"操作完更新语句，把数据保存到内存\",\"写入redo_log，处于prepare阶段\",\"写入BinLog\",\"提交事务，BinLog和RedoLog都处于完成状态。\"]},\"135\":{\"h\":\"29. MySQL什么时候刷脏页？\",\"t\":[\"redo_log写满时，需要暂停更新操作。此时会停止所有的写入操作！\",\"机器的物理内存满了的时候\",\"Mysql处于空闲状态时\",\"Mysql重启时\"]},\"136\":{\"h\":\"30. redo_log和bin_log是如何配合工作的？\",\"t\":[\"​ 它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 RedoLog：\",\"如果碰到既有 prepare、又有 commit 的 RedoLog，就直接提交；\",\"如果碰到只有 prepare、而没有 commit 的RedoLog，就拿着 XID 去BinLog 找对应的事务。\"]},\"137\":{\"c\":[\"数据库\"]},\"138\":{\"c\":[\"学习资料\"]},\"139\":{\"h\":\"计算机网络\"},\"140\":{\"h\":\"1. 经典网络分层，五层七层是哪些？\",\"t\":[\"经典的网络分层模型有两种：\",\"五层协议模型（TCP/IP模型）：分为物理层、数据链路层、网络层、传输层和应用层。\",\"七层协议模型（OSI模型）：分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。\",\"传输层常见协议：\",\"TCP (Transmission Control Protocol): \",\"提供可靠的、面向连接的字节流服务。\",\"使用三次握手建立连接，确保数据传输的可靠性。\",\"支持拥塞控制、流量控制和错误恢复。\",\"UDP (User Datagram Protocol): \",\"提供无连接的、不可靠的数据报服务。\",\"适用于需要快速传输但可以容忍一定数据丢失的应用，如视频会议、在线游戏等。\",\"QUIC (Quick UDP Internet Connections): \",\"一种基于UDP的传输层协议，由Google开发。\",\"提供类似TCP的可靠性和有序性，同时减少连接建立时间，提高传输效率。\",\"应用层常见协议：\",\"HTTP (Hypertext Transfer Protocol): 用于从网络传输超文本到本地浏览器的协议，是构建Web的基础。\",\"HTTPS (HTTP Secure): HTTP的安全版本，通过SSL/TLS协议提供加密、身份验证和数据完整性。\",\"DNS (Domain Name System): 将域名转换为IP地址的系统。\",\"WebSocket: 提供全双工通信渠道的协议，允许服务器主动发送信息给客户端。\",\"FTP (File Transfer Protocol): 用于在网络上的计算机之间传输文件。\",\"SFTP (Secure File Transfer Protocol): FTP的安全版本，使用SSH协议进行文件传输。\"]},\"141\":{\"h\":\"2. 在浏览器地址中输入URL，后续的网络世界会发生什么？\",\"t\":[\"解析URL:\",\"浏览器首先解析URL，确定协议（如HTTP、HTTPS）、域名、端口（如果有指定）和路径。\",\"DNS查询:\",\"如果浏览器没有缓存域名对应的IP地址，它会向DNS服务器发起查询，将域名解析为IP地址。\",\"建立TCP连接 (对于HTTP/1.0、1.1和2.0):\",\"浏览器使用解析得到的IP地址，通过TCP协议与服务器建立连接。这涉及到三次握手过程。\",\"如果使用HTTP/3，则使用QUIC（基于UDP的传输层协议）\",\"TLS/SSL握手 (如果使用HTTPS):\",\"如果URL以HTTPS开头，浏览器将启动TLS握手过程，与服务器协商加密参数，交换密钥，并验证服务器的身份。\",\"发送HTTP请求(应用层):\",\"浏览器构建一个HTTP请求，包括请求行（方法，URL，HTTP版本），请求头（如Host, User-Agent等），以及可能的请求体（如POST请求的数据）。\",\"封装数据：\",\"传输层：如果使用HTTP/1.0、1.1、2.0和HTTPS添加TCP头部。如果使用HTTP/3，则添加的是QUIC头部（基于UDP的传输层协议）。\",\"网络层：添加报文头部（包含源地址IP和目标地址IP）。\",\"数据链路层：添加MAC头部（包含接收方和发送方的MAC地址）。\",\"物理层：通过网卡、交换机、路由器以及网线等其他的传输介质将数据发送到目标服务器。\",\"服务器处理请求:\",\"解封装数据：\",\"电信号>数字信号(物理层)\",\"数据信号>帧（数据链路层）\",\"帧>数据包（网路层）\",\"数据包>数据段（传输层）\",\"服务器接收到请求后，根据请求类型（GET, POST等）和资源路径，进行相应的处理。这可能包括查询数据库、执行后端脚本等。\",\"发送HTTP响应:\",\"服务器处理完请求后，会发送一个HTTP响应给浏览器，包括状态码（如200表示成功）、响应头和响应体（网页内容）。\",\"浏览器渲染页面:\",\"浏览器接收到响应后，开始解析HTML文档，构建DOM树，然后根据CSS样式进行渲染。同时，浏览器会请求HTML中引用的CSS文件、JavaScript脚本、图片等资源。\",\"连接关闭 :\",\"服务器在数据传输完成后，浏览器向服务器发起TCP四次挥手，断开连接。\"]},\"142\":{\"h\":\"3. 介绍一下DNS服务\",\"t\":[\"​ DNS（域名系统，Domain Name System）是互联网上用于将域名转换为IP地址的分布式服务。它是一个分层和可扩展的命名系统，用于将易于记忆的域名（如www.example.com）转换为计算机用于网络通信的IP地址（如192.168.1.1）。\",\"以下是DNS服务的一些关键特点：\",\"分布式数据库: \",\"DNS是一个分布式数据库，存储在全世界的DNS服务器上。这些服务器相互协作，提供域名解析服务。\",\"层次结构: \",\"DNS使用层次结构来组织域名，顶级域名（如com、net等）下面是二级域名（如example、baidu等），然后是子域名（如www、mali等）。\",\"迭代查询和递归查询: \",\"DNS查询可以是迭代的或递归的。迭代查询是客户端自己向不同的DNS服务器查询直到找到结果；递归查询是由一个DNS服务器代替客户端完成所有查询工作。\",\"DNS负载均衡和故障转移: \",\"DNS可以用于实现负载均衡和故障转移，通过将同一个域名解析到多个IP地址，分发网络流量或提供高可用性。\",\"DNS的工作流程：\",\"用户输入域名: \",\"用户在浏览器地址栏输入一个域名，如www.example.com。\",\"本地DNS缓存查询: \",\"浏览器首先检查自己的DNS缓存，看是否已经有了该域名的IP地址记录。\",\"操作系统DNS缓存查询: \",\"如果浏览器缓存中没有记录，操作系统会检查自己的DNS缓存。\",\"配置的本地DNS服务器查询: \",\"如果本地缓存中没有找到记录，查询请求会被发送到配置的本地DNS服务器，通常是ISP（互联网服务提供商）提供的。\",\"递归查询: \",\"本地DNS服务器会尝试解析域名。如果它也没有缓存结果，它会向其他DNS服务器发起递归查询。\",\"根DNS服务器: \",\"如果本地DNS服务器没有该记录，它会首先查询根DNS服务器，获取负责该顶级域（如.com、.org）的顶级域DNS服务器的地址。\",\"顶级域DNS服务器: \",\"根DNS服务器响应后，本地DNS服务器再向相应的顶级域DNS服务器查询。\",\"权威DNS服务器: \",\"顶级域DNS服务器会提供负责目标域名的权威DNS服务器的地址，然后本地DNS服务器向权威DNS服务器查询。\",\"获取IP地址: \",\"权威DNS服务器拥有域名到IP地址映射的记录，它会将查询结果返回给本地DNS服务器。\",\"缓存结果: \",\"本地DNS服务器将返回的IP地址记录缓存起来，以备后续使用，然后返回给发起查询的客户端。\",\"客户端使用IP地址: \",\"客户端（如用户的浏览器）接收到IP地址后，使用该地址建立与目标服务器的连接。\",\"DNS轮询: \",\"在某些情况下，权威DNS服务器可能有多条记录对应同一个域名，使用DNS轮询可以分发请求到多个服务器。\",\"DNS缓存过期: \",\"DNS记录通常有生存时间（TTL），过期后需要重新查询，以获取最新的IP地址信息。\"]},\"143\":{\"h\":\"4. TCP和UDP有什么特点，有什么区别？\",\"t\":[\"​ TCP(Transmission Control Protocol)和UDP(User Datagram Protocol)是两种常见的传输层协议，用于在计算机网络中实现数据的可靠传输和通信。它们有不同的特点和适用场景，下面是它们的主要特点和区别：\",\"TCP的特点：\",\"可靠性：TCP是一种可靠的传输协议，它确保数据的传输是可靠的。通过使用确认和重传机制，TCP保证数据能够完整地按序到达目的地，并且可以处理丢弃、重复、乱序等问题。\",\"面向连接：TCP是面向连接的协议，通信双方在进行数据传输之前需要先建立连接。连接的建立和断开都需要一定的开销，但这样可以确保通信的稳定和可靠性。\",\"有序性：TCP保证数据按照发送的顺序被接收，不会出现数据乱序的情况。\",\"流控制和拥塞控制：TCP具有流控制和拥塞控制机制，可以避免发送方发送过多的数据导致接收方无法及时处理，同时也能适应网络拥塞情况。\",\"基于字节流：TCP 是以字节流的方式进行数据传输的，没有边界，但保证顺序和可靠。\",\"适用场景：TCP适用于对数据可靠性要求较高的应用场景，如文件传输、网页浏览、电子邮件等。\",\"UDP的特点：\",\"不可靠性：UDP是一种不可靠的传输协议，它不保证数据的可靠传输。UDP不使用确认和重传机制，数据发送后不会等待接收方的确认，也不会重发数据，可能导致数据丢失或乱序。\",\"无连接：UDP是面向无连接的协议，通信双方不需要先建立连接就可以直接发送数据。这样可以减少连接建立和断开的开销，但也意味着没有建立连接的保障。\",\"无序性：UDP不保证数据按照发送顺序被接收，接收方收到数据的顺序可能与发送顺序不一致。\",\"不支持流控制和拥塞控制：UDP不提供流控制和拥塞控制，发送方可以以任意速率发送数据，可能导致网络拥塞。\",\"基于报文：UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。\",\"适用场景：UDP适用于对实时性要求较高、对数据可靠性要求相对较低的应用场景，如音频/视频传输、实时游戏等。\",\"总结：\",\"​ TCP和UDP是两种不同的传输层协议，TCP提供了可靠性和有序性，适用于对数据完整性要求高的场景；而UDP提供了低延迟和实时性，适用于对数据完整性要求相对较低、实时性要求高的场景。在实际应用中，根据不同的需求选择合适的传输协议可以提高网络通信的效率和性能。\"]},\"144\":{\"h\":\"5. 请详细介绍一下TCP的三次握手和四次挥手机制？\",\"t\":[\"​ TCP（Transmission Control Protocol）是一种可靠的传输协议，用于在网络中建立可靠的连接。TCP使用三次握手（Three-Way Handshake）来建立连接，并使用四次挥手（Four-Way Handshake）来关闭连接。\",\"三次握手的过程如下：\",\"第一步：客户端发送SYN（同步）包给服务器。这个包包含了客户端的初始序列号（Client Sequence Number）以及请求建立连接的标志位（SYN=1）。\",\"第二步：服务器接收到SYN包后，会发送一个SYN/ACK（同步/确认）包给客户端。这个包包含了服务器的初始序列号（Server Sequence Number）以及对客户端的请求建立连接的确认。\",\"第三步：客户端收到SYN/ACK包后，会发送一个ACK（确认）包给服务器，确认服务器的请求建立连接。此时连接已经建立，客户端和服务器可以开始进行数据传输。\",\"​ 通过三次握手，客户端和服务器就建立了可靠的连接。这种机制可以确保双方都同意建立连接，并且可以互相确认对方的请求和确认。\",\"四次挥手的过程如下：\",\"第一步：当客户端想要关闭连接时，它发送一个FIN（结束）包给服务器，表示它不再发送数据了。\",\"第二步：服务器接收到FIN包后，进入close_wait阶段，并发送一个ACK包给客户端，确认收到了客户端的关闭请求。\",\"第三步：服务器处理完数据后，发送一个FIN包给客户端，表示服务器也准备关闭连接。\",\"第四步：客户端接收到FIN包后，进入time_wait阶段，并发送一个ACK包给服务器，确认收到了服务器的关闭请求。此时服务器的连接已经关闭，客户端在TIME_WAIT状态等待2MSL时间后，确保服务端接收到了最终的确认，然后关闭客户端的连接。\"]},\"145\":{\"h\":\"6. 什么是close_wait、time_wait和2MSL时间?都有什么作用？\",\"t\":[\"close_wait：表示对方已经发送了关闭连接的请求，等待本端应用程序也关闭连接。这个阶段就是为了让应用程序有时间处理完剩余的数据，并主动关闭连接。\",\"time_wait：表示一个连接已经完成了关闭连接，并且在等待最后的确认报文。这个阶段有两个作用：一是防止上一次连接中的延迟或重复的数据包被下一次连接错误的接收；二是确保被动关闭方在规定的时间内正常的关闭连接。\",\"2MSL时间：\",\"2MSL（最大报文段生存时间的两倍）是一个时间参数，用于确定在TIME_WAIT状态下等待的时间长度。\",\"MSL是TCP实现定义的一个时间值，表示一个TCP段在网络中生存的最大时间。2MSL确保了即使在最坏的情况下，任何旧的重复TCP段也会在2MSL时间后从网络中消失。\",\"等待2MSL时间是TCP连接关闭过程的一个重要安全特性，它防止了旧的数据包在连接重新建立后干扰新的通信。\"]},\"146\":{\"h\":\"7. TCP的重传机制是什么？\",\"t\":[\"​ TCP（传输控制协议）的重传机制是其确保数据可靠传输的关键组成部分。\",\"以下是TCP重传机制的几个主要方面：\",\"超时重传（Timeout Retransmission）： \",\"发送方在发送数据后会启动一个计时器，如果在设定的时间内没有收到确认（ACK），则会认为数据包丢失或损坏，并重新发送该数据包。\",\"快速重传（Fast Retransmit）： \",\"发送方在没有收到预期的ACK，而是收到了三个重复的ACK（表明接收方收到了特定的数据包多次），会立即重传丢失的数据包，而不是等待超时计时器到期。\",\"选择性确认（Selective Acknowledgment, SACK）： \",\"这是一种可选的TCP扩展，允许接收方明确告知发送方哪些数据包已经成功接收，哪些需要重传。这可以减少不必要的重传，提高效率。\"]},\"147\":{\"h\":\"8. TCP是如何进行流量控制的？\",\"t\":[\"​ TCP是通过滑动窗口的方式来进行流量控制的。网络传输有一个特点：数据往返时间越长，通讯效率越低。通过指定滑动窗口的大小，就可以实现双方无需等待确认，可以继续发送数据的最大值。滑动窗口的大小一般有接收方的窗口大小来决定的，TCP的头部中存在一个Window的字段用来描述接收方的数据大小，发送方可以根据这个值来发送数据，进而避免接受方出现数据溢出的情况。\"]},\"148\":{\"h\":\"9. HTTP和HTTPS有哪些区别？\",\"t\":[\"HTTPS协议需要到CA申请SSL证书,而HTTP不需要。SSL证书能够证明网站的身份,保证通信安全。\",\"HTTPS使用的是TLS/SSL加密通信,而HTTP是明文传输。HTTPS在传输前会将数据加密,能够防止数据在传输过程中被窃取。\",\"HTTPS协议的默认端口是443,而HTTP协议的默认端口是80。\",\"HTTPS速度会略慢于HTTP,因为需要进行加密解密等过程。\",\"HTTPS可以防止DNS劫持攻击,而HTTP容易受到攻击。\",\"​ 总体来说,HTTPS协议是更安全的选择。在涉及敏感信息的场景下,都应该使用HTTPS来保证通信安全。\"]},\"149\":{\"h\":\"10. 什么是SSL加密？\",\"t\":[\"SSL（Secure Sockets Layer）加密是一种安全协议，用于在互联网上建立一个加密的链接，确保数据在客户端和服务器之间传输过程中的安全性。SSL协议通过使用加密算法来保护数据不被未授权的第三方访问或篡改。\",\"SSL加密的主要功能包括：\",\"身份验证：SSL使用数字证书来验证服务器和（可选的）客户端的身份，确保通信双方是可信的。\",\"数据加密：SSL使用对称加密算法（如AES）来加密传输的数据，确保数据在传输过程中的机密性。\",\"数据完整性：SSL使用消息摘要算法（如SHA）来确保数据在传输过程中没有被篡改。\",\"SSL的替代者是TLS（Transport Layer Security），它是基于SSL协议进一步发展的，提供了更强的安全性和更多的功能。在实际应用中，\\\"SSL\\\"这个术语经常被用来泛指SSL和TLS协议。\",\"SSL/TLS加密通常用于以下场景：\",\"网上银行和在线支付系统\",\"电子商务网站\",\"任何需要保护用户隐私和数据安全的在线服务\",\"当用户通过浏览器访问一个使用SSL/TLS的网站时，浏览器地址栏通常会出现一个锁形图标，表示当前连接是安全的。点击这个图标可以查看网站的安全证书和其他安全信息。\"]},\"150\":{\"h\":\"11. HTTP1、HTTP2和HTTP3的区别？\",\"t\":[\"HTTP（超文本传输协议）是互联网上应用最为广泛的网络协议之一，用于从服务器传输超文本到本地浏览器。随着技术的发展，HTTP经历了几个版本的更新，其中包括HTTP/1.x、HTTP/2和HTTP/3。以下是它们之间的主要区别：\",\"HTTP/1.x:\",\"支持文本协议，基于TCP连接。\",\"每个TCP连接只能发送一个请求，需要等待响应后才能发送下一个请求（队头阻塞）。\",\"支持持久连接（HTTP/1.1），可以减少连接建立和关闭的开销，但仍然存在队头阻塞问题。\",\"只支持头部压缩（HTTP/1.1），不包括内容压缩。\",\"HTTP/2:\",\"基于二进制协议，提高了解析效率。\",\"引入了多路复用（Multiplexing），允许在单个TCP连接上并行交错发送多个请求和响应，减少了队头阻塞问题。\",\"支持头部压缩（HPACK），减少了头部信息的传输大小。\",\"允许服务器推送（Server Push），服务器可以在客户端请求之前主动发送资源。\",\"支持流量控制和优先级设置，更有效地管理资源。\",\"HTTP/3:\",\"基于QUIC协议，运行在UDP之上，而不是TCP。\",\"解决了TCP在某些网络环境下的队头阻塞问题，提高了连接的稳定性和效率。\",\"继承了HTTP/2的多路复用、头部压缩和服务器推送特性。\",\"支持0-RTT连接建立，减少了连接建立的延迟。\",\"提供更好的拥塞控制和网络恢复机制，提高了网络适应性。\",\"总的来说，HTTP/2相比HTTP/1.x在性能上有显著提升，而HTTP/3则进一步优化了传输效率和稳定性，特别是在移动和不稳定网络环境下。随着技术的发展，HTTP/3可能会逐渐成为主流的网络协议。\"]},\"151\":{\"h\":\"12. GET和POST有哪些区别？\",\"t\":[\"​ GET和POST是HTTP协议中常用的两种请求方法，它们在数据传输和语义上有以下区别：\",\"数据位置：GET请求将参数数据附加在URL的查询字符串中，即放在URL的后面，以?符号分隔参数。例如：http://example.com/path?param1=value1¶m2=value2。而POST请求将参数数据放在请求的消息体中，作为请求的一部分。\",\"数据长度限制：GET请求对URL长度有限制，不同浏览器和服务器对URL长度的限制不同，一般在几千个字符左右。而POST请求没有长度限制，因为参数数据放在请求的消息体中。\",\"数据类型：GET请求的参数数据以键值对的形式出现在URL中，数据类型是明文的，可以直接在URL中看到。而POST请求的参数数据在消息体中，数据类型是隐藏的，不会直接显示在URL中，更安全。\",\"数据语义：GET请求是幂等的，即多次重复请求不会产生副作用，只是获取数据，不会对服务器产生影响，可以被缓存。POST请求是非幂等的，可能会对服务器产生副作用，例如创建、更新或删除数据，不适合被缓存。\",\"安全性：GET请求的参数数据暴露在URL中，容易被拦截、篡改或缓存，不适合传输敏感信息。POST请求的参数数据在消息体中，相对安全，适合传输敏感信息。\",\"​ 总结来说，GET适合用于获取数据，参数在URL中明文传输；而POST适合用于提交数据，参数在请求消息体中传输，更安全且没有长度限制。根据具体需求和场景，选择适合的请求方法。\"]},\"152\":{\"c\":[\"计算机\"]},\"153\":{\"c\":[\"学习资料\"]},\"154\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"155\":{\"h\":\"Game\"},\"156\":{\"h\":\"Project\"},\"157\":{\"h\":\"Go语言基础\"},\"158\":{\"h\":\"Books\"},\"159\":{\"h\":\"Go语言模型\"},\"160\":{\"h\":\"Go语言算法\"},\"161\":{\"h\":\"前端三大件\"},\"162\":{\"h\":\"数据库\"},\"163\":{\"h\":\"计算机基础\"}},\"dirtCount\":0,\"index\":[[\"篡改或缓存\",{\"1\":{\"151\":1}}],[\"容易被拦截\",{\"1\":{\"151\":1}}],[\"容量\",{\"1\":{\"8\":1}}],[\"安全性\",{\"1\":{\"151\":1}}],[\"符号分隔参数\",{\"1\":{\"151\":1}}],[\"头部压缩和服务器推送特性\",{\"1\":{\"150\":1}}],[\"继承了http\",{\"1\":{\"150\":1}}],[\"继续下一次循环\",{\"1\":{\"91\":1}}],[\"继续往它发送数据会导致panic\",{\"1\":{\"17\":1}}],[\"运行在udp之上\",{\"1\":{\"150\":1}}],[\"引入了多路复用\",{\"1\":{\"150\":1}}],[\"引擎会在适当的时候\",{\"1\":{\"133\":1}}],[\"引擎就会先把记录写到\",{\"1\":{\"133\":1}}],[\"引擎特有的\",{\"1\":{\"132\":1}}],[\"队头阻塞\",{\"1\":{\"150\":1}}],[\"随着技术的发展\",{\"1\":{\"150\":2}}],[\"随着业务的发展\",{\"1\":{\"26\":1}}],[\"点击这个图标可以查看网站的安全证书和其他安全信息\",{\"1\":{\"149\":1}}],[\"点击事件触发了\",{\"1\":{\"93\":1}}],[\"点击事件\",{\"1\":{\"93\":2}}],[\"任何需要保护用户隐私和数据安全的在线服务\",{\"1\":{\"149\":1}}],[\"任何旧的重复tcp段也会在2msl时间后从网络中消失\",{\"1\":{\"145\":1}}],[\"身份验证\",{\"1\":{\"149\":1}}],[\"身份验证和数据完整性\",{\"1\":{\"140\":1}}],[\"能够防止数据在传输过程中被窃取\",{\"1\":{\"148\":1}}],[\"能够提供一致性和可重复性的读取\",{\"1\":{\"130\":1}}],[\"保证通信安全\",{\"1\":{\"148\":1}}],[\"保证非主键属性之间不存在供给依赖关系\",{\"1\":{\"103\":1}}],[\"滑动窗口的大小一般有接收方的窗口大小来决定的\",{\"1\":{\"147\":1}}],[\"哪些需要重传\",{\"1\":{\"146\":1}}],[\"允许服务器推送\",{\"1\":{\"150\":1}}],[\"允许服务器主动发送信息给客户端\",{\"1\":{\"140\":1}}],[\"允许在单个tcp连接上并行交错发送多个请求和响应\",{\"1\":{\"150\":1}}],[\"允许接收方明确告知发送方哪些数据包已经成功接收\",{\"1\":{\"146\":1}}],[\"超文本传输协议\",{\"1\":{\"150\":1}}],[\"超文本标记语言\",{\"1\":{\"76\":1}}],[\"超时重传\",{\"1\":{\"146\":1}}],[\"进而避免接受方出现数据溢出的情况\",{\"1\":{\"147\":1}}],[\"进入time\",{\"1\":{\"144\":1}}],[\"进入close\",{\"1\":{\"144\":1}}],[\"进行相应的处理\",{\"1\":{\"141\":1}}],[\"进行写操作时\",{\"1\":{\"108\":1}}],[\"进行验证\",{\"1\":{\"39\":1}}],[\"四次挥手的过程如下\",{\"1\":{\"144\":1}}],[\"四边形\",{\"1\":{\"26\":1}}],[\"三次握手的过程如下\",{\"1\":{\"144\":1}}],[\"三种导入方式的优先级\",{\"1\":{\"66\":1}}],[\"视频传输\",{\"1\":{\"143\":1}}],[\"视图的定义\",{\"1\":{\"117\":1}}],[\"视图等\",{\"1\":{\"116\":1}}],[\"电子商务网站\",{\"1\":{\"149\":1}}],[\"电子邮件等\",{\"1\":{\"143\":1}}],[\"电信号>数字信号\",{\"1\":{\"141\":1}}],[\"没有边界\",{\"1\":{\"143\":1}}],[\"没有主键索引则会加载row\",{\"1\":{\"115\":1}}],[\"流控制和拥塞控制\",{\"1\":{\"143\":1}}],[\"流量控制和错误恢复\",{\"1\":{\"140\":1}}],[\"连接的建立和断开都需要一定的开销\",{\"1\":{\"143\":1}}],[\"连接关闭\",{\"1\":{\"141\":1}}],[\"乱序等问题\",{\"1\":{\"143\":1}}],[\"过期后需要重新查询\",{\"1\":{\"142\":1}}],[\"过多的元数据锁操作可能导致并发性能下降\",{\"1\":{\"118\":1}}],[\"缓存结果\",{\"1\":{\"142\":1}}],[\"权威dns服务器可能有多条记录对应同一个域名\",{\"1\":{\"142\":1}}],[\"权威dns服务器拥有域名到ip地址映射的记录\",{\"1\":{\"142\":1}}],[\"权威dns服务器\",{\"1\":{\"142\":1}}],[\"根dns服务器响应后\",{\"1\":{\"142\":1}}],[\"根dns服务器\",{\"1\":{\"142\":1}}],[\"根据具体需求和场景\",{\"1\":{\"151\":1}}],[\"根据不同的需求选择合适的传输协议可以提高网络通信的效率和性能\",{\"1\":{\"143\":1}}],[\"根据不同的需求可能要将数据输出到终端\",{\"1\":{\"25\":1}}],[\"根据请求类型\",{\"1\":{\"141\":1}}],[\"根据查询的特点选择合适的索引策略\",{\"1\":{\"112\":1}}],[\"根据开发者的意愿漂浮到网页的任意方向\",{\"1\":{\"69\":1}}],[\"根据用户需求添加支持微信支付\",{\"1\":{\"26\":1}}],[\"互联网服务提供商\",{\"1\":{\"142\":1}}],[\"配置的本地dns服务器查询\",{\"1\":{\"142\":1}}],[\"看是否已经有了该域名的ip地址记录\",{\"1\":{\"142\":1}}],[\"本地dns服务器将返回的ip地址记录缓存起来\",{\"1\":{\"142\":1}}],[\"本地dns服务器再向相应的顶级域dns服务器查询\",{\"1\":{\"142\":1}}],[\"本地dns服务器会尝试解析域名\",{\"1\":{\"142\":1}}],[\"本地dns缓存查询\",{\"1\":{\"142\":1}}],[\"本身也是花费一些开销\",{\"1\":{\"115\":1}}],[\"递归查询\",{\"1\":{\"142\":1}}],[\"递归查询是由一个dns服务器代替客户端完成所有查询工作\",{\"1\":{\"142\":1}}],[\"递归排序函数\",{\"1\":{\"58\":1}}],[\"迭代查询是客户端自己向不同的dns服务器查询直到找到结果\",{\"1\":{\"142\":1}}],[\"迭代查询和递归查询\",{\"1\":{\"142\":1}}],[\"迭代器\",{\"1\":{\"91\":1}}],[\"顶级域dns服务器会提供负责目标域名的权威dns服务器的地址\",{\"1\":{\"142\":1}}],[\"顶级域dns服务器\",{\"1\":{\"142\":1}}],[\"顶级域名\",{\"1\":{\"142\":1}}],[\"顶部对齐\",{\"1\":{\"71\":1}}],[\"层次结构\",{\"1\":{\"142\":1}}],[\"层实现的\",{\"1\":{\"132\":1}}],[\"存储在全世界的dns服务器上\",{\"1\":{\"142\":1}}],[\"转换为计算机用于网络通信的ip地址\",{\"1\":{\"142\":1}}],[\"介绍一下dns服务\",{\"0\":{\"142\":1}}],[\"断开连接\",{\"1\":{\"141\":1}}],[\"构建dom树\",{\"1\":{\"141\":1}}],[\"响应头和响应体\",{\"1\":{\"141\":1}}],[\"服务器可以在客户端请求之前主动发送资源\",{\"1\":{\"150\":1}}],[\"服务器接收到fin包后\",{\"1\":{\"144\":1}}],[\"服务器接收到syn包后\",{\"1\":{\"144\":1}}],[\"服务器接收到请求后\",{\"1\":{\"141\":1}}],[\"服务器在数据传输完成后\",{\"1\":{\"141\":1}}],[\"服务器处理完数据后\",{\"1\":{\"144\":1}}],[\"服务器处理完请求后\",{\"1\":{\"141\":1}}],[\"服务器处理请求\",{\"1\":{\"141\":1}}],[\"帧>数据包\",{\"1\":{\"141\":1}}],[\"路由器以及网线等其他的传输介质将数据发送到目标服务器\",{\"1\":{\"141\":1}}],[\"物理层\",{\"1\":{\"141\":2}}],[\"添加mac头部\",{\"1\":{\"141\":1}}],[\"添加报文头部\",{\"1\":{\"141\":1}}],[\"添加数据\",{\"1\":{\"98\":1}}],[\"封装数据\",{\"1\":{\"141\":1}}],[\"基于quic协议\",{\"1\":{\"150\":1}}],[\"基于二进制协议\",{\"1\":{\"150\":1}}],[\"基于tcp连接\",{\"1\":{\"150\":1}}],[\"基于报文\",{\"1\":{\"143\":1}}],[\"基于字节流\",{\"1\":{\"143\":1}}],[\"基于udp的传输层协议\",{\"1\":{\"141\":2}}],[\"基本语法\",{\"1\":{\"79\":1}}],[\"建立tcp连接\",{\"1\":{\"141\":1}}],[\"建表\",{\"1\":{\"115\":1}}],[\"端口\",{\"1\":{\"141\":1}}],[\"域名系统\",{\"1\":{\"142\":1}}],[\"域名\",{\"1\":{\"141\":1}}],[\"确认收到了服务器的关闭请求\",{\"1\":{\"144\":1}}],[\"确认收到了客户端的关闭请求\",{\"1\":{\"144\":1}}],[\"确认服务器的请求建立连接\",{\"1\":{\"144\":1}}],[\"确认\",{\"1\":{\"144\":2}}],[\"确定协议\",{\"1\":{\"141\":1}}],[\"确保通信双方是可信的\",{\"1\":{\"149\":1}}],[\"确保数据在传输过程中的机密性\",{\"1\":{\"149\":1}}],[\"确保数据在客户端和服务器之间传输过程中的安全性\",{\"1\":{\"149\":1}}],[\"确保数据传输的可靠性\",{\"1\":{\"140\":1}}],[\"确保服务端接收到了最终的确认\",{\"1\":{\"144\":1}}],[\"确保索引的创建和选择符合实际需求\",{\"1\":{\"112\":1}}],[\"确保非主键属性完全依赖于主键\",{\"1\":{\"103\":1}}],[\"确保每个属性都是原子性的\",{\"1\":{\"103\":1}}],[\"确保在创建实例时只有一个goroutine可以进入这个代码块\",{\"1\":{\"44\":1}}],[\"确保routergroup实现了接口irouter\",{\"1\":{\"39\":1}}],[\"浏览器地址栏通常会出现一个锁形图标\",{\"1\":{\"149\":1}}],[\"浏览器首先检查自己的dns缓存\",{\"1\":{\"142\":1}}],[\"浏览器首先解析url\",{\"1\":{\"141\":1}}],[\"浏览器向服务器发起tcp四次挥手\",{\"1\":{\"141\":1}}],[\"浏览器会请求html中引用的css文件\",{\"1\":{\"141\":1}}],[\"浏览器会创建页面的文档对象模型\",{\"1\":{\"94\":1}}],[\"浏览器接收到响应后\",{\"1\":{\"141\":1}}],[\"浏览器渲染页面\",{\"1\":{\"141\":1}}],[\"浏览器构建一个http请求\",{\"1\":{\"141\":1}}],[\"浏览器将启动tls握手过程\",{\"1\":{\"141\":1}}],[\"浏览器使用解析得到的ip地址\",{\"1\":{\"141\":1}}],[\"应用层\",{\"1\":{\"141\":1}}],[\"应用层常见协议\",{\"1\":{\"140\":1}}],[\"应该在设计数据库架构时合理规划和管理元数据锁的使用\",{\"1\":{\"119\":1}}],[\"七层协议模型\",{\"1\":{\"140\":1}}],[\"网上银行和在线支付系统\",{\"1\":{\"149\":1}}],[\"网络传输有一个特点\",{\"1\":{\"147\":1}}],[\"网络层\",{\"1\":{\"140\":2,\"141\":1}}],[\"网路层\",{\"1\":{\"141\":1}}],[\"网页浏览\",{\"1\":{\"143\":1}}],[\"网页内容\",{\"1\":{\"141\":1}}],[\"网页开发\",{\"1\":{\"87\":1}}],[\"网页按照元素的书写顺序依次排列\",{\"1\":{\"70\":1}}],[\"五层协议模型\",{\"1\":{\"140\":1}}],[\"五层七层是哪些\",{\"0\":{\"140\":1}}],[\"经典的网络分层模型有两种\",{\"1\":{\"140\":1}}],[\"经典网络分层\",{\"0\":{\"140\":1}}],[\"经过mysql的优化\",{\"1\":{\"106\":1}}],[\"计算机基础\",{\"0\":{\"163\":1}}],[\"计算机\",{\"2\":{\"152\":1}}],[\"计算机网络\",{\"0\":{\"139\":1}}],[\"计算操作也会导致索引失效\",{\"1\":{\"111\":1}}],[\"找对应的事务\",{\"1\":{\"136\":1}}],[\"找到分区的索引\",{\"1\":{\"58\":1}}],[\"找到目标值\",{\"1\":{\"52\":1}}],[\"去binlog\",{\"1\":{\"136\":1}}],[\"又有\",{\"1\":{\"136\":1}}],[\"又解决了什么问题\",{\"0\":{\"126\":1}}],[\"崩溃恢复的时候\",{\"1\":{\"136\":1}}],[\"叫\",{\"1\":{\"136\":1}}],[\"机器的物理内存满了的时候\",{\"1\":{\"135\":1}}],[\"处于prepare阶段\",{\"1\":{\"134\":1}}],[\"简单说下\",{\"1\":{\"132\":1}}],[\"追加写\",{\"1\":{\"132\":1}}],[\"空间固定会用完\",{\"1\":{\"132\":1}}],[\"空接口作为map值\",{\"1\":{\"37\":1}}],[\"空接口作为map的值\",{\"1\":{\"37\":1}}],[\"空接口作为函数参数\",{\"1\":{\"37\":1}}],[\"空接口作为函数的参数\",{\"1\":{\"37\":1}}],[\"空接口的应用\",{\"0\":{\"37\":1}}],[\"空接口的定义\",{\"0\":{\"36\":1}}],[\"空接口类型的变量可以存储任意类型的值\",{\"1\":{\"36\":1}}],[\"空接口是指没有定义任何方法的接口类型\",{\"1\":{\"36\":1}}],[\"空接口\",{\"0\":{\"35\":1},\"1\":{\"36\":1}}],[\"字段加\",{\"1\":{\"132\":1}}],[\"字符串索引\",{\"1\":{\"111\":1}}],[\"字符串型\",{\"1\":{\"36\":1}}],[\"字符串\",{\"1\":{\"21\":1}}],[\"给\",{\"1\":{\"132\":1}}],[\"给唯一索引加锁的时候\",{\"1\":{\"121\":1}}],[\"记录的是这个语句的原始逻辑\",{\"1\":{\"132\":1}}],[\"记录的是\",{\"1\":{\"132\":1}}],[\"记录有\",{\"1\":{\"127\":1}}],[\"生成报表等\",{\"1\":{\"130\":1}}],[\"增删改\",{\"1\":{\"130\":1}}],[\"增加了颜色属性\",{\"1\":{\"107\":1}}],[\"增加用户与网页的交互性\",{\"1\":{\"86\":1}}],[\"快速重传\",{\"1\":{\"146\":1}}],[\"快速排序函数\",{\"1\":{\"58\":1}}],[\"快速排序通常被认为是不稳定的排序算法\",{\"1\":{\"55\":1}}],[\"快速排序在实际应用中通常比冒泡排序更高效\",{\"1\":{\"55\":1}}],[\"快速排序的稳定性取决于具体的实现\",{\"1\":{\"55\":1}}],[\"快速排序的性能依赖于基准元素的选择\",{\"1\":{\"55\":1}}],[\"快速排序的平均时间复杂度为\",{\"1\":{\"55\":1}}],[\"快速排序的时间复杂度为\",{\"1\":{\"55\":2}}],[\"快速排序\",{\"0\":{\"58\":1},\"1\":{\"55\":2}}],[\"快照读取通常用于读取一致性要求较高的数据\",{\"1\":{\"130\":1}}],[\"快照读取不会受到正在进行的并发事务的修改的影响\",{\"1\":{\"130\":1}}],[\"快照读取都会返回事务开始之前的数据版本\",{\"1\":{\"130\":1}}],[\"快照读是指读取数据库中某个时间点的数据快照\",{\"1\":{\"130\":1}}],[\"快照读\",{\"1\":{\"130\":2}}],[\"快照度和当前读是什么\",{\"0\":{\"130\":1}}],[\"水平切分\",{\"1\":{\"129\":1}}],[\"垂直切分\",{\"1\":{\"129\":1}}],[\"年份\",{\"1\":{\"129\":1}}],[\"季度\",{\"1\":{\"129\":1}}],[\"月份\",{\"1\":{\"129\":1}}],[\"省市城市\",{\"1\":{\"129\":1}}],[\"国家\",{\"1\":{\"129\":1}}],[\"按照日期切分成order\",{\"1\":{\"129\":1}}],[\"按照颗粒度分\",{\"1\":{\"115\":1}}],[\"按位置切分\",{\"1\":{\"129\":1}}],[\"工作原理是查看当前事务是否在当前read\",{\"1\":{\"127\":1}}],[\"活跃事务id\",{\"1\":{\"127\":1}}],[\"采用read\",{\"1\":{\"127\":1}}],[\"两阶段提交是分布式系统中比较常见的一种事务提交算法\",{\"1\":{\"134\":1}}],[\"两阶段协议\",{\"1\":{\"115\":1}}],[\"两者最大的不同是创建read\",{\"1\":{\"127\":1}}],[\"√\",{\"1\":{\"126\":6}}],[\"×\",{\"1\":{\"126\":6}}],[\"另一个事务对该数据进行了修改或删除\",{\"1\":{\"125\":1}}],[\"另一个事务插入了新的数据行\",{\"1\":{\"125\":1}}],[\"指针\",{\"1\":{\"127\":1}}],[\"指针接收者实现接口\",{\"0\":{\"30\":1}}],[\"指一个事务多次读取同一数据\",{\"1\":{\"125\":1}}],[\"指一个事务在两次查询之间\",{\"1\":{\"125\":1}}],[\"指一个事务读取了另一个事务尚未提交的数据\",{\"1\":{\"125\":1}}],[\"隔离级别越高\",{\"1\":{\"124\":1}}],[\"隔离性\",{\"1\":{\"104\":1}}],[\"串行化\",{\"1\":{\"124\":1,\"126\":1}}],[\"重复\",{\"1\":{\"143\":1}}],[\"重新进行操作\",{\"1\":{\"122\":1}}],[\"重写原interface接口类型的less方法\",{\"1\":{\"34\":1}}],[\"乐观锁通常使用版本号或时间戳等机制实现\",{\"1\":{\"122\":1}}],[\"乐观锁是一种比较乐观的锁机制\",{\"1\":{\"122\":1}}],[\"乐观锁与悲观锁\",{\"0\":{\"122\":1}}],[\"悲观锁通常使用数据库的锁机制实现\",{\"1\":{\"122\":1}}],[\"悲观锁是一种比较保守的锁机制\",{\"1\":{\"122\":1}}],[\"必须先对其进行加锁\",{\"1\":{\"122\":1}}],[\"向右遍历时且最后一个值不满足等值条件的时候\",{\"1\":{\"121\":1}}],[\"退化为行锁\",{\"1\":{\"121\":1}}],[\"合理并发控制和锁管理策略也是确保元数据锁正常运行和性能的重要措施\",{\"1\":{\"119\":1}}],[\"减少了连接建立的延迟\",{\"1\":{\"150\":1}}],[\"减少了头部信息的传输大小\",{\"1\":{\"150\":1}}],[\"减少了队头阻塞问题\",{\"1\":{\"150\":1}}],[\"减少对元数据的并发访问冲突\",{\"1\":{\"119\":1}}],[\"减少回表次数\",{\"1\":{\"113\":1}}],[\"系统无法继续执行\",{\"1\":{\"118\":1}}],[\"死锁\",{\"1\":{\"118\":1}}],[\"阻塞和长时间等待\",{\"1\":{\"118\":1}}],[\"阻塞数据的增删改\",{\"1\":{\"115\":1}}],[\"防止并发事务之间的冲突\",{\"1\":{\"117\":1}}],[\"时间切分\",{\"1\":{\"129\":1}}],[\"时\",{\"1\":{\"117\":1}}],[\"时执行\",{\"1\":{\"90\":1}}],[\"key\",{\"0\":{\"121\":1},\"1\":{\"115\":2,\"121\":2}}],[\"kaiti\",{\"1\":{\"67\":1}}],[\"功能\",{\"1\":{\"115\":1}}],[\"影响并发\",{\"1\":{\"115\":1}}],[\"出现幻读也不是非常严重的问题\",{\"1\":{\"115\":1}}],[\"关于幻读的问题\",{\"1\":{\"115\":1}}],[\"关于反射的内容我们会在后续章节详细介绍\",{\"1\":{\"39\":1}}],[\"间隙锁虽然彼此不冲突\",{\"1\":{\"115\":1}}],[\"间隙锁\",{\"1\":{\"115\":1}}],[\"读取的数据是在事务开始之前的一个一致的时间点的数据\",{\"1\":{\"130\":1}}],[\"读视图中有min\",{\"1\":{\"127\":1}}],[\"读已提交\",{\"1\":{\"124\":1,\"126\":1}}],[\"读未提交\",{\"1\":{\"124\":1,\"126\":1}}],[\"读操作可能会获取共享锁\",{\"1\":{\"117\":1}}],[\"读提交解决脏读问题\",{\"1\":{\"128\":1}}],[\"读提交\",{\"1\":{\"115\":2}}],[\"读锁和写锁冲突\",{\"1\":{\"115\":1}}],[\"读锁和读锁不冲突\",{\"1\":{\"115\":1}}],[\"读锁\",{\"1\":{\"115\":1}}],[\"查询请求会被发送到配置的本地dns服务器\",{\"1\":{\"142\":1}}],[\"查询条件是二级索引时\",{\"1\":{\"115\":1}}],[\"查询效率低\",{\"1\":{\"108\":2}}],[\"查询效率高\",{\"1\":{\"107\":1,\"108\":2}}],[\"查询效率更高\",{\"1\":{\"107\":1}}],[\"查询效率不同\",{\"1\":{\"107\":1}}],[\"写入binlog\",{\"1\":{\"134\":1}}],[\"写入redo\",{\"1\":{\"134\":1}}],[\"写入到文件或者通过网络连接发送出去\",{\"1\":{\"25\":1}}],[\"写锁和写锁冲突\",{\"1\":{\"115\":1}}],[\"写锁\",{\"1\":{\"115\":1}}],[\"加密是一种安全协议\",{\"1\":{\"149\":1}}],[\"加锁出现冲突时\",{\"1\":{\"124\":1}}],[\"加锁后会发生什么\",{\"1\":{\"115\":1}}],[\"加锁的语句执行完成后\",{\"1\":{\"115\":1}}],[\"加锁慢\",{\"1\":{\"115\":1}}],[\"加锁\",{\"1\":{\"115\":1,\"130\":1}}],[\"加\",{\"1\":{\"115\":2}}],[\"什么时候需要是指当进行读操作时进行手动加锁或者是快照读升级为当前读的时候进行加锁\",{\"1\":{\"120\":1}}],[\"什么时候加什么锁\",{\"1\":{\"115\":1}}],[\"什么是ssl加密\",{\"0\":{\"149\":1}}],[\"什么是close\",{\"0\":{\"145\":1}}],[\"什么是两阶段提交\",{\"0\":{\"134\":1}}],[\"什么是wal机制\",{\"0\":{\"133\":1}}],[\"什么是mdl锁\",{\"0\":{\"116\":1}}],[\"什么是索引\",{\"0\":{\"105\":1}}],[\"已保证读写的正确性\",{\"1\":{\"115\":1}}],[\"元数据锁用于保护元数据的一致性\",{\"1\":{\"117\":1}}],[\"元数据锁\",{\"1\":{\"115\":1}}],[\"元素脱离文档流\",{\"1\":{\"69\":1}}],[\"元素选择器\",{\"1\":{\"67\":2}}],[\"元素到它最终的位置\",{\"1\":{\"58\":1}}],[\"客户端的身份\",{\"1\":{\"149\":1}}],[\"客户端在time\",{\"1\":{\"144\":1}}],[\"客户端接收到fin包后\",{\"1\":{\"144\":1}}],[\"客户端和服务器就建立了可靠的连接\",{\"1\":{\"144\":1}}],[\"客户端和服务器可以开始进行数据传输\",{\"1\":{\"144\":1}}],[\"客户端收到syn\",{\"1\":{\"144\":1}}],[\"客户端发送syn\",{\"1\":{\"144\":1}}],[\"客户端\",{\"1\":{\"142\":1}}],[\"客户端使用ip地址\",{\"1\":{\"142\":1}}],[\"客户端断开连接的时候自动释放\",{\"1\":{\"115\":1}}],[\"客户端脚本\",{\"1\":{\"87\":1}}],[\"改表\",{\"1\":{\"115\":1}}],[\"改变状态并通知观察者\",{\"1\":{\"49\":1}}],[\"命令是flush\",{\"1\":{\"115\":1}}],[\"锁住的是两个行之间的数据\",{\"1\":{\"115\":1}}],[\"锁会加在索引上\",{\"1\":{\"115\":1}}],[\"锁的分类\",{\"1\":{\"115\":1}}],[\"锁\",{\"0\":{\"114\":1}}],[\"直接过滤掉不满足条件的记录\",{\"1\":{\"113\":1}}],[\"直到指定条件不再满足为止\",{\"1\":{\"91\":1}}],[\"直到时间到了才会继续执行\",{\"1\":{\"16\":1}}],[\"直到某个case需要处理\",{\"1\":{\"14\":1}}],[\"直到另一方准备好\",{\"1\":{\"11\":1}}],[\"直到有数据可以接收\",{\"1\":{\"10\":1}}],[\"评估索引的效果\",{\"1\":{\"112\":1}}],[\"query\",{\"1\":{\"112\":1}}],[\"quick\",{\"1\":{\"140\":1}}],[\"quicksort\",{\"1\":{\"58\":2}}],[\"quic\",{\"1\":{\"140\":1}}],[\"quit\",{\"1\":{\"14\":8}}],[\"避免数据冲突和不一致性\",{\"1\":{\"117\":1}}],[\"避免创建过多的索引\",{\"1\":{\"112\":1}}],[\"避免过度索引\",{\"1\":{\"112\":1}}],[\"避免使用不合适的索引的操作符或函数操作\",{\"1\":{\"112\":1}}],[\"前端三大件\",{\"0\":{\"161\":1}}],[\"前端知识\",{\"2\":{\"74\":1,\"84\":1,\"95\":1,\"99\":1}}],[\"前缀索引等\",{\"1\":{\"112\":1}}],[\"覆盖索引\",{\"1\":{\"112\":1}}],[\"了解查询的特点和使用频率\",{\"1\":{\"112\":1}}],[\"仔细分析查询语句和数据模式\",{\"1\":{\"112\":1}}],[\"隐式转换\",{\"1\":{\"111\":1}}],[\"若是int类型的索引\",{\"1\":{\"111\":1}}],[\"若是想让索引生效\",{\"1\":{\"111\":1}}],[\"若为true则表示断言成功\",{\"1\":{\"39\":1}}],[\"条件中有or\",{\"1\":{\"111\":1}}],[\"条件语句是编程中常见的结构\",{\"1\":{\"90\":1}}],[\"条件语句\",{\"0\":{\"90\":1}}],[\"尽量使用查询条件能够命中索引\",{\"1\":{\"112\":1}}],[\"尽量多的使用覆盖索引\",{\"1\":{\"110\":1}}],[\"尽管我们大部分会将它放在最后\",{\"1\":{\"14\":1}}],[\"怎么减少回表\",{\"0\":{\"110\":1}}],[\"摸不到\",{\"1\":{\"109\":1}}],[\"性能就会下降\",{\"1\":{\"124\":1}}],[\"性能测试和监测\",{\"1\":{\"112\":1}}],[\"性能较好\",{\"1\":{\"108\":1}}],[\"性能考虑\",{\"1\":{\"44\":1}}],[\"导致前一次读取和后一次读取的结果不一致\",{\"1\":{\"125\":1}}],[\"导致前一次查询和后一次查询的结果不一致\",{\"1\":{\"125\":1}}],[\"导致数据库对象定义的不一致性\",{\"1\":{\"118\":1}}],[\"导致死锁的原因\",{\"1\":{\"115\":1}}],[\"导致性能下降\",{\"1\":{\"108\":1}}],[\"导致不必要的运行时损耗\",{\"1\":{\"39\":1}}],[\"担当进行写操作的时候\",{\"1\":{\"108\":1}}],[\"聚集索引数据行的物理顺序和索引的逻辑顺序一样\",{\"1\":{\"108\":1}}],[\"聚集索引的数据和索引放在一起\",{\"1\":{\"108\":1,\"109\":1}}],[\"聚集索引和非聚集索引的区别\",{\"0\":{\"108\":1}}],[\"聚焦事件\",{\"1\":{\"93\":1}}],[\"适合传输敏感信息\",{\"1\":{\"151\":1}}],[\"适合范围查询\",{\"1\":{\"107\":1}}],[\"适用场景\",{\"1\":{\"143\":2}}],[\"适用于对数据完整性要求相对较低\",{\"1\":{\"143\":1}}],[\"适用于对数据完整性要求高的场景\",{\"1\":{\"143\":1}}],[\"适用于需要快速传输但可以容忍一定数据丢失的应用\",{\"1\":{\"140\":1}}],[\"适用于实例化过程简单\",{\"1\":{\"44\":1}}],[\"适用于实例化过程比较耗时\",{\"1\":{\"44\":1}}],[\"适用与大多数html元素的属性\",{\"1\":{\"79\":1}}],[\"他们有以下区别\",{\"1\":{\"107\":1}}],[\"红黑树是二叉树的优化\",{\"1\":{\"107\":1}}],[\"红黑树和二叉树是每个节点最多有两个子节点的树结构\",{\"1\":{\"107\":1}}],[\"二是确保被动关闭方在规定的时间内正常的关闭连接\",{\"1\":{\"145\":1}}],[\"二叉树\",{\"0\":{\"107\":1}}],[\"二分查找\",{\"0\":{\"52\":1}}],[\"非聚集索引数据行的物理顺序和索引的逻辑顺序不一样\",{\"1\":{\"108\":1}}],[\"非聚集索引的索引和主键id放在一起\",{\"1\":{\"108\":1,\"109\":1}}],[\"非叶子节点上存放的是索引\",{\"1\":{\"106\":1}}],[\"非常感谢你的访问\",{\"1\":{\"0\":1}}],[\"维护起来成本很高且需要占用更多的存储空间\",{\"1\":{\"105\":1}}],[\"缺点\",{\"1\":{\"105\":1}}],[\"联合索引\",{\"1\":{\"105\":1,\"112\":1}}],[\"磁盘空间\",{\"1\":{\"104\":1}}],[\"行记录锁\",{\"1\":{\"115\":1}}],[\"行锁在事务需要的时候进行加锁\",{\"1\":{\"120\":1}}],[\"行锁在什么时候加锁\",{\"0\":{\"120\":1}}],[\"行锁是在需要的时候加上锁\",{\"1\":{\"115\":1}}],[\"行锁会死锁\",{\"1\":{\"115\":1}}],[\"行锁\",{\"1\":{\"115\":1}}],[\"行级锁定\",{\"1\":{\"104\":1}}],[\"行内元素不能包括块级元素\",{\"1\":{\"82\":1}}],[\"行内元素通常在一行内呈现\",{\"1\":{\"82\":1}}],[\"行内元素通常用于添加文本样式或为文本中的一部分应用样式\",{\"1\":{\"82\":1}}],[\"行内元素\",{\"0\":{\"82\":1}}],[\"行内元素一行放好多个元素\",{\"1\":{\"70\":1}}],[\"行内元素和行内块元素\",{\"1\":{\"67\":1}}],[\"幻读和不可重复读是如何解决的\",{\"0\":{\"128\":1}}],[\"幻读和不可重复读是数据库并发控制中的三个问题\",{\"1\":{\"125\":1}}],[\"幻读和不可重复读是什么\",{\"0\":{\"125\":1}}],[\"幻读\",{\"1\":{\"104\":1,\"125\":1,\"126\":1}}],[\"脏读\",{\"0\":{\"125\":1,\"128\":1},\"1\":{\"104\":1,\"125\":2,\"126\":1}}],[\"日志\",{\"0\":{\"131\":1},\"1\":{\"104\":1}}],[\"持久性\",{\"1\":{\"104\":1}}],[\"原子性\",{\"1\":{\"104\":1}}],[\"拥有acid四大特性\",{\"1\":{\"104\":1}}],[\"事务必须要等到前一个事务执行完成\",{\"1\":{\"124\":1}}],[\"事务在执行中用到的数据与最开始所看到的数据是一样的\",{\"1\":{\"124\":1}}],[\"事务修改数据\",{\"1\":{\"117\":1}}],[\"事务\",{\"0\":{\"123\":1},\"1\":{\"104\":1,\"127\":1}}],[\"事务支持\",{\"1\":{\"104\":1}}],[\"事件是文档或浏览器窗口中发生的特定瞬间\",{\"1\":{\"93\":1}}],[\"事件\",{\"0\":{\"93\":1},\"1\":{\"93\":1}}],[\"提交事务\",{\"1\":{\"134\":1}}],[\"提高了网络适应性\",{\"1\":{\"150\":1}}],[\"提高了连接的稳定性和效率\",{\"1\":{\"150\":1}}],[\"提高了解析效率\",{\"1\":{\"150\":1}}],[\"提高效率\",{\"1\":{\"146\":1}}],[\"提高传输效率\",{\"1\":{\"140\":1}}],[\"提高系统性能\",{\"1\":{\"122\":1}}],[\"提高数据库的数据的完整性和可靠性\",{\"1\":{\"103\":1}}],[\"提供更好的拥塞控制和网络恢复机制\",{\"1\":{\"150\":1}}],[\"提供了更强的安全性和更多的功能\",{\"1\":{\"149\":1}}],[\"提供的\",{\"1\":{\"142\":1}}],[\"提供域名解析服务\",{\"1\":{\"142\":1}}],[\"提供全双工通信渠道的协议\",{\"1\":{\"140\":1}}],[\"提供类似tcp的可靠性和有序性\",{\"1\":{\"140\":1}}],[\"提供无连接的\",{\"1\":{\"140\":1}}],[\"提供可靠的\",{\"1\":{\"140\":1}}],[\"提供用于增加或删除观察者的方法\",{\"1\":{\"48\":1}}],[\"提供应用的性能\",{\"1\":{\"12\":1}}],[\"需要等待响应后才能发送下一个请求\",{\"1\":{\"150\":1}}],[\"需要暂停更新操作\",{\"1\":{\"135\":1}}],[\"需要通过死锁检测和解决机制来解决\",{\"1\":{\"118\":1}}],[\"需要采用元数据锁\",{\"1\":{\"117\":1}}],[\"需要使用锁来协调并发事务之间的访问\",{\"1\":{\"117\":1}}],[\"需要注意什么\",{\"1\":{\"115\":1}}],[\"需要注意的是\",{\"1\":{\"14\":1}}],[\"需要更少的磁盘i\",{\"1\":{\"107\":1}}],[\"需要将表进行拆分\",{\"1\":{\"103\":2}}],[\"索引上的等值查询\",{\"1\":{\"121\":2}}],[\"索引下推是可以在索引遍历过程中\",{\"1\":{\"113\":1}}],[\"索引下推是什么\",{\"0\":{\"113\":1}}],[\"索引类型不匹配\",{\"1\":{\"111\":1}}],[\"索引失效的情况\",{\"1\":{\"111\":1}}],[\"索引可分为主键索引与普通索引\",{\"1\":{\"105\":1}}],[\"索引是一种帮助mysql高效获取数据的数据结构\",{\"1\":{\"105\":1}}],[\"索引方式\",{\"1\":{\"104\":1}}],[\"索引\",{\"0\":{\"102\":1},\"1\":{\"116\":1,\"117\":1}}],[\"编辑\",{\"1\":{\"98\":1}}],[\"未命名\",{\"1\":{\"98\":1}}],[\"未找到目标值\",{\"1\":{\"52\":1}}],[\"插入\",{\"1\":{\"117\":1}}],[\"插入意向锁\",{\"1\":{\"115\":1}}],[\"插入列节点\",{\"1\":{\"98\":1}}],[\"插入行节点\",{\"1\":{\"98\":1}}],[\"新增数据\",{\"1\":{\"98\":1}}],[\"创建事务id\",{\"1\":{\"127\":1}}],[\"创建文本节点\",{\"1\":{\"94\":1}}],[\"创建元素节点\",{\"1\":{\"94\":1}}],[\"创建属性节点\",{\"1\":{\"94\":1}}],[\"替换子节点\",{\"1\":{\"94\":1}}],[\"删除\",{\"1\":{\"98\":1,\"117\":1}}],[\"删除子节点\",{\"1\":{\"94\":1}}],[\"删除和通知观察者的方法\",{\"1\":{\"49\":1}}],[\"把数据保存到内存\",{\"1\":{\"134\":1}}],[\"把查到的每一行都加锁\",{\"1\":{\"115\":1}}],[\"把新的子节点添加到指定节点\",{\"1\":{\"94\":1}}],[\"把所有会叫的动物当成sayer类型来处理\",{\"1\":{\"25\":1}}],[\"开始解析html文档\",{\"1\":{\"141\":1}}],[\"开始前channel和expression必选先求值出来\",{\"1\":{\"9\":1}}],[\"开销大\",{\"1\":{\"115\":1}}],[\"开头\",{\"1\":{\"111\":1}}],[\"开发者可以使用javascript来操作这个树状结构\",{\"1\":{\"94\":1}}],[\"失去焦点\",{\"1\":{\"93\":1}}],[\"失焦事件\",{\"1\":{\"93\":1}}],[\"获取ip地址\",{\"1\":{\"142\":1}}],[\"获取负责该顶级域\",{\"1\":{\"142\":1}}],[\"获取插入位置\",{\"1\":{\"98\":1}}],[\"获取焦点\",{\"1\":{\"93\":1}}],[\"获取单例对象\",{\"1\":{\"44\":2}}],[\"移开光标\",{\"1\":{\"93\":1}}],[\"光标聚集\",{\"1\":{\"93\":1}}],[\"文件写到一定大小后会切换到下一个\",{\"1\":{\"132\":1}}],[\"文档节点是整个文档树的根节点\",{\"1\":{\"94\":1}}],[\"文档树是整个文档的层次结构表示\",{\"1\":{\"94\":1}}],[\"文档流\",{\"1\":{\"70\":1}}],[\"文本框选中\",{\"1\":{\"93\":1}}],[\"文本内容改变事件\",{\"1\":{\"93\":1}}],[\"鼠标移出\",{\"1\":{\"93\":1}}],[\"鼠标经过\",{\"1\":{\"93\":1}}],[\"页面的加载等\",{\"1\":{\"93\":1}}],[\"键盘的按下\",{\"1\":{\"93\":1}}],[\"局部变量\",{\"1\":{\"92\":1}}],[\"全库逻辑备份\",{\"1\":{\"115\":1}}],[\"全文索引等\",{\"1\":{\"105\":1}}],[\"全局锁\",{\"1\":{\"115\":1}}],[\"全局打印\",{\"1\":{\"92\":2}}],[\"全局变量\",{\"1\":{\"92\":1}}],[\"全称是\",{\"1\":{\"76\":1}}],[\"作为请求的一部分\",{\"1\":{\"151\":1}}],[\"作为一种客户端脚本语言\",{\"1\":{\"86\":1}}],[\"作为一个终身学习者\",{\"1\":{\"0\":1}}],[\"作用域\",{\"1\":{\"92\":1}}],[\"参数在请求消息体中传输\",{\"1\":{\"151\":1}}],[\"参数在url中明文传输\",{\"1\":{\"151\":1}}],[\"参数可以不写\",{\"1\":{\"92\":1}}],[\"参数2\",{\"1\":{\"92\":1}}],[\"参数1\",{\"1\":{\"92\":1}}],[\"参数列表和返回值列表中的参数变量名可以省略\",{\"1\":{\"23\":1}}],[\"参数列表\",{\"1\":{\"23\":1}}],[\"参数列表2\",{\"1\":{\"23\":1}}],[\"参数列表1\",{\"1\":{\"23\":1}}],[\"函数有定义\",{\"1\":{\"92\":1}}],[\"函数内打印\",{\"1\":{\"92\":2}}],[\"函数体\",{\"1\":{\"92\":1}}],[\"函数是一段可重复使用的代码块\",{\"1\":{\"92\":1}}],[\"函数\",{\"0\":{\"92\":1}}],[\"会立即重传丢失的数据包\",{\"1\":{\"146\":1}}],[\"会发送一个ack\",{\"1\":{\"144\":1}}],[\"会发送一个syn\",{\"1\":{\"144\":1}}],[\"会发送一个http响应给浏览器\",{\"1\":{\"141\":1}}],[\"会话层\",{\"1\":{\"140\":1}}],[\"会按顺序扫描\",{\"1\":{\"136\":1}}],[\"会寻找上一个版本的事务id\",{\"1\":{\"127\":1}}],[\"会引发锁冲突和阻塞\",{\"1\":{\"118\":1}}],[\"会获取相应的锁来确保事务的原子性和一致性\",{\"1\":{\"117\":1}}],[\"会花费极大的开销\",{\"1\":{\"115\":1}}],[\"会走全表\",{\"1\":{\"115\":1}}],[\"会回到主键索引加锁\",{\"1\":{\"115\":1}}],[\"会在指定的条件为真时执行代码块\",{\"1\":{\"91\":1}}],[\"会叫的类型\",{\"1\":{\"25\":1}}],[\"循环体\",{\"1\":{\"91\":2}}],[\"循环条件\",{\"1\":{\"91\":2}}],[\"循环语句用于重复执行一段代码\",{\"1\":{\"91\":1}}],[\"循环语句\",{\"0\":{\"91\":1}}],[\"晚上好\",{\"1\":{\"90\":1}}],[\"下\",{\"1\":{\"115\":1}}],[\"下午好\",{\"1\":{\"90\":1}}],[\"下面是它们的主要特点和区别\",{\"1\":{\"143\":1}}],[\"下面是二级域名\",{\"1\":{\"142\":1}}],[\"下面是用go实现的代码示例\",{\"1\":{\"49\":1}}],[\"下面是两者的主要区别\",{\"1\":{\"44\":1}}],[\"下面是一个饿汉式单例模式的实现\",{\"1\":{\"44\":1}}],[\"下面是一个使用sync\",{\"1\":{\"44\":1}}],[\"下面的示例代码中\",{\"1\":{\"38\":1}}],[\"下面的代码可以在程序编译阶段验证某一结构体是否满足特定的接口类型\",{\"1\":{\"39\":1}}],[\"下面的代码无法通过编译\",{\"1\":{\"30\":1}}],[\"下面的代码片段定义了猫和狗\",{\"1\":{\"25\":1}}],[\"下面的例子中main\",{\"1\":{\"18\":1}}],[\"下面的例子中ticker每500毫秒触发一次\",{\"1\":{\"16\":1}}],[\"下面的例子中第二行会阻塞2秒钟左右的时间\",{\"1\":{\"16\":1}}],[\"下面这个例子我们会在2秒后往channel\",{\"1\":{\"15\":1}}],[\"执行后端脚本等\",{\"1\":{\"141\":1}}],[\"执行特定任务\",{\"1\":{\"92\":1}}],[\"执行这里的代码\",{\"1\":{\"90\":3,\"91\":2,\"92\":1}}],[\"执行二分查找算法\",{\"1\":{\"52\":1}}],[\"语法如下\",{\"1\":{\"90\":2,\"91\":2}}],[\"语言中接口是一个非常重要的概念和特性\",{\"1\":{\"39\":1}}],[\"语言中一个类型只要实现了接口中规定的所有方法\",{\"1\":{\"24\":1}}],[\"控制语句\",{\"0\":{\"89\":1}}],[\"后续的网络世界会发生什么\",{\"0\":{\"141\":1}}],[\"后端开发\",{\"1\":{\"87\":1}}],[\"后代选择器\",{\"1\":{\"67\":2}}],[\"使得网页具有更强的交互性和动态性\",{\"1\":{\"87\":1}}],[\"使用dns轮询可以分发请求到多个服务器\",{\"1\":{\"142\":1}}],[\"使用该地址建立与目标服务器的连接\",{\"1\":{\"142\":1}}],[\"使用ssh协议进行文件传输\",{\"1\":{\"140\":1}}],[\"使用三次握手建立连接\",{\"1\":{\"140\":1}}],[\"使用合适的隔离级别\",{\"1\":{\"119\":1}}],[\"使用索引提示\",{\"1\":{\"112\":2}}],[\"使用函数\",{\"1\":{\"111\":1}}],[\"使用计算或函数\",{\"1\":{\"111\":1}}],[\"使用node\",{\"1\":{\"87\":1}}],[\"使用场景\",{\"1\":{\"44\":1,\"115\":1}}],[\"使用\",{\"1\":{\"44\":2}}],[\"使用这个单例的方法如下\",{\"1\":{\"44\":2}}],[\"使用空接口实现可以保存任意值的字典\",{\"1\":{\"37\":1}}],[\"使用空接口实现可以接收任意类型的函数参数\",{\"1\":{\"37\":1}}],[\"使用指针接收者定义move方法实现mover接口\",{\"1\":{\"30\":1}}],[\"使用值接收者实现接口之后\",{\"1\":{\"29\":1}}],[\"使用值接收者定义move方法实现mover接口\",{\"1\":{\"29\":1}}],[\"使用微信付款\",{\"1\":{\"26\":1}}],[\"使用支付宝付款\",{\"1\":{\"26\":1}}],[\"使用接口类型能够实现代码的抽象和解耦\",{\"1\":{\"39\":1}}],[\"使用接口类型通常能够让我们写出更加通用和灵活的代码\",{\"1\":{\"25\":1}}],[\"使用接口类型就可以实现这个目标\",{\"1\":{\"25\":1}}],[\"使用make初始化channel\",{\"1\":{\"8\":1}}],[\"与服务器协商加密参数\",{\"1\":{\"141\":1}}],[\"与html和css协同工作\",{\"1\":{\"87\":1}}],[\"与html和css不同\",{\"1\":{\"86\":1}}],[\"与志同道合的朋友们交流思想\",{\"1\":{\"0\":1}}],[\"面向连接\",{\"1\":{\"143\":1}}],[\"面向连接的字节流服务\",{\"1\":{\"140\":1}}],[\"面向对象的脚本语言\",{\"1\":{\"86\":1}}],[\"面向接口编程\",{\"0\":{\"26\":1}}],[\"解封装数据\",{\"1\":{\"141\":1}}],[\"解析url\",{\"1\":{\"141\":1}}],[\"解决了tcp在某些网络环境下的队头阻塞问题\",{\"1\":{\"150\":1}}],[\"解决方法就是间隙锁\",{\"1\":{\"115\":1}}],[\"解决幻读的问题\",{\"1\":{\"115\":1}}],[\"解锁时机\",{\"1\":{\"115\":1}}],[\"解释型\",{\"1\":{\"86\":1}}],[\"解耦\",{\"1\":{\"48\":1}}],[\"上午好\",{\"1\":{\"90\":1}}],[\"上传\",{\"1\":{\"83\":1}}],[\"上面的代码中也可以使用var\",{\"1\":{\"39\":1}}],[\"上面的代码执行结果如下\",{\"1\":{\"33\":1}}],[\"上面的例子中如果把close\",{\"1\":{\"13\":1}}],[\"请详细介绍一下tcp的三次握手和四次挥手机制\",{\"0\":{\"144\":1}}],[\"请求头\",{\"1\":{\"141\":1}}],[\"请输入联系方式\",{\"1\":{\"98\":1}}],[\"请输入姓名\",{\"1\":{\"98\":1}}],[\"请输入密码\",{\"1\":{\"83\":1}}],[\"请输入用户名\",{\"1\":{\"83\":1}}],[\"请牢记接口是一种类型\",{\"1\":{\"39\":1}}],[\"强调文本等\",{\"1\":{\"82\":1}}],[\"常见的事件如下\",{\"1\":{\"93\":1}}],[\"常见的行内元素包括span\",{\"1\":{\"82\":1}}],[\"常见的块级元素包括div\",{\"1\":{\"81\":1}}],[\"常用文本标签\",{\"0\":{\"78\":1}}],[\"将域名解析为ip地址\",{\"1\":{\"141\":1}}],[\"将域名转换为ip地址的系统\",{\"1\":{\"140\":1}}],[\"将这个操作记录更新到磁盘里面\",{\"1\":{\"133\":1}}],[\"将常用字段设置为主键索引\",{\"1\":{\"110\":1}}],[\"将内容分割成逻辑块\",{\"1\":{\"81\":1}}],[\"将其移到一边直到左边缘或右边缘触及包含块或另一个浮动框的边缘\",{\"1\":{\"70\":1}}],[\"列表\",{\"1\":{\"81\":1}}],[\"块级元素通常会从新行开始\",{\"1\":{\"81\":1}}],[\"块级元素通常用于组织和布局页面的主要结构和内容\",{\"1\":{\"81\":1}}],[\"块级就是占一行\",{\"1\":{\"70\":1}}],[\"块元素\",{\"0\":{\"81\":1}}],[\"块元素与行内元素\",{\"0\":{\"80\":1}}],[\"规定元素的行内样式\",{\"1\":{\"79\":1}}],[\"描述\",{\"1\":{\"79\":1,\"93\":1,\"94\":1}}],[\"双标签用于有内容的元素\",{\"1\":{\"76\":1}}],[\"单列索引\",{\"1\":{\"105\":1}}],[\"单标签用于没有内容的元素\",{\"1\":{\"76\":1}}],[\"单例饿汉并发安全\",{\"1\":{\"44\":1}}],[\"单例模式的关键是私有化其构造函数\",{\"1\":{\"43\":1}}],[\"单例模式在很多情况下都是有用的\",{\"1\":{\"43\":1}}],[\"单例模式\",{\"1\":{\"43\":1}}],[\"单例模型简介\",{\"0\":{\"43\":1}}],[\"单例模型\",{\"0\":{\"42\":1}}],[\"区别\",{\"1\":{\"76\":1}}],[\"区别于我们在之前章节提到的那些具体类型\",{\"1\":{\"39\":1}}],[\"分发网络流量或提供高可用性\",{\"1\":{\"142\":1}}],[\"分布式数据库\",{\"1\":{\"142\":1}}],[\"分为物理层\",{\"1\":{\"140\":2}}],[\"分为表锁和元数据锁\",{\"1\":{\"115\":1}}],[\"分析查询语句和数据模式\",{\"1\":{\"112\":1}}],[\"分别是\",{\"1\":{\"103\":1}}],[\"分别对分区前的和分区后的序列进行递归排序\",{\"1\":{\"58\":1}}],[\"分割线标签\",{\"1\":{\"76\":1}}],[\"换行标签\",{\"1\":{\"76\":1}}],[\"除了双标签\",{\"1\":{\"76\":1}}],[\"除了编程\",{\"1\":{\"0\":1}}],[\"包给客户端\",{\"1\":{\"144\":1}}],[\"包给服务器\",{\"1\":{\"144\":3}}],[\"包括状态码\",{\"1\":{\"141\":1}}],[\"包括请求行\",{\"1\":{\"141\":1}}],[\"包括\",{\"1\":{\"112\":1}}],[\"包括开始标签和结束标签\",{\"1\":{\"76\":1}}],[\"包含接收方和发送方的mac地址\",{\"1\":{\"141\":1}}],[\"包含源地址ip和目标地址ip\",{\"1\":{\"141\":1}}],[\"包含选择器\",{\"1\":{\"67\":1}}],[\"包含支付方法的接口类型\",{\"1\":{\"26\":1}}],[\"链接等等\",{\"1\":{\"76\":1}}],[\"固定在屏幕上的位置\",{\"1\":{\"73\":1}}],[\"固定定位\",{\"1\":{\"73\":1}}],[\"绝对定位\",{\"1\":{\"73\":1}}],[\"具备行内块元素特性\",{\"1\":{\"71\":1}}],[\"具体而言\",{\"1\":{\"134\":1}}],[\"具体来说\",{\"1\":{\"133\":1}}],[\"具体的\",{\"1\":{\"49\":2}}],[\"具体代码示例如下\",{\"1\":{\"32\":1}}],[\"脱离标准流\",{\"1\":{\"71\":1}}],[\"脱标\",{\"1\":{\"71\":1}}],[\"自适应布局\",{\"1\":{\"70\":1}}],[\"定位方式\",{\"0\":{\"73\":1}}],[\"定位布局可以精准定位\",{\"1\":{\"72\":1}}],[\"定位\",{\"0\":{\"72\":1},\"1\":{\"70\":1}}],[\"定义元素唯一的id\",{\"1\":{\"79\":1}}],[\"定义了一个mover接口类型和两个实现了该接口的dog和car结构体类型\",{\"1\":{\"38\":1}}],[\"定义了一个对象的行为规范\",{\"1\":{\"21\":1}}],[\"定义通过索引对元素排序的接口类型\",{\"1\":{\"34\":1}}],[\"定义一个全局的sync\",{\"1\":{\"44\":1}}],[\"定义一个接口类型\",{\"1\":{\"28\":1}}],[\"定义一个包含write方法的writer接口\",{\"1\":{\"23\":1}}],[\"普通流\",{\"1\":{\"70\":1}}],[\"标准化\",{\"1\":{\"103\":1}}],[\"标准流是由块级元素和行内元素按照默认规定的方式来排列\",{\"1\":{\"70\":1}}],[\"标准流\",{\"1\":{\"70\":1}}],[\"标题\",{\"1\":{\"81\":1}}],[\"标签通常成对出现\",{\"1\":{\"76\":1}}],[\"标签\",{\"1\":{\"76\":1}}],[\"标记是否发生了交换\",{\"1\":{\"55\":1}}],[\"传输控制协议\",{\"1\":{\"146\":1}}],[\"传输层常见协议\",{\"1\":{\"140\":1}}],[\"传输层\",{\"1\":{\"140\":1,\"141\":2}}],[\"传输层和应用层\",{\"1\":{\"140\":1}}],[\"传统网页布局五种方式\",{\"0\":{\"70\":1}}],[\"传入的函数只会被执行一次\",{\"1\":{\"44\":1}}],[\"浮动的三大特性\",{\"0\":{\"71\":1}}],[\"浮动是相对于父元素浮动\",{\"1\":{\"70\":1}}],[\"浮动属性用于创建浮动框\",{\"1\":{\"70\":1}}],[\"浮动\",{\"0\":{\"69\":1},\"1\":{\"70\":1}}],[\"围绕在边框的外部\",{\"1\":{\"68\":1}}],[\"围绕在内边距的外部\",{\"1\":{\"68\":1}}],[\"围绕在内容的内部\",{\"1\":{\"68\":1}}],[\"外键约束\",{\"1\":{\"104\":1}}],[\"外联样式\",{\"1\":{\"87\":1}}],[\"外边距\",{\"1\":{\"68\":1}}],[\"外部样式表\",{\"1\":{\"66\":1}}],[\"边框\",{\"1\":{\"68\":1}}],[\"盒子包含的实际内容\",{\"1\":{\"68\":1}}],[\"盒子模型\",{\"0\":{\"68\":1}}],[\"图像\",{\"1\":{\"76\":1}}],[\"图片等资源\",{\"1\":{\"141\":1}}],[\"图片等\",{\"1\":{\"68\":1}}],[\"图片不见了\",{\"1\":{\"67\":1,\"79\":2}}],[\"图形\",{\"1\":{\"26\":1}}],[\"选中第一个元素\",{\"1\":{\"67\":1}}],[\"选择适合的请求方法\",{\"1\":{\"151\":1}}],[\"选择性确认\",{\"1\":{\"146\":1}}],[\"选择合适的索引策略\",{\"1\":{\"112\":1}}],[\"选择器是css中的关键部分\",{\"1\":{\"67\":1}}],[\"选择器的声明中可以写无数条属性\",{\"1\":{\"65\":1}}],[\"选择器\",{\"0\":{\"67\":1},\"1\":{\"65\":1,\"70\":1}}],[\"选择排序\",{\"0\":{\"61\":1},\"1\":{\"61\":1}}],[\"选择最后一个元素作为基准\",{\"1\":{\"58\":1}}],[\"选择冒泡排序或其它稳定的排序算法\",{\"1\":{\"55\":1}}],[\"选择哪种单例模式实现方式取决于具体的需求和场景\",{\"1\":{\"44\":1}}],[\"楷体\",{\"1\":{\"67\":1}}],[\"伪类选择器\",{\"1\":{\"67\":2}}],[\"兄弟选择器\",{\"1\":{\"67\":1}}],[\"子元素选择器\",{\"1\":{\"67\":2}}],[\"优化查询语句的结构和条件\",{\"1\":{\"112\":1}}],[\"优化查询语句\",{\"1\":{\"112\":1}}],[\"优点\",{\"1\":{\"105\":1}}],[\"优先级高的会覆盖优先级低的样式\",{\"1\":{\"66\":1}}],[\"优惠券\",{\"1\":{\"26\":1}}],[\"内边距\",{\"1\":{\"68\":1}}],[\"内容位于这两个标签之间\",{\"1\":{\"76\":1}}],[\"内容\",{\"1\":{\"68\":1}}],[\"内部样式表\",{\"1\":{\"66\":1}}],[\"内联样式弹窗\",{\"1\":{\"87\":1}}],[\"内联样式>内部样式表>外部样式表\",{\"1\":{\"66\":1}}],[\"内联样式\",{\"1\":{\"66\":1}}],[\"内建的close方法可以用来关闭channel\",{\"1\":{\"17\":1}}],[\"示例说明\",{\"0\":{\"97\":1}}],[\"示例\",{\"1\":{\"65\":1}}],[\"都应该使用https来保证通信安全\",{\"1\":{\"148\":1}}],[\"都有什么作用\",{\"0\":{\"145\":1}}],[\"都有哪些类型\",{\"0\":{\"105\":1}}],[\"都处于完成状态\",{\"1\":{\"134\":1}}],[\"都会加上间隙锁\",{\"1\":{\"115\":1}}],[\"都会返回相同的singleton实例\",{\"1\":{\"44\":1}}],[\"都会返回同一个singleton实例\",{\"1\":{\"44\":1}}],[\"都为false时执行的代码块\",{\"1\":{\"90\":1}}],[\"都可以以英文分号结尾\",{\"1\":{\"65\":1}}],[\"声明中的所有属性和值都是以键值对的形式出现的\",{\"1\":{\"65\":1}}],[\"声明的每一行属性\",{\"1\":{\"65\":1}}],[\"声明一个空接口类型变量x\",{\"1\":{\"36\":1}}],[\"声明一个mover类型的变量x\",{\"1\":{\"29\":1}}],[\"声明一个dog类型变量b\",{\"1\":{\"27\":1}}],[\"声明一个cat类型变量a\",{\"1\":{\"27\":1}}],[\"声明一个sayer类型的变量x\",{\"1\":{\"27\":1}}],[\"多个规则可以组合在一起\",{\"1\":{\"65\":1}}],[\"多个类型实现统一接口\",{\"0\":{\"33\":1}}],[\"属性\",{\"1\":{\"79\":1}}],[\"属性在html中起到非常重要的作用\",{\"1\":{\"79\":1}}],[\"属性名称不区分大小写\",{\"1\":{\"79\":1}}],[\"属性名=\",{\"1\":{\"79\":1}}],[\"属性名\",{\"1\":{\"68\":1}}],[\"属性值对大小写敏感\",{\"1\":{\"79\":1}}],[\"属性值\",{\"1\":{\"79\":1}}],[\"属性值2\",{\"1\":{\"65\":1}}],[\"属性值1\",{\"1\":{\"65\":1}}],[\"属性2\",{\"1\":{\"65\":1}}],[\"属性1\",{\"1\":{\"65\":1}}],[\"属性和属性值组成\",{\"1\":{\"65\":1}}],[\"属于行为型模式\",{\"1\":{\"48\":1}}],[\"更安全且没有长度限制\",{\"1\":{\"151\":1}}],[\"更安全\",{\"1\":{\"151\":1}}],[\"更有效地管理资源\",{\"1\":{\"150\":1}}],[\"更新或删除数据\",{\"1\":{\"151\":1}}],[\"更新\",{\"1\":{\"117\":1}}],[\"更新最小值的索引\",{\"1\":{\"61\":1}}],[\"更注重\",{\"1\":{\"21\":1}}],[\"假设当前位置为最小值的索引\",{\"1\":{\"61\":1}}],[\"平均和理想n\",{\"1\":{\"58\":1}}],[\"平均情况\",{\"1\":{\"55\":2}}],[\"划分函数\",{\"1\":{\"58\":1}}],[\"归并排序等\",{\"1\":{\"55\":1}}],[\"稳定性是排序算法的一个重要属性\",{\"1\":{\"55\":1}}],[\"稳定性指的是在排序过程中\",{\"1\":{\"55\":1}}],[\"有序性\",{\"1\":{\"143\":1}}],[\"有什么区别\",{\"0\":{\"143\":1}}],[\"有什么优缺点\",{\"0\":{\"105\":1}}],[\"有些变种的快速排序算法\",{\"1\":{\"55\":1}}],[\"有关闭操作的接口叫closer等\",{\"1\":{\"23\":1}}],[\"尤其是在处理大数据集时\",{\"1\":{\"55\":1}}],[\"且每次选择的基准元素都是最小或最大值时\",{\"1\":{\"55\":1}}],[\"或接近有序\",{\"1\":{\"55\":1}}],[\"或者需要保证严格的线程安全的场景\",{\"1\":{\"44\":1}}],[\"或者实例化成本较低\",{\"1\":{\"44\":1}}],[\"或者实例化过程需要消耗大量资源的情况\",{\"1\":{\"44\":1}}],[\"或者当创建对象需要消耗大量资源时\",{\"1\":{\"43\":1}}],[\"或者容量设置为0\",{\"1\":{\"8\":1}}],[\"或者通过电子邮件与我联系\",{\"1\":{\"0\":1}}],[\"或者有任何问题和建议\",{\"1\":{\"0\":1}}],[\"𝑛log⁡𝑛\",{\"1\":{\"55\":2}}],[\"𝑛2\",{\"1\":{\"55\":4}}],[\"𝑛n\",{\"1\":{\"55\":1}}],[\"𝑛\",{\"1\":{\"55\":1}}],[\"𝑂\",{\"1\":{\"55\":7}}],[\"说明\",{\"1\":{\"68\":1}}],[\"说明数组已经有序\",{\"1\":{\"55\":1}}],[\"说明channel没有缓存\",{\"1\":{\"8\":1}}],[\"交换机\",{\"1\":{\"141\":1}}],[\"交换密钥\",{\"1\":{\"141\":1}}],[\"交换当前位置和最小值位置的元素\",{\"1\":{\"61\":1}}],[\"交换\",{\"1\":{\"55\":1,\"58\":2}}],[\">删除<\",{\"1\":{\"98\":2}}],[\">编辑<\",{\"1\":{\"98\":2}}],[\">新增数据<\",{\"1\":{\"98\":1}}],[\">表格的增删改查<\",{\"1\":{\"98\":1}}],[\">跳转链接<\",{\"1\":{\"94\":2}}],[\">篮球\",{\"1\":{\"83\":1}}],[\">rap\",{\"1\":{\"83\":1}}],[\">唱歌\",{\"1\":{\"83\":1}}],[\">其他\",{\"1\":{\"83\":1}}],[\">女\",{\"1\":{\"83\":1}}],[\">男\",{\"1\":{\"83\":1}}],[\">链接<\",{\"1\":{\"82\":1}}],[\">链接4<\",{\"1\":{\"82\":1}}],[\">链接3<\",{\"1\":{\"82\":1}}],[\">链接2<\",{\"1\":{\"82\":1}}],[\">链接1<\",{\"1\":{\"82\":1}}],[\">这是又一个超链接<\",{\"1\":{\"79\":1}}],[\">这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本<\",{\"1\":{\"67\":1}}],[\">这是一个类选择器标签<\",{\"1\":{\"94\":1}}],[\">这是一个类选择器示例<\",{\"1\":{\"67\":1}}],[\">这是一个id选择器标签<\",{\"1\":{\"94\":1}}],[\">这是一个id选择器示例<\",{\"1\":{\"67\":1}}],[\">这是一个点击事件按钮<\",{\"1\":{\"93\":1}}],[\">这是一个超链接标签<\",{\"1\":{\"79\":1}}],[\">这是一个超链接<\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"79\":1}}],[\">这是一个边框属性<\",{\"1\":{\"68\":1}}],[\">这是一个转换为行内块元素的span标签<\",{\"1\":{\"67\":1}}],[\">这是一个转换为行内元素的div标签<\",{\"1\":{\"67\":1}}],[\">这是一个行内元素<\",{\"1\":{\"67\":1}}],[\">这是一个块级元素<\",{\"1\":{\"67\":1}}],[\">这是一个font复合属性<\",{\"1\":{\"67\":1}}],[\">这是一个伪类选择器<\",{\"1\":{\"67\":1}}],[\">这是一个后代选择器示例<\",{\"1\":{\"67\":1}}],[\">这是一个子元素选择器示例<\",{\"1\":{\"67\":1}}],[\">这是一个应用了内联样式的文本<\",{\"1\":{\"66\":1}}],[\"><\",{\"1\":{\"73\":7,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"98\":1}}],[\">右浮动<\",{\"1\":{\"71\":1}}],[\">左浮动<\",{\"1\":{\"71\":1}}],[\">b站搜索云中月花开<\",{\"1\":{\"68\":1}}],[\">\",{\"1\":{\"55\":1,\"66\":3,\"67\":6,\"68\":2,\"71\":3,\"73\":4,\"76\":1,\"77\":3,\"78\":4,\"79\":10,\"82\":5,\"83\":7,\"87\":2,\"88\":2,\"90\":2,\"91\":6,\"92\":2,\"93\":3,\"94\":2,\"98\":4}}],[\"最大报文段生存时间的两倍\",{\"1\":{\"145\":1}}],[\"最大事务id\",{\"1\":{\"127\":1}}],[\"最重要的是它并不具备记录数据页上究竟发生了什么\",{\"1\":{\"132\":1}}],[\"最后\",{\"1\":{\"132\":1}}],[\"最后一个元素已经排序好\",{\"1\":{\"55\":1}}],[\"最新的数据状态\",{\"1\":{\"130\":1}}],[\"最小事务id\",{\"1\":{\"127\":1}}],[\"最基本的锁\",{\"1\":{\"115\":1}}],[\"最差n^2\",{\"1\":{\"58\":1}}],[\"最坏情况\",{\"1\":{\"55\":2}}],[\"最好情况\",{\"1\":{\"55\":2}}],[\"最多允许有一个default\",{\"1\":{\"14\":1}}],[\"冒泡排序通过相邻元素的比较和交换来工作\",{\"1\":{\"55\":1}}],[\"冒泡排序是一种稳定的排序算法\",{\"1\":{\"55\":1}}],[\"冒泡排序和快速排序在稳定性方面有所不同\",{\"1\":{\"55\":1}}],[\"冒泡排序和快速排序是两种常见的排序算法\",{\"1\":{\"55\":1}}],[\"冒泡排序的平均时间复杂度也是\",{\"1\":{\"55\":1}}],[\"冒泡排序的时间复杂度为\",{\"1\":{\"55\":2}}],[\"冒泡排序函数\",{\"1\":{\"55\":1}}],[\"冒泡排序\",{\"0\":{\"55\":1},\"1\":{\"55\":2}}],[\"64\",{\"1\":{\"55\":1,\"61\":1}}],[\"6\",{\"0\":{\"108\":1,\"145\":1},\"1\":{\"52\":1}}],[\"5px\",{\"1\":{\"68\":1,\"98\":1}}],[\"50px\",{\"1\":{\"67\":1,\"68\":1}}],[\"500\",{\"1\":{\"16\":1}}],[\"5\",{\"0\":{\"107\":1,\"144\":1},\"1\":{\"52\":2,\"58\":1,\"88\":1}}],[\"返回指定的属性值\",{\"1\":{\"94\":1}}],[\"返回值\",{\"1\":{\"92\":2}}],[\"返回值列表\",{\"1\":{\"23\":1}}],[\"返回值列表2\",{\"1\":{\"23\":1}}],[\"返回值列表1\",{\"1\":{\"23\":1}}],[\"返回分区索引\",{\"1\":{\"58\":1}}],[\"返回\",{\"1\":{\"52\":1}}],[\"返回索引\",{\"1\":{\"52\":1}}],[\"返回目标值在切片中的索引\",{\"1\":{\"52\":1}}],[\"主要解决隔离性的问题\",{\"1\":{\"127\":1}}],[\"主键id使用的时非聚集索引\",{\"1\":{\"109\":1}}],[\"主函数\",{\"1\":{\"49\":1}}],[\"主题不需要知道观察者的具体实现\",{\"1\":{\"48\":1}}],[\"主题可以无差别地通知所有感兴趣的观察者\",{\"1\":{\"48\":1}}],[\"主题在其内部状态发生变化时\",{\"1\":{\"48\":1}}],[\"主题是观察者模式中的核心\",{\"1\":{\"48\":1}}],[\"主题\",{\"1\":{\"48\":1}}],[\"用户在浏览器地址栏输入一个域名\",{\"1\":{\"142\":1}}],[\"用户在上一个if和所有的else\",{\"1\":{\"90\":1}}],[\"用户输入域名\",{\"1\":{\"142\":1}}],[\"用于从服务器传输超文本到本地浏览器\",{\"1\":{\"150\":1}}],[\"用于从网络传输超文本到本地浏览器的协议\",{\"1\":{\"140\":1}}],[\"用于确定在time\",{\"1\":{\"145\":1}}],[\"用于将易于记忆的域名\",{\"1\":{\"142\":1}}],[\"用于在互联网上建立一个加密的链接\",{\"1\":{\"149\":1}}],[\"用于在网络中建立可靠的连接\",{\"1\":{\"144\":1}}],[\"用于在网络上的计算机之间传输文件\",{\"1\":{\"140\":1}}],[\"用于在计算机网络中实现数据的可靠传输和通信\",{\"1\":{\"143\":1}}],[\"用于在用户浏览器中执行\",{\"1\":{\"87\":1}}],[\"用于管理和控制对数据库对象\",{\"1\":{\"116\":1}}],[\"用于按照指定的条件重复执行台吗块\",{\"1\":{\"91\":1}}],[\"用于执行一个代码块\",{\"1\":{\"90\":1}}],[\"用于基于不同的条件执行不同的代码块\",{\"1\":{\"90\":1}}],[\"用于通知所有注册的观察者\",{\"1\":{\"49\":1}}],[\"用于移除观察者\",{\"1\":{\"49\":1}}],[\"用于添加新的观察者\",{\"1\":{\"49\":1}}],[\"用来保证事务提交时\",{\"1\":{\"134\":1}}],[\"用来获取单例对象的方法\",{\"1\":{\"44\":2}}],[\"用来处理超时的情况\",{\"1\":{\"15\":1}}],[\"发现更小的值\",{\"1\":{\"61\":1}}],[\"发生变化时\",{\"1\":{\"49\":1}}],[\"发送方可以根据这个值来发送数据\",{\"1\":{\"147\":1}}],[\"发送方可以以任意速率发送数据\",{\"1\":{\"143\":1}}],[\"发送方在没有收到预期的ack\",{\"1\":{\"146\":1}}],[\"发送方在发送数据后会启动一个计时器\",{\"1\":{\"146\":1}}],[\"发送一个fin包给客户端\",{\"1\":{\"144\":1}}],[\"发送http响应\",{\"1\":{\"141\":1}}],[\"发送http请求\",{\"1\":{\"141\":1}}],[\"发送和接收会一直阻塞着\",{\"1\":{\"11\":1}}],[\"发送值v到channel\",{\"1\":{\"7\":1}}],[\"url\",{\"1\":{\"141\":1}}],[\"user\",{\"1\":{\"140\":1,\"141\":1,\"143\":1}}],[\"udp适用于对实时性要求较高\",{\"1\":{\"143\":1}}],[\"udp不提供流控制和拥塞控制\",{\"1\":{\"143\":1}}],[\"udp不保证数据按照发送顺序被接收\",{\"1\":{\"143\":1}}],[\"udp不使用确认和重传机制\",{\"1\":{\"143\":1}}],[\"udp是面向无连接的协议\",{\"1\":{\"143\":1}}],[\"udp是一种不可靠的传输协议\",{\"1\":{\"143\":1}}],[\"udp的特点\",{\"1\":{\"143\":1}}],[\"udp\",{\"1\":{\"140\":2,\"143\":1}}],[\"ul\",{\"1\":{\"81\":1}}],[\"ul>\",{\"1\":{\"78\":1}}],[\"u>\",{\"1\":{\"78\":1}}],[\"utf\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"update\",{\"1\":{\"49\":5}}],[\"undo\",{\"1\":{\"127\":1}}],[\"undefined\",{\"1\":{\"88\":1}}],[\"unlock\",{\"1\":{\"44\":1,\"115\":1}}],[\"unsupport\",{\"1\":{\"39\":1}}],[\"uncomparable\",{\"1\":{\"38\":1}}],[\"该事务就是查找的事务\",{\"1\":{\"127\":1}}],[\"该方法将被调用\",{\"1\":{\"49\":1}}],[\"该方法在被通知时调用\",{\"1\":{\"49\":1}}],[\"该语法返回两个参数\",{\"1\":{\"39\":1}}],[\"虽然减少了耦合\",{\"1\":{\"48\":1}}],[\"然而\",{\"1\":{\"48\":1,\"55\":2}}],[\"然后关闭客户端的连接\",{\"1\":{\"144\":1}}],[\"然后返回给发起查询的客户端\",{\"1\":{\"142\":1}}],[\"然后本地dns服务器向权威dns服务器查询\",{\"1\":{\"142\":1}}],[\"然后是子域名\",{\"1\":{\"142\":1}}],[\"然后根据css样式进行渲染\",{\"1\":{\"141\":1}}],[\"然后\",{\"1\":{\"38\":1}}],[\"然后我们定义一个通用的makehungry函数\",{\"1\":{\"25\":1}}],[\"动态订阅\",{\"1\":{\"48\":1}}],[\"动态值为nil\",{\"1\":{\"38\":1}}],[\"动态值为结构体变量的拷贝\",{\"1\":{\"38\":1}}],[\"每个tcp连接只能发送一个请求\",{\"1\":{\"150\":1}}],[\"每个数据页不超过16kb的数据\",{\"1\":{\"106\":1}}],[\"每个节点存放的是数据和指针\",{\"1\":{\"106\":1}}],[\"每个属性都要具有唯一的名称\",{\"1\":{\"103\":1}}],[\"每个html或xml文档都可以被视为一个文档树\",{\"1\":{\"94\":1}}],[\"每个html元素可以具有不同的属性\",{\"1\":{\"79\":1}}],[\"每个观察者都必须实现一个更新接口\",{\"1\":{\"48\":1}}],[\"每次调用singleton\",{\"1\":{\"44\":1}}],[\"观察者与主题之间的依赖关系\",{\"1\":{\"48\":1}}],[\"观察者可以根据需要动态地订阅或取消订阅主题\",{\"1\":{\"48\":1}}],[\"观察者收到通知后\",{\"1\":{\"48\":1}}],[\"观察者向主题注册\",{\"1\":{\"48\":1}}],[\"观察者订阅主题的状态变化\",{\"1\":{\"48\":1}}],[\"观察者\",{\"1\":{\"48\":1}}],[\"观察者模式在需要实现事件监听和通知机制的场景中非常有用\",{\"1\":{\"49\":1}}],[\"观察者模式广泛应用于实现事件处理系统\",{\"1\":{\"48\":1}}],[\"观察者模式的优点包括\",{\"1\":{\"48\":1}}],[\"观察者模式的工作流程通常如下\",{\"1\":{\"48\":1}}],[\"观察者模式通常涉及以下两类角色\",{\"1\":{\"48\":1}}],[\"观察者模式\",{\"1\":{\"48\":1}}],[\"观察者模型简介\",{\"0\":{\"48\":1}}],[\"观察者模型\",{\"0\":{\"47\":1}}],[\"所有引擎都可以使用\",{\"1\":{\"132\":1}}],[\"所有依赖于它的对象都会得到通知并自动更新\",{\"1\":{\"48\":1}}],[\"所做的变更可以被别的事务看到\",{\"1\":{\"124\":1}}],[\"所以我们需要自行设计一个主键id\",{\"1\":{\"109\":1}}],[\"所以b+树更适合范围查询\",{\"1\":{\"106\":1}}],[\"所以innodb可以确保数据的一致性和完整性\",{\"1\":{\"104\":1}}],[\"所以每次减少比较的元素数量\",{\"1\":{\"55\":1}}],[\"所以不存在首次访问的性能开销\",{\"1\":{\"44\":1}}],[\"所以可能会在首次访问时有轻微的性能开销\",{\"1\":{\"44\":1}}],[\"所以它是线程安全的\",{\"1\":{\"44\":1}}],[\"所以很多初学者会滥用接口类型\",{\"1\":{\"39\":1}}],[\"所以接口值除了需要记录具体值之外\",{\"1\":{\"38\":1}}],[\"所以对于指针接收者实现的接口要额外注意\",{\"1\":{\"30\":1}}],[\"所以只需要给bird结构体添加一个sing方法就可以满足singer接口的要求\",{\"1\":{\"24\":1}}],[\"模式\",{\"1\":{\"48\":1}}],[\"订阅\",{\"1\":{\"48\":1}}],[\"线程安全性\",{\"1\":{\"44\":1}}],[\"但仍然存在队头阻塞问题\",{\"1\":{\"150\":1}}],[\"但也意味着没有建立连接的保障\",{\"1\":{\"143\":1}}],[\"但保证顺序和可靠\",{\"1\":{\"143\":1}}],[\"但这样可以确保通信的稳定和可靠性\",{\"1\":{\"143\":1}}],[\"但需要增加一些额外的开销来实现数据版本控制\",{\"1\":{\"122\":1}}],[\"但会对系统性能产生影响\",{\"1\":{\"122\":1}}],[\"但表锁不会死锁\",{\"1\":{\"115\":1}}],[\"但可能会丢包和乱序\",{\"1\":{\"143\":1}}],[\"但可能会受到并发事务的影响\",{\"1\":{\"130\":1}}],[\"但可能会有不必要的内存占用\",{\"1\":{\"44\":1}}],[\"但可以包含其他行内元素\",{\"1\":{\"82\":1}}],[\"但缺乏灵活性\",{\"1\":{\"72\":1}}],[\"但通常不会完全消除\",{\"1\":{\"55\":1}}],[\"但观察者仍然需要了解它们需要更新的内容\",{\"1\":{\"48\":1}}],[\"但之后的性能会很好\",{\"1\":{\"44\":1}}],[\"但不管是否需要\",{\"1\":{\"44\":1}}],[\"但如果多个线程同时访问\",{\"1\":{\"44\":1}}],[\"但是彼此不冲突\",{\"1\":{\"115\":1}}],[\"但是语句结束后并不会马上释放\",{\"1\":{\"115\":1}}],[\"但是缺点就是在查看源码的时候\",{\"1\":{\"39\":1}}],[\"但是这个动态类型不支持互相比较\",{\"1\":{\"38\":1}}],[\"但是有一种特殊情况需要特别注意\",{\"1\":{\"38\":1}}],[\"但是我们并不总是能对一个值求址\",{\"1\":{\"30\":1}}],[\"但是不能给将cat类型的变量赋值给mover接口类型的变量x\",{\"1\":{\"30\":1}}],[\"但是通常使用接口类型可以使代码更清晰易读\",{\"1\":{\"26\":1}}],[\"但是如果通过range读取\",{\"1\":{\"17\":1}}],[\"但是从这个关闭的channel中不但可以读取出已发送的数据\",{\"1\":{\"17\":1}}],[\"但是select设置为1秒超时\",{\"1\":{\"15\":1}}],[\"但是只是用来处理通讯\",{\"1\":{\"14\":1}}],[\"节省资源\",{\"1\":{\"44\":1}}],[\"初始化表达式\",{\"1\":{\"91\":1}}],[\"初始化时机\",{\"1\":{\"44\":1}}],[\"初始化单例\",{\"1\":{\"44\":1}}],[\"懒汉式单例在多线程环境下可能不是线程安全的\",{\"1\":{\"44\":1}}],[\"懒汉式\",{\"1\":{\"44\":5}}],[\"懒汉式和饿汉式是两种常见的单例模式实现方式\",{\"1\":{\"44\":1}}],[\"懒汉模式\",{\"1\":{\"44\":1}}],[\"打印带有单位的值\",{\"1\":{\"44\":1}}],[\"打折券都属于电商场景下常见的优惠方式\",{\"1\":{\"26\":1}}],[\"以\",{\"1\":{\"151\":1}}],[\"以获取最新的ip地址信息\",{\"1\":{\"142\":1}}],[\"以备后续使用\",{\"1\":{\"142\":1}}],[\"以下是它们之间的主要区别\",{\"1\":{\"150\":1}}],[\"以下是tcp重传机制的几个主要方面\",{\"1\":{\"146\":1}}],[\"以下是dns服务的一些关键特点\",{\"1\":{\"142\":1}}],[\"以下是一个简单的实现示例\",{\"1\":{\"49\":1}}],[\"以防止其他事务的干扰\",{\"1\":{\"122\":1}}],[\"以防止外部通过new操作符创建类的实例\",{\"1\":{\"43\":1}}],[\"以及对客户端的请求建立连接的确认\",{\"1\":{\"144\":1}}],[\"以及请求建立连接的标志位\",{\"1\":{\"144\":1}}],[\"以及可能的请求体\",{\"1\":{\"141\":1}}],[\"以及定期进行性能监控和调优\",{\"1\":{\"119\":1}}],[\"以及与其他元素的关系\",{\"1\":{\"79\":1}}],[\"以避免错误的索引选择\",{\"1\":{\"112\":1}}],[\"以避免多个goroutine同时创建实例\",{\"1\":{\"44\":1}}],[\"以提高查询性能\",{\"1\":{\"112\":1}}],[\"以便同时应用多个样式\",{\"1\":{\"65\":1}}],[\"以便在主题状态变化时接收更新\",{\"1\":{\"48\":1}}],[\"再写磁盘\",{\"1\":{\"133\":1}}],[\"再次检查instance\",{\"1\":{\"44\":1}}],[\"再比如我们需要在某个程序中添加一个将某些指标数据向外输出的功能\",{\"1\":{\"25\":1}}],[\"like查询以\",{\"1\":{\"111\":1}}],[\"li\",{\"1\":{\"81\":1}}],[\"li>\",{\"1\":{\"78\":6}}],[\"line\",{\"1\":{\"67\":1}}],[\"light\",{\"1\":{\"67\":2}}],[\"layer\",{\"1\":{\"149\":2}}],[\"label>\",{\"1\":{\"83\":4,\"93\":1}}],[\"language\",{\"1\":{\"76\":1}}],[\"lang=\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"larger\",{\"1\":{\"67\":1}}],[\"log和bin\",{\"0\":{\"136\":1}}],[\"log和redo\",{\"0\":{\"132\":1}}],[\"log写满时\",{\"1\":{\"135\":1}}],[\"log里面\",{\"1\":{\"133\":1}}],[\"logging\",{\"1\":{\"133\":1}}],[\"log是如何配合工作的\",{\"0\":{\"136\":1}}],[\"log是个循环写入的\",{\"1\":{\"132\":1}}],[\"log是事务链表\",{\"1\":{\"127\":1}}],[\"log的话\",{\"1\":{\"132\":1}}],[\"log的区别\",{\"0\":{\"132\":1}}],[\"log不具备保存事务的性质\",{\"1\":{\"132\":1}}],[\"log版本链解决\",{\"1\":{\"127\":1}}],[\"log等\",{\"1\":{\"112\":1}}],[\"log\",{\"1\":{\"87\":3,\"88\":3,\"91\":5,\"92\":6,\"93\":2,\"94\":4,\"98\":7,\"132\":8,\"134\":1}}],[\"login\",{\"1\":{\"83\":1}}],[\"logn\",{\"1\":{\"58\":1}}],[\"local\",{\"1\":{\"92\":6}}],[\"localhost\",{\"1\":{\"83\":1}}],[\"lock退化为间隙锁\",{\"1\":{\"121\":1}}],[\"lock锁的两优化是什么\",{\"0\":{\"121\":1}}],[\"locking\",{\"1\":{\"116\":1}}],[\"locks\",{\"1\":{\"115\":5}}],[\"lock\",{\"1\":{\"44\":1,\"115\":2,\"117\":2,\"121\":1}}],[\"low\",{\"1\":{\"52\":5,\"58\":7}}],[\"let\",{\"1\":{\"88\":1,\"91\":3}}],[\"left\",{\"1\":{\"70\":1,\"71\":3,\"73\":2,\"98\":1}}],[\"less\",{\"1\":{\"34\":7}}],[\"length\",{\"1\":{\"98\":3}}],[\"length=table\",{\"1\":{\"98\":1}}],[\"len\",{\"1\":{\"11\":2,\"34\":1,\"52\":1,\"55\":1,\"58\":2,\"61\":1}}],[\"饿汉式\",{\"1\":{\"44\":5}}],[\"饿汉式单例模式是指在程序启动时\",{\"1\":{\"44\":1}}],[\"饿汉模式\",{\"1\":{\"44\":1}}],[\"饿肚子了\",{\"1\":{\"25\":1}}],[\"game\",{\"0\":{\"155\":1}}],[\"gap\",{\"1\":{\"115\":1}}],[\"global\",{\"1\":{\"92\":3}}],[\"get适合用于获取数据\",{\"1\":{\"151\":1}}],[\"get请求的参数数据暴露在url中\",{\"1\":{\"151\":1}}],[\"get请求的参数数据以键值对的形式出现在url中\",{\"1\":{\"151\":1}}],[\"get请求是幂等的\",{\"1\":{\"151\":1}}],[\"get请求对url长度有限制\",{\"1\":{\"151\":1}}],[\"get请求将参数数据附加在url的查询字符串中\",{\"1\":{\"151\":1}}],[\"get和post是http协议中常用的两种请求方法\",{\"1\":{\"151\":1}}],[\"get和post有哪些区别\",{\"0\":{\"151\":1}}],[\"get\",{\"1\":{\"141\":1}}],[\"getattribute\",{\"1\":{\"94\":1}}],[\"getelementsbytagname\",{\"1\":{\"94\":2}}],[\"getelementsbyclassname\",{\"1\":{\"94\":1}}],[\"getelementbyid\",{\"1\":{\"94\":1,\"98\":1}}],[\"getinstance\",{\"1\":{\"44\":10}}],[\"gender\",{\"1\":{\"83\":3}}],[\"grandson\",{\"1\":{\"67\":1}}],[\"green\",{\"1\":{\"66\":1,\"67\":2}}],[\"gui工具\",{\"1\":{\"48\":1}}],[\"google\",{\"1\":{\"77\":1,\"78\":1}}],[\"go中通过定义一个可导出的reverse函数来让使用者创建reverse结构体实例\",{\"1\":{\"34\":1}}],[\"go语言算法\",{\"0\":{\"160\":1},\"2\":{\"53\":1,\"56\":1,\"59\":1,\"62\":1}}],[\"go语言实现观察者模型\",{\"0\":{\"49\":1}}],[\"go语言实现单例模型\",{\"0\":{\"44\":1}}],[\"go语言模型\",{\"0\":{\"159\":1},\"2\":{\"45\":1,\"50\":1}}],[\"go语言中不同的类型还可以实现同一接口\",{\"1\":{\"33\":1}}],[\"go语言中的这种设计符合程序开发中抽象的一般规律\",{\"1\":{\"26\":1}}],[\"go语言中为了解决类似上面的问题引入了接口的概念\",{\"1\":{\"25\":1}}],[\"go语言的接口在命名时\",{\"1\":{\"23\":1}}],[\"go语言基础\",{\"0\":{\"157\":1},\"2\":{\"19\":1,\"40\":1}}],[\"goroutine任务完成\",{\"1\":{\"18\":1}}],[\"goroutine通过done\",{\"1\":{\"18\":1}}],[\"go\",{\"1\":{\"9\":1,\"11\":2,\"13\":2,\"14\":1,\"15\":1,\"16\":2,\"17\":1,\"18\":1,\"24\":1,\"34\":2,\"39\":2}}],[\"特别是在移动和不稳定网络环境下\",{\"1\":{\"150\":1}}],[\"特别是在需要保持相等元素原始顺序的应用场景中\",{\"1\":{\"55\":1}}],[\"特别是当一个对象需要跨系统共享数据时\",{\"1\":{\"43\":1}}],[\"特别是空接口\",{\"1\":{\"39\":1}}],[\"摘自gin框架routergroup\",{\"1\":{\"39\":1}}],[\"小技巧\",{\"1\":{\"39\":1}}],[\"数组\",{\"1\":{\"39\":1}}],[\"数据语义\",{\"1\":{\"151\":1}}],[\"数据类型是隐藏的\",{\"1\":{\"151\":1}}],[\"数据类型是明文的\",{\"1\":{\"151\":1}}],[\"数据类型\",{\"1\":{\"151\":1}}],[\"数据类型一样\",{\"1\":{\"7\":1}}],[\"数据长度限制\",{\"1\":{\"151\":1}}],[\"数据位置\",{\"1\":{\"151\":1}}],[\"数据完整性\",{\"1\":{\"149\":1}}],[\"数据加密\",{\"1\":{\"149\":1}}],[\"数据往返时间越长\",{\"1\":{\"147\":1}}],[\"数据发送后不会等待接收方的确认\",{\"1\":{\"143\":1}}],[\"数据包>数据段\",{\"1\":{\"141\":1}}],[\"数据信号>帧\",{\"1\":{\"141\":1}}],[\"数据链路层\",{\"1\":{\"140\":2,\"141\":2}}],[\"数据就无法做到crash\",{\"1\":{\"132\":1}}],[\"数据量大的时候如何切分\",{\"0\":{\"129\":1}}],[\"数据很少会被其他事务修改\",{\"1\":{\"122\":1}}],[\"数据很有可能会被其他事务修改\",{\"1\":{\"122\":1}}],[\"数据库\",{\"0\":{\"162\":1},\"2\":{\"137\":1}}],[\"数据库对象的不一致性\",{\"1\":{\"118\":1}}],[\"数据库对象的元数据访问\",{\"1\":{\"117\":1}}],[\"数据库三大范式\",{\"0\":{\"103\":1},\"1\":{\"103\":1}}],[\"数据定义\",{\"1\":{\"115\":1}}],[\"数据使不使用引号都有可以\",{\"1\":{\"111\":1}}],[\"数据行的物理顺序不需要重新排序\",{\"1\":{\"108\":1}}],[\"数据行的物理顺序需要重新排列\",{\"1\":{\"108\":1}}],[\"数据和索引放在了一起\",{\"1\":{\"107\":1}}],[\"数据页之间使用的是双向指针连接\",{\"1\":{\"106\":1}}],[\"数据页上面缀的是有序链表\",{\"1\":{\"106\":1}}],[\"数据的存放位置不同\",{\"1\":{\"106\":1}}],[\"数据监视等场景\",{\"1\":{\"48\":1}}],[\"数据\",{\"1\":{\"8\":1}}],[\"整型\",{\"1\":{\"39\":1}}],[\"相比于表锁\",{\"1\":{\"115\":1}}],[\"相对安全\",{\"1\":{\"151\":1}}],[\"相对于浏览器窗口进行定位\",{\"1\":{\"73\":1}}],[\"相对于其最近的已定位祖先元素进行定位\",{\"1\":{\"73\":1}}],[\"相对于元素在文档流中的正常位置进行定位\",{\"1\":{\"73\":1}}],[\"相对定位\",{\"1\":{\"73\":1}}],[\"相邻元素选择器\",{\"1\":{\"67\":1}}],[\"相等的元素之间的相对顺序不会改变\",{\"1\":{\"55\":1}}],[\"相信很多读者在刚接触到接口类型时都会有很多疑惑\",{\"1\":{\"39\":1}}],[\"相较于使用结构体类型\",{\"1\":{\"21\":1}}],[\"相较于之前章节中讲到的那些具体类型\",{\"1\":{\"21\":1}}],[\"切记不要为了使用接口类型而增加不必要的抽象\",{\"1\":{\"39\":1}}],[\"切片\",{\"1\":{\"21\":1}}],[\"来确保数据在传输过程中没有被篡改\",{\"1\":{\"149\":1}}],[\"来加密传输的数据\",{\"1\":{\"149\":1}}],[\"来关闭连接\",{\"1\":{\"144\":1}}],[\"来建立连接\",{\"1\":{\"144\":1}}],[\"来管理并发访问\",{\"1\":{\"117\":1}}],[\"来强制mysql使用指定的索引\",{\"1\":{\"112\":1}}],[\"来定义文本\",{\"1\":{\"76\":1}}],[\"来实现编码过程中的便捷\",{\"1\":{\"39\":1}}],[\"来处理呢\",{\"1\":{\"25\":1,\"26\":3}}],[\"推荐使用switch语句来实现\",{\"1\":{\"39\":1}}],[\"变量v是\",{\"1\":{\"39\":1}}],[\"富贵\",{\"1\":{\"39\":1}}],[\"第四步\",{\"1\":{\"144\":1}}],[\"第三步\",{\"1\":{\"144\":2}}],[\"第三范式\",{\"1\":{\"103\":1}}],[\"第二步\",{\"1\":{\"144\":2}}],[\"第二范式\",{\"1\":{\"103\":1}}],[\"第二个值是一个布尔值\",{\"1\":{\"39\":1}}],[\"第一步\",{\"1\":{\"144\":2}}],[\"第一范式\",{\"1\":{\"103\":1}}],[\"第一个参数是x转化为t类型后的变量\",{\"1\":{\"39\":1}}],[\"表锁等\",{\"1\":{\"122\":1}}],[\"表锁释放时间\",{\"1\":{\"115\":1}}],[\"表锁解锁\",{\"1\":{\"115\":1}}],[\"表锁语法\",{\"1\":{\"115\":1}}],[\"表锁\",{\"1\":{\"115\":2}}],[\"表格的增删改查\",{\"0\":{\"98\":1}}],[\"表格等\",{\"1\":{\"81\":1}}],[\"表明接收方收到了特定的数据包多次\",{\"1\":{\"146\":1}}],[\"表明接收的x是产生的零值\",{\"1\":{\"10\":1}}],[\"表明它们对主题状态的变化感兴趣\",{\"1\":{\"48\":1}}],[\"表示当前连接是安全的\",{\"1\":{\"149\":1}}],[\"表示一个tcp段在网络中生存的最大时间\",{\"1\":{\"145\":1}}],[\"表示一个连接已经完成了关闭连接\",{\"1\":{\"145\":1}}],[\"表示对方已经发送了关闭连接的请求\",{\"1\":{\"145\":1}}],[\"表示服务器也准备关闭连接\",{\"1\":{\"144\":1}}],[\"表示它不再发送数据了\",{\"1\":{\"144\":1}}],[\"表示层和应用层\",{\"1\":{\"140\":1}}],[\"表示不传参\",{\"1\":{\"92\":1}}],[\"表示断言x可能是的类型\",{\"1\":{\"39\":1}}],[\"表示接口类型的变量\",{\"1\":{\"39\":1}}],[\"否则会产生panic\",{\"1\":{\"38\":1}}],[\"否者r\",{\"1\":{\"34\":1}}],[\"注意\",{\"1\":{\"38\":2,\"70\":1}}],[\"注释掉\",{\"1\":{\"13\":1}}],[\"首先\",{\"1\":{\"38\":1}}],[\"鉴于这两部分会根据存入值的不同而发生变化\",{\"1\":{\"38\":1}}],[\"组成\",{\"1\":{\"38\":1}}],[\"值\",{\"1\":{\"38\":1}}],[\"值接收者实现接口\",{\"0\":{\"29\":1}}],[\"值接收者和指针接收者\",{\"0\":{\"28\":1}}],[\"还需要记录这个值属于的类型\",{\"1\":{\"38\":1}}],[\"还可以动\",{\"1\":{\"32\":1}}],[\"还可以不断的读取零值\",{\"1\":{\"17\":1}}],[\"沙河娜扎\",{\"1\":{\"37\":1}}],[\"布尔型\",{\"1\":{\"36\":1}}],[\"各位读者可自行查阅\",{\"1\":{\"34\":1}}],[\"即多次重复请求不会产生副作用\",{\"1\":{\"151\":1}}],[\"即放在url的后面\",{\"1\":{\"151\":1}}],[\"即读取已经提交的事务所做的修改\",{\"1\":{\"130\":1}}],[\"即非主键属性不能依赖与其他非主键属性\",{\"1\":{\"103\":1}}],[\"即非主键属性不能只依赖于主键的部分属性\",{\"1\":{\"103\":1}}],[\"即每个属性都不能在被分割为更小的数据单元\",{\"1\":{\"103\":1}}],[\"即通过将索引参数交换位置实现反转\",{\"1\":{\"34\":1}}],[\"即任何实现了pay方法的都可以称为payer类型\",{\"1\":{\"26\":1}}],[\"此外\",{\"1\":{\"44\":1}}],[\"此外在go内置标准库database\",{\"1\":{\"34\":1}}],[\"此处重写为r\",{\"1\":{\"34\":1}}],[\"此时服务器的连接已经关闭\",{\"1\":{\"144\":1}}],[\"此时连接已经建立\",{\"1\":{\"144\":1}}],[\"此时会停止所有的写入操作\",{\"1\":{\"135\":1}}],[\"此时接口变量m与nil并不相等\",{\"1\":{\"38\":1}}],[\"此时\",{\"1\":{\"38\":2}}],[\"此时实现mover接口的是\",{\"1\":{\"30\":1}}],[\"此时实现mover接口的是dog类型\",{\"1\":{\"29\":1}}],[\"此时一个sayer类型的变量就能够接收cat和dog类型的变量\",{\"1\":{\"27\":1}}],[\"此时只需要修改下原始的checkout函数\",{\"1\":{\"26\":1}}],[\"为了保证数据的隔离性\",{\"1\":{\"117\":1}}],[\"为了方便我们对数据库进行操作\",{\"1\":{\"109\":1}}],[\"为了避免数据不一致而需要遵循的三个规范化级别\",{\"1\":{\"103\":1}}],[\"为了避免这种情况\",{\"1\":{\"55\":1}}],[\"为什么会有索引失效的情况\",{\"0\":{\"111\":1}}],[\"为什么一张表要有一个主键id\",{\"0\":{\"109\":1}}],[\"为什么使用b+树而不使用红黑树\",{\"0\":{\"107\":1}}],[\"为什么使用接口\",{\"0\":{\"25\":1}}],[\"为html元素定义一个或多个类名\",{\"1\":{\"79\":1}}],[\"为元素选择器\",{\"1\":{\"67\":1}}],[\"为false则表示断言失败\",{\"1\":{\"39\":1}}],[\"为reverse类型添加less方法\",{\"1\":{\"34\":1}}],[\"javascript脚本\",{\"1\":{\"141\":1}}],[\"javascript文件\",{\"1\":{\"98\":1}}],[\"javascript绑定事件的方法有三种\",{\"1\":{\"93\":1}}],[\"javascript基本语法\",{\"0\":{\"88\":1}}],[\"javascript也可以在服务器端运行\",{\"1\":{\"87\":1}}],[\"javascript在前端开发中扮演着重要的角色\",{\"1\":{\"87\":1}}],[\"javascript的作用\",{\"0\":{\"87\":1}}],[\"javascript使得网页不在是静态的\",{\"1\":{\"86\":1}}],[\"javascript可以直接嵌入html\",{\"1\":{\"86\":1}}],[\"javascript是一种轻量级\",{\"1\":{\"86\":1}}],[\"javascript\",{\"0\":{\"86\":1}}],[\"java等语言中也有接口的概念\",{\"1\":{\"26\":1}}],[\"jpg\",{\"1\":{\"79\":3}}],[\"js文件\",{\"1\":{\"87\":1}}],[\"js\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":4,\"98\":2}}],[\"j+1\",{\"1\":{\"55\":4}}],[\"j++\",{\"1\":{\"55\":1,\"58\":1,\"61\":1}}],[\"justifytype\",{\"1\":{\"39\":2}}],[\"j\",{\"1\":{\"34\":7,\"55\":6,\"58\":6,\"61\":4}}],[\"洗刷刷\",{\"1\":{\"33\":1}}],[\"洗衣机\",{\"1\":{\"33\":1}}],[\"嵌入甩干器\",{\"1\":{\"33\":1}}],[\"hpack\",{\"1\":{\"150\":1}}],[\"handshake\",{\"1\":{\"144\":2}}],[\"haier\",{\"1\":{\"33\":2}}],[\"h1到h6\",{\"1\":{\"81\":1}}],[\"h1>\",{\"1\":{\"66\":1,\"67\":3,\"76\":1,\"77\":1,\"78\":4,\"82\":1,\"98\":1}}],[\"h6>\",{\"1\":{\"78\":1}}],[\"h5>\",{\"1\":{\"78\":1}}],[\"hypertext\",{\"1\":{\"76\":1,\"140\":1}}],[\"hint\",{\"1\":{\"112\":1}}],[\"hidden\",{\"1\":{\"71\":1}}],[\"high\",{\"1\":{\"52\":4,\"58\":9,\"67\":2}}],[\"http经历了几个版本的更新\",{\"1\":{\"150\":1}}],[\"http2和http3的区别\",{\"0\":{\"150\":1}}],[\"http1\",{\"0\":{\"150\":1}}],[\"http和https有哪些区别\",{\"0\":{\"148\":1}}],[\"http版本\",{\"1\":{\"141\":1}}],[\"http的安全版本\",{\"1\":{\"140\":1}}],[\"http\",{\"1\":{\"77\":1,\"78\":1,\"83\":1,\"140\":2,\"150\":9,\"151\":1}}],[\"https可以防止dns劫持攻击\",{\"1\":{\"148\":1}}],[\"https速度会略慢于http\",{\"1\":{\"148\":1}}],[\"https协议是更安全的选择\",{\"1\":{\"148\":1}}],[\"https协议的默认端口是443\",{\"1\":{\"148\":1}}],[\"https协议需要到ca申请ssl证书\",{\"1\":{\"148\":1}}],[\"https在传输前会将数据加密\",{\"1\":{\"148\":1}}],[\"https使用的是tls\",{\"1\":{\"148\":1}}],[\"https\",{\"1\":{\"67\":1,\"79\":4,\"140\":1,\"141\":1}}],[\"html文件\",{\"1\":{\"98\":1}}],[\"html文件结构\",{\"0\":{\"77\":1}}],[\"html表单\",{\"0\":{\"83\":1}}],[\"html区块\",{\"0\":{\"80\":1}}],[\"html属性\",{\"0\":{\"79\":1},\"1\":{\"93\":1}}],[\"html标签是由尖括号包围的关键字\",{\"1\":{\"76\":1}}],[\"html通过一系列的\",{\"1\":{\"76\":1}}],[\"html\",{\"0\":{\"76\":1},\"1\":{\"76\":1}}],[\"html>\",{\"1\":{\"66\":2,\"67\":4,\"68\":2,\"71\":2,\"73\":2,\"77\":2,\"78\":2,\"79\":2,\"82\":2,\"83\":2,\"87\":2,\"88\":2,\"90\":2,\"91\":6,\"92\":2,\"93\":2,\"94\":2,\"98\":2}}],[\"hello\",{\"1\":{\"87\":3,\"92\":6}}],[\"height=\",{\"1\":{\"79\":1}}],[\"height\",{\"1\":{\"67\":2,\"68\":1,\"71\":3,\"73\":6}}],[\"head标签的内联样式\",{\"1\":{\"87\":1}}],[\"header<\",{\"1\":{\"78\":1}}],[\"header\",{\"1\":{\"67\":2}}],[\"head>\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"h4>\",{\"1\":{\"67\":1,\"78\":1}}],[\"hobby\",{\"1\":{\"83\":3}}],[\"hover\",{\"1\":{\"67\":1}}],[\"hour\",{\"1\":{\"13\":1,\"17\":1}}],[\"h3+p\",{\"1\":{\"67\":1}}],[\"h3\",{\"1\":{\"66\":1}}],[\"h3>\",{\"1\":{\"66\":1,\"67\":3,\"78\":1}}],[\"h2>\",{\"1\":{\"66\":1,\"67\":1,\"78\":1}}],[\"h2\",{\"1\":{\"66\":1,\"67\":1}}],[\"href=\",{\"1\":{\"66\":1,\"76\":1,\"77\":2,\"78\":2,\"79\":4,\"82\":6,\"83\":1,\"94\":2,\"98\":1}}],[\"h\",{\"1\":{\"33\":1}}],[\"海尔洗衣机\",{\"1\":{\"33\":1}}],[\"甩一甩\",{\"1\":{\"33\":1}}],[\"甩干器\",{\"1\":{\"33\":1}}],[\"宝马速度70迈\",{\"1\":{\"33\":1}}],[\"宝马\",{\"1\":{\"33\":1}}],[\"汽车在跑~\",{\"1\":{\"38\":1}}],[\"汽车结构体类型\",{\"1\":{\"33\":1}}],[\"汽车也可以动\",{\"1\":{\"33\":1}}],[\"旺财会跑\",{\"1\":{\"33\":1}}],[\"旺财\",{\"1\":{\"32\":1,\"33\":1,\"38\":1,\"39\":2}}],[\"同时也能适应网络拥塞情况\",{\"1\":{\"143\":1}}],[\"同时减少连接建立时间\",{\"1\":{\"140\":1}}],[\"同时\",{\"1\":{\"103\":1,\"119\":1,\"133\":1,\"141\":1}}],[\"同时提供一个公共的静态方法用来获取这个唯一实例\",{\"1\":{\"43\":1}}],[\"同父级文件夹web下的同级文件夹css的css\",{\"1\":{\"66\":1}}],[\"同样只需要实现新接口类型中规定的所有方法就算实现了该接口类型\",{\"1\":{\"34\":1}}],[\"同一个类型实现不同的接口互相不影响使用\",{\"1\":{\"32\":1}}],[\"同步\",{\"0\":{\"18\":1},\"1\":{\"144\":2}}],[\"例如创建\",{\"1\":{\"151\":1}}],[\"例如读取历史记录\",{\"1\":{\"130\":1}}],[\"例如用户的点击\",{\"1\":{\"93\":1}}],[\"例如超链接\",{\"1\":{\"82\":1}}],[\"例如段落\",{\"1\":{\"81\":1}}],[\"例如\",{\"1\":{\"76\":2,\"117\":1,\"118\":1,\"151\":1}}],[\"例如go标准库io源码中就有很多接口之间互相组合的示例\",{\"1\":{\"34\":1}}],[\"例如狗不仅可以叫\",{\"1\":{\"32\":1}}],[\"例如在线交易\",{\"1\":{\"130\":1}}],[\"例如在我们的代码世界中不仅狗可以动\",{\"1\":{\"33\":1}}],[\"例如在上面的示例中\",{\"1\":{\"27\":1}}],[\"例如在下面的代码示例中\",{\"1\":{\"26\":1}}],[\"无序性\",{\"1\":{\"143\":1}}],[\"无连接\",{\"1\":{\"143\":1}}],[\"无联系方式\",{\"1\":{\"98\":1}}],[\"无需关心它们的具体类型\",{\"1\":{\"48\":1}}],[\"无论主键索引还是二级索引\",{\"1\":{\"115\":1}}],[\"无论有多少个goroutine同时调用getinstance\",{\"1\":{\"44\":1}}],[\"无论使用值类型还是指针类型都没有问题\",{\"1\":{\"30\":1}}],[\"无缓存的channel只有在receiver准备好后send才被执行\",{\"1\":{\"9\":1}}],[\"对数据可靠性要求相对较低的应用场景\",{\"1\":{\"143\":1}}],[\"对并发性能产生负面影响\",{\"1\":{\"118\":1}}],[\"对整个数据库实例加锁\",{\"1\":{\"115\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"113\":1}}],[\"对象都会被创建\",{\"1\":{\"44\":1}}],[\"对传入的空接口类型变量x进行类型断言\",{\"1\":{\"39\":1}}],[\"对于http\",{\"1\":{\"141\":1}}],[\"对于这种由多个接口类型组合形成的新接口类型\",{\"1\":{\"34\":1}}],[\"对于值接收者实现的接口\",{\"1\":{\"30\":1}}],[\"对mover类型调用move方法\",{\"1\":{\"32\":1}}],[\"对sayer类型调用say方法\",{\"1\":{\"32\":1}}],[\"对编程和技术创新充满热情\",{\"1\":{\"0\":1}}],[\"由google开发\",{\"1\":{\"140\":1}}],[\"由于实例是在需要时才创建\",{\"1\":{\"44\":1}}],[\"由于实例是在包初始化时创建的\",{\"1\":{\"44\":1}}],[\"由于实例在类加载时就创建\",{\"1\":{\"44\":2}}],[\"由于go的init函数特性\",{\"1\":{\"44\":1}}],[\"由于go语言中有对指针求值的语法糖\",{\"1\":{\"30\":1}}],[\"由于接口类型变量能够动态存储不同类型值的特点\",{\"1\":{\"39\":1}}],[\"由于接口类型的值可以是任意一个实现了该接口的类型值\",{\"1\":{\"38\":1}}],[\"由具体的对象来实现规范的细节\",{\"1\":{\"21\":1}}],[\"猫会动\",{\"1\":{\"30\":1}}],[\"猫结构体类型\",{\"1\":{\"30\":1}}],[\"猫饿了会喵喵喵~\",{\"1\":{\"25\":1}}],[\"狗在跑~\",{\"1\":{\"38\":1}}],[\"狗结构体\",{\"1\":{\"36\":1}}],[\"狗结构体类型\",{\"1\":{\"29\":1}}],[\"狗会动\",{\"1\":{\"29\":1}}],[\"喵喵喵\",{\"1\":{\"27\":1}}],[\"喵喵喵~\",{\"1\":{\"25\":1}}],[\"那我们如何从接口值获取其存储的具体数据呢\",{\"1\":{\"39\":1}}],[\"那实现了接口又有什么用呢\",{\"1\":{\"27\":1}}],[\"那么前面事务读取到的数据就是无效的\",{\"1\":{\"125\":1}}],[\"那么mysql就会自动给我们设置一个隐藏的主键id\",{\"1\":{\"109\":1}}],[\"那么对它们相互比较时就会引发panic\",{\"1\":{\"38\":1}}],[\"那么它就实现了这个接口\",{\"1\":{\"26\":1}}],[\"那么我们就称它实现了这个接口\",{\"1\":{\"24\":1}}],[\"那么go会伪随机的选择一个case处理\",{\"1\":{\"14\":1}}],[\"那么channel就是双向的\",{\"1\":{\"8\":1}}],[\"立减券\",{\"1\":{\"26\":1}}],[\"圆形都能计算周长和面积\",{\"1\":{\"26\":1}}],[\"银联等方式去在线支付\",{\"1\":{\"26\":1}}],[\"银联支付等\",{\"1\":{\"25\":1}}],[\"像类似的例子在我们编程过程中会经常遇到\",{\"1\":{\"26\":1}}],[\"现在支持使用微信支付\",{\"1\":{\"26\":1}}],[\"现在假设我们的代码世界里有很多小动物\",{\"1\":{\"25\":1}}],[\"之前调用支付宝支付\",{\"1\":{\"26\":1}}],[\"之外的代码访问\",{\"1\":{\"23\":1}}],[\"支持0\",{\"1\":{\"150\":1}}],[\"支持流量控制和优先级设置\",{\"1\":{\"150\":1}}],[\"支持头部压缩\",{\"1\":{\"150\":1}}],[\"支持持久连接\",{\"1\":{\"150\":1}}],[\"支持文本协议\",{\"1\":{\"150\":1}}],[\"支持拥塞控制\",{\"1\":{\"140\":1}}],[\"支持广播通信\",{\"1\":{\"48\":1}}],[\"支持新的支付方式\",{\"1\":{\"26\":1}}],[\"支付方式\",{\"1\":{\"26\":1}}],[\"支付100元\",{\"1\":{\"26\":4}}],[\"支付宝结账\",{\"1\":{\"26\":1}}],[\"支付宝的支付方法\",{\"1\":{\"26\":1}}],[\"支付宝\",{\"1\":{\"26\":1}}],[\"支付宝支付\",{\"1\":{\"25\":1}}],[\"实时性要求高的场景\",{\"1\":{\"143\":1}}],[\"实时游戏等\",{\"1\":{\"143\":1}}],[\"实时查询等\",{\"1\":{\"130\":1}}],[\"实例变量\",{\"1\":{\"44\":1}}],[\"实例就已经被创建好了\",{\"1\":{\"44\":1}}],[\"实现服务器端的应用开发\",{\"1\":{\"87\":1}}],[\"实现动态效果和用户交互\",{\"1\":{\"87\":1}}],[\"实现了\",{\"1\":{\"49\":1}}],[\"实现\",{\"1\":{\"49\":2}}],[\"实现方式\",{\"1\":{\"44\":1}}],[\"实现washingmachine接口的wash\",{\"1\":{\"33\":1}}],[\"实现washingmachine接口的dry\",{\"1\":{\"33\":1}}],[\"实现mover接口\",{\"1\":{\"32\":1,\"33\":1}}],[\"实现sayer接口\",{\"1\":{\"32\":1}}],[\"实现接口的条件\",{\"0\":{\"24\":1}}],[\"实际上\",{\"1\":{\"26\":1}}],[\"微信的支付方法\",{\"1\":{\"26\":1}}],[\"微信\",{\"1\":{\"26\":2}}],[\"微信支付结账\",{\"1\":{\"26\":1}}],[\"微信支付\",{\"1\":{\"25\":1}}],[\"结束\",{\"1\":{\"144\":1}}],[\"结束循环的执行\",{\"1\":{\"91\":1}}],[\"结账\",{\"1\":{\"26\":2}}],[\"结构体\",{\"1\":{\"44\":1}}],[\"结构体类型等\",{\"1\":{\"39\":1}}],[\"结构体类型\",{\"1\":{\"36\":1}}],[\"结构体类型名称首字母小写\",{\"1\":{\"34\":1}}],[\"结构体类型如下\",{\"1\":{\"24\":1}}],[\"结构体中嵌入了interface接口\",{\"1\":{\"34\":1}}],[\"结构体等\",{\"1\":{\"21\":1}}],[\"z\",{\"1\":{\"26\":1,\"38\":3,\"88\":2}}],[\"zhifubao\",{\"1\":{\"26\":6}}],[\"zero\",{\"1\":{\"10\":1}}],[\"不适合传输敏感信息\",{\"1\":{\"151\":1}}],[\"不适合被缓存\",{\"1\":{\"151\":1}}],[\"不同浏览器和服务器对url长度的限制不同\",{\"1\":{\"151\":1}}],[\"不同的隔离级别分别容易出现什么问题\",{\"0\":{\"126\":1}}],[\"不包括内容压缩\",{\"1\":{\"150\":1}}],[\"不包含任何方法的空接口类型\",{\"1\":{\"36\":1}}],[\"不支持流控制和拥塞控制\",{\"1\":{\"143\":1}}],[\"不会对服务器产生影响\",{\"1\":{\"151\":1}}],[\"不会直接显示在url中\",{\"1\":{\"151\":1}}],[\"不会出现数据乱序的情况\",{\"1\":{\"143\":1}}],[\"不会独占一行\",{\"1\":{\"82\":1}}],[\"不可靠性\",{\"1\":{\"143\":1}}],[\"不可靠的数据报服务\",{\"1\":{\"140\":1}}],[\"不可重复读\",{\"1\":{\"104\":1,\"125\":1,\"126\":1}}],[\"不存在归档这个功能\",{\"1\":{\"132\":1}}],[\"不允许其他人向中间写入一个数据\",{\"1\":{\"115\":1}}],[\"不允许重复\",{\"1\":{\"103\":1}}],[\"不需要显式使用\",{\"1\":{\"115\":1}}],[\"不需要排序\",{\"1\":{\"58\":1}}],[\"不符合最左前缀原则\",{\"1\":{\"111\":1}}],[\"不如b+树索引高效\",{\"1\":{\"104\":1}}],[\"不随滚动而移动\",{\"1\":{\"73\":1}}],[\"不占据文档流\",{\"1\":{\"73\":2}}],[\"不太方便查找到具体实现接口的类型\",{\"1\":{\"39\":1}}],[\"不一定需要由一个类型完全实现\",{\"1\":{\"33\":1}}],[\"不必关注它们具体是什么\",{\"1\":{\"33\":1}}],[\"不必考虑额外的同步措施\",{\"1\":{\"8\":1}}],[\"不知道对方的实现\",{\"1\":{\"32\":1}}],[\"不能将c2当成mover类型\",{\"1\":{\"30\":1}}],[\"不管是结构体类型还是对应的结构体指针类型的变量都可以赋值给该接口变量\",{\"1\":{\"29\":1}}],[\"不关心它是什么\",{\"1\":{\"26\":1}}],[\"不过在php和java语言中需要显式声明一个类实现了哪些接口\",{\"1\":{\"26\":1}}],[\"让我们专注于该类型提供的方法\",{\"1\":{\"25\":1}}],[\"方法是观察者接收通知的方式\",{\"1\":{\"49\":1}}],[\"方法通知所有观察者\",{\"1\":{\"49\":1}}],[\"方法移除观察者\",{\"1\":{\"49\":1}}],[\"方法添加新的观察者\",{\"1\":{\"49\":1}}],[\"方法都能当成sayer类型的变量来处理\",{\"1\":{\"25\":1}}],[\"方法\",{\"1\":{\"25\":3,\"33\":2,\"44\":1,\"49\":2,\"94\":1,\"141\":1}}],[\"方法名\",{\"1\":{\"23\":1}}],[\"方法名2\",{\"1\":{\"23\":1}}],[\"方法名1\",{\"1\":{\"23\":1}}],[\"羊饿了会咩咩咩~\",{\"1\":{\"25\":1}}],[\"羊饿了也会发出叫声\",{\"1\":{\"25\":1}}],[\"咩咩咩~\",{\"1\":{\"25\":1}}],[\"汪汪汪~\",{\"1\":{\"25\":1}}],[\"汪汪汪\",{\"1\":{\"24\":1,\"27\":1}}],[\"唯一知道的就是可以通过调用它的write方法来做一些事情\",{\"1\":{\"23\":1}}],[\"举个例子\",{\"1\":{\"23\":1,\"39\":1}}],[\"其他事务可能读取到不一致的元数据\",{\"1\":{\"118\":1}}],[\"其他事务需要等待该锁的释放\",{\"1\":{\"118\":1}}],[\"其应用领域包括但不限于\",{\"1\":{\"87\":1}}],[\"其语法格式如下\",{\"1\":{\"39\":1}}],[\"其中包括http\",{\"1\":{\"150\":1}}],[\"其中普通索引也叫二级索引\",{\"1\":{\"105\":1}}],[\"其中\",{\"1\":{\"23\":1,\"39\":1,\"55\":1}}],[\"其实它利用的是time\",{\"1\":{\"15\":1}}],[\"概括了一种类型应该具备哪些方法\",{\"1\":{\"21\":1}}],[\"是互联网上应用最为广泛的网络协议之一\",{\"1\":{\"150\":1}}],[\"是互联网上用于将域名转换为ip地址的分布式服务\",{\"1\":{\"142\":1}}],[\"是有边界的\",{\"1\":{\"143\":1}}],[\"是以字节流的方式进行数据传输的\",{\"1\":{\"143\":1}}],[\"是两种常见的传输层协议\",{\"1\":{\"143\":1}}],[\"是构建web的基础\",{\"1\":{\"140\":1}}],[\"是指\",{\"1\":{\"132\":1}}],[\"是指在关系型数据库中\",{\"1\":{\"103\":1}}],[\"是可以追加写入的\",{\"1\":{\"132\":1}}],[\"是循环写的\",{\"1\":{\"132\":1}}],[\"是逻辑日志\",{\"1\":{\"132\":1}}],[\"是物理日志\",{\"1\":{\"132\":1}}],[\"是数据库中两种常见的读取数据的方式\",{\"1\":{\"130\":1}}],[\"是数据库管理系统\",{\"1\":{\"116\":1}}],[\"是数组的长度\",{\"1\":{\"55\":1}}],[\"是什么\",{\"1\":{\"115\":2}}],[\"是每个表只包含一个实体类型\",{\"1\":{\"103\":2}}],[\"是盒子与其他元素之间的空间\",{\"1\":{\"68\":1}}],[\"是盒子的边界\",{\"1\":{\"68\":1}}],[\"是内容与边框之间的空间\",{\"1\":{\"68\":1}}],[\"是\",{\"1\":{\"49\":2,\"132\":2}}],[\"是一个时间参数\",{\"1\":{\"145\":1}}],[\"是一个包一个包的发送\",{\"1\":{\"143\":1}}],[\"是一个已经在程序启动时就创建好的singleton实例\",{\"1\":{\"44\":1}}],[\"是一种可靠的传输协议\",{\"1\":{\"144\":1}}],[\"是一种常见的循环结构\",{\"1\":{\"91\":1}}],[\"是一种常用的设计模式\",{\"1\":{\"48\":1}}],[\"是一种设计模式\",{\"1\":{\"43\":1}}],[\"是一种类型\",{\"1\":{\"21\":1}}],[\"是单例模式类\",{\"1\":{\"44\":2}}],[\"是组合writer接口和closer接口形成的新接口类型\",{\"1\":{\"34\":1}}],[\"是组合reader接口和closer接口形成的新接口类型\",{\"1\":{\"34\":1}}],[\"是组合reader接口和writer接口形成的新接口类型\",{\"1\":{\"34\":1}}],[\"是false\",{\"1\":{\"10\":1}}],[\"接下来\",{\"1\":{\"38\":1}}],[\"接下来会有越来越多的小动物跑过来\",{\"1\":{\"25\":1}}],[\"接口则包含添加\",{\"1\":{\"49\":1}}],[\"接口将包含一个方法\",{\"1\":{\"49\":1}}],[\"接口变量m是接口类型的零值\",{\"1\":{\"38\":1}}],[\"接口值可能赋值为任意类型的值\",{\"1\":{\"39\":1}}],[\"接口值是支持相互比较的\",{\"1\":{\"38\":1}}],[\"接口值m的动态类型为\",{\"1\":{\"38\":1}}],[\"接口值m的动态类型会被设置为\",{\"1\":{\"38\":1}}],[\"接口值示例\",{\"1\":{\"38\":4}}],[\"接口值\",{\"0\":{\"38\":1}}],[\"接口也可以作为结构体的一个字段\",{\"1\":{\"34\":1}}],[\"接口与接口之间可以通过互相嵌套形成新的接口类型\",{\"1\":{\"34\":1}}],[\"接口组合\",{\"0\":{\"34\":1}}],[\"接口的具体类\",{\"1\":{\"49\":2}}],[\"接口的方法可以通过在类型中嵌入其他类型或者结构体来实现\",{\"1\":{\"33\":1}}],[\"接口的定义\",{\"0\":{\"23\":1}}],[\"接口就是规定了一个需要实现的方法列表\",{\"1\":{\"24\":1}}],[\"接口名最好要能突出该接口的类型含义\",{\"1\":{\"23\":1}}],[\"接口是一种由程序员来定义的类型\",{\"1\":{\"21\":1}}],[\"接口类型变量\",{\"0\":{\"27\":1}}],[\"接口类型是go语言提供的一种工具\",{\"1\":{\"26\":1}}],[\"接口类型区别于我们之前章节中介绍的那些具体类型\",{\"1\":{\"25\":1}}],[\"接口类型名\",{\"1\":{\"23\":2}}],[\"接口类型\",{\"0\":{\"22\":1}}],[\"接口类型就像是一种约定\",{\"1\":{\"21\":1}}],[\"接口类型更注重\",{\"1\":{\"21\":1}}],[\"接口\",{\"1\":{\"21\":1,\"24\":1,\"32\":2,\"49\":4}}],[\"接口详解\",{\"0\":{\"21\":1}}],[\"接收方收到数据的顺序可能与发送顺序不一致\",{\"1\":{\"143\":1}}],[\"接收到ip地址后\",{\"1\":{\"142\":1}}],[\"接收sayer类型的参数\",{\"1\":{\"25\":1}}],[\"接收者不再会从channel中接收数据了\",{\"1\":{\"16\":1}}],[\"接收完已发送的数据后会返回元素类型的零值\",{\"1\":{\"10\":1}}],[\"接收的数据和发送的数据的顺序是一致的\",{\"1\":{\"8\":1}}],[\"学习资料\",{\"2\":{\"20\":1,\"41\":1,\"46\":1,\"51\":1,\"54\":1,\"57\":1,\"60\":1,\"63\":1,\"75\":1,\"85\":1,\"96\":1,\"100\":1,\"138\":1,\"153\":1}}],[\"学习笔记以及对行业的见解\",{\"1\":{\"0\":1}}],[\"等待2msl时间是tcp连接关闭过程的一个重要安全特性\",{\"1\":{\"145\":1}}],[\"等待本端应用程序也关闭连接\",{\"1\":{\"145\":1}}],[\"等待任务完成\",{\"1\":{\"18\":1}}],[\"等价\",{\"1\":{\"8\":3}}],[\"wait状态下等待的时间长度\",{\"1\":{\"145\":1}}],[\"wait状态等待2msl时间后\",{\"1\":{\"144\":1}}],[\"wait和2msl时间\",{\"0\":{\"145\":1}}],[\"wait\",{\"0\":{\"145\":1},\"1\":{\"145\":2}}],[\"wait阶段\",{\"1\":{\"144\":2}}],[\"way\",{\"1\":{\"144\":2}}],[\"wal\",{\"1\":{\"133\":1}}],[\"wash\",{\"1\":{\"33\":2}}],[\"washingmachine\",{\"1\":{\"33\":2}}],[\"with\",{\"1\":{\"92\":2,\"115\":1}}],[\"width=\",{\"1\":{\"79\":1}}],[\"width\",{\"1\":{\"67\":2,\"68\":2,\"71\":2,\"73\":4,\"98\":1}}],[\"white\",{\"1\":{\"98\":1}}],[\"while\",{\"1\":{\"91\":1}}],[\"while循环\",{\"1\":{\"91\":2}}],[\"whlie\",{\"1\":{\"91\":1}}],[\"www\",{\"1\":{\"77\":1,\"78\":1,\"79\":3}}],[\"w\",{\"1\":{\"26\":1}}],[\"web\",{\"1\":{\"66\":1,\"87\":2,\"98\":2}}],[\"websocket\",{\"1\":{\"140\":1},\"2\":{\"6\":1}}],[\"wechat\",{\"1\":{\"26\":4}}],[\"writecloser\",{\"1\":{\"34\":2}}],[\"write\",{\"1\":{\"23\":1,\"34\":1,\"115\":1,\"133\":1}}],[\"writer\",{\"1\":{\"23\":1,\"34\":3}}],[\"worker\",{\"1\":{\"18\":2}}],[\"worker做完任务后只需往channel发送一个数据就可以通知main\",{\"1\":{\"18\":1}}],[\"dns记录通常有生存时间\",{\"1\":{\"142\":1}}],[\"dns缓存过期\",{\"1\":{\"142\":1}}],[\"dns轮询\",{\"1\":{\"142\":1}}],[\"dns的工作流程\",{\"1\":{\"142\":1}}],[\"dns可以用于实现负载均衡和故障转移\",{\"1\":{\"142\":1}}],[\"dns负载均衡和故障转移\",{\"1\":{\"142\":1}}],[\"dns使用层次结构来组织域名\",{\"1\":{\"142\":1}}],[\"dns是一个分布式数据库\",{\"1\":{\"142\":1}}],[\"dns查询可以是迭代的或递归的\",{\"1\":{\"142\":1}}],[\"dns查询\",{\"1\":{\"141\":1}}],[\"dns\",{\"1\":{\"140\":1,\"142\":1}}],[\"dbms\",{\"1\":{\"116\":1}}],[\"ddd\",{\"1\":{\"98\":1}}],[\"dirty\",{\"1\":{\"125\":1}}],[\"display\",{\"1\":{\"67\":2,\"68\":1,\"71\":1}}],[\"div\",{\"1\":{\"67\":2,\"94\":1}}],[\"div>\",{\"1\":{\"67\":4,\"68\":2,\"71\":3,\"73\":9,\"82\":2,\"94\":3}}],[\"dm\",{\"1\":{\"44\":1}}],[\"deleterow\",{\"1\":{\"98\":3}}],[\"describe\",{\"1\":{\"79\":1}}],[\"demo\",{\"1\":{\"68\":4}}],[\"detach\",{\"1\":{\"49\":6}}],[\"default\",{\"1\":{\"39\":1}}],[\"defer\",{\"1\":{\"9\":1,\"44\":1}}],[\"dereference\",{\"1\":{\"38\":1}}],[\"datagram\",{\"1\":{\"140\":1,\"143\":1}}],[\"data<\",{\"1\":{\"78\":1}}],[\"data\",{\"1\":{\"34\":2}}],[\"dryer\",{\"1\":{\"33\":3}}],[\"dry\",{\"1\":{\"33\":2}}],[\"d2是dog指针类型\",{\"1\":{\"29\":1}}],[\"d2\",{\"1\":{\"29\":2}}],[\"d1是dog类型\",{\"1\":{\"29\":1}}],[\"d1\",{\"1\":{\"29\":2}}],[\"document\",{\"1\":{\"94\":4}}],[\"doctype\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"domain\",{\"1\":{\"140\":1,\"142\":1}}],[\"dom对象常用方法\",{\"1\":{\"94\":1}}],[\"dom通过addeventlistener触发了\",{\"1\":{\"94\":1}}],[\"dom通常于javascript一起使用\",{\"1\":{\"94\":1}}],[\"dom为这个文档树提供了一个编程接口\",{\"1\":{\"94\":1}}],[\"dom\",{\"0\":{\"94\":1}}],[\"dom属性案件触发了\",{\"1\":{\"94\":1}}],[\"dom属性绑定事件\",{\"1\":{\"94\":1}}],[\"dom属性\",{\"1\":{\"93\":1}}],[\"do\",{\"1\":{\"44\":1}}],[\"dog类型\",{\"1\":{\"39\":1}}],[\"dog结构体指针赋值给变量m\",{\"1\":{\"38\":1}}],[\"dog既可以实现sayer接口\",{\"1\":{\"32\":1}}],[\"dog和cat类型均实现了sayer接口\",{\"1\":{\"27\":1}}],[\"dog\",{\"1\":{\"25\":4,\"27\":1,\"29\":5,\"32\":4,\"33\":2,\"36\":3,\"38\":5,\"39\":4}}],[\"done\",{\"1\":{\"18\":5}}],[\"d\",{\"1\":{\"17\":1,\"25\":5,\"29\":1,\"32\":7,\"33\":3,\"38\":1,\"49\":1,\"52\":3}}],[\"判断值是零值还是正常读取的值\",{\"1\":{\"17\":1}}],[\"osi模型\",{\"1\":{\"140\":1}}],[\"o操作\",{\"1\":{\"107\":1}}],[\"ol\",{\"1\":{\"81\":1}}],[\"ol>\",{\"1\":{\"78\":1}}],[\"overflow\",{\"1\":{\"71\":1}}],[\"of\",{\"1\":{\"55\":1}}],[\"o\",{\"1\":{\"49\":4,\"55\":7}}],[\"observer2\",{\"1\":{\"49\":2}}],[\"observer1\",{\"1\":{\"49\":3}}],[\"observers\",{\"1\":{\"49\":8}}],[\"observer\",{\"1\":{\"48\":2,\"49\":18}}],[\"object\",{\"1\":{\"94\":1}}],[\"obj\",{\"1\":{\"26\":8,\"33\":5}}],[\"org\",{\"1\":{\"142\":1}}],[\"order\",{\"1\":{\"129\":2}}],[\"original\",{\"1\":{\"55\":1,\"58\":1,\"61\":1}}],[\"or\",{\"1\":{\"38\":1}}],[\"onblur=\",{\"1\":{\"93\":1}}],[\"onblur\",{\"1\":{\"93\":1}}],[\"onfocus=\",{\"1\":{\"93\":1}}],[\"onfocus\",{\"1\":{\"93\":1}}],[\"onselect\",{\"1\":{\"93\":1}}],[\"onmouseout\",{\"1\":{\"93\":1}}],[\"onmouseover\",{\"1\":{\"93\":1}}],[\"onchange\",{\"1\":{\"93\":1}}],[\"onclick=function\",{\"1\":{\"94\":1}}],[\"onclick=\",{\"1\":{\"93\":1,\"98\":5}}],[\"onclick\",{\"1\":{\"93\":1}}],[\"once的do方法可以确保无论调用多少次\",{\"1\":{\"44\":1}}],[\"once的go语言单例模式实现示例\",{\"1\":{\"44\":1}}],[\"once变量确保instance的赋值操作只执行一次\",{\"1\":{\"44\":1}}],[\"once\",{\"1\":{\"44\":3}}],[\"on\",{\"1\":{\"17\":1}}],[\"ok\",{\"1\":{\"8\":1,\"10\":3,\"17\":3,\"39\":2}}],[\"总的来说\",{\"1\":{\"150\":1}}],[\"总体来说\",{\"1\":{\"148\":1}}],[\"总结来说\",{\"1\":{\"151\":1}}],[\"总结\",{\"1\":{\"143\":1}}],[\"总结一下channel关闭后sender的receiver操作\",{\"1\":{\"17\":1}}],[\"总是优先和最左边的类型结合\",{\"1\":{\"8\":1}}],[\"类名从样式文件引入\",{\"1\":{\"79\":1}}],[\"类选择器\",{\"1\":{\"67\":2}}],[\"类实例在类加载时就创建好了\",{\"1\":{\"44\":1}}],[\"类实例在第一次使用时才创建\",{\"1\":{\"44\":1}}],[\"类型上包括唯一索引\",{\"1\":{\"105\":1}}],[\"类型断言失败\",{\"1\":{\"39\":1}}],[\"类型断言成功\",{\"1\":{\"39\":1}}],[\"类型断言\",{\"0\":{\"39\":1}}],[\"类型\",{\"1\":{\"38\":1}}],[\"类型与接口的关系\",{\"0\":{\"31\":1}}],[\"类型的数据\",{\"1\":{\"8\":2}}],[\"类似timer\",{\"1\":{\"16\":1}}],[\"当用户通过浏览器访问一个使用ssl\",{\"1\":{\"149\":1}}],[\"当客户端想要关闭连接时\",{\"1\":{\"144\":1}}],[\"当有一条记录需要更新的时候\",{\"1\":{\"133\":1}}],[\"当前读取适用于需要读取最新状态的场景\",{\"1\":{\"130\":1}}],[\"当前读取将能够看到这些未提交的修改\",{\"1\":{\"130\":1}}],[\"当前读取获取的是实时的\",{\"1\":{\"130\":1}}],[\"当前读是指读取数据库中最新的数据\",{\"1\":{\"130\":1}}],[\"当前读\",{\"1\":{\"130\":1}}],[\"当前时间\",{\"1\":{\"16\":1}}],[\"当进行快照读取时\",{\"1\":{\"130\":1}}],[\"当多个事务相互等待对方所持有的元数据锁时\",{\"1\":{\"118\":1}}],[\"当多个事务需要访问相同的元数据对象时\",{\"1\":{\"118\":1}}],[\"当多个事务同时访问数据库对象的元数据时\",{\"1\":{\"117\":1}}],[\"当多个事务同时访问同一数据时\",{\"1\":{\"117\":1}}],[\"当一个事务对数据库中的数据进行修改\",{\"1\":{\"117\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"48\":1}}],[\"当查询没有索引时\",{\"1\":{\"115\":1}}],[\"当要对表做结构变更操作的时候\",{\"1\":{\"115\":1}}],[\"当对一个表做增删改查操作的时候\",{\"1\":{\"115\":1}}],[\"当mysql估计使用全表扫描比使用索引快的时候\",{\"1\":{\"111\":1}}],[\"当数据量足够大时\",{\"1\":{\"107\":1}}],[\"当网页被加载时\",{\"1\":{\"94\":1}}],[\"当指定的条件为真\",{\"1\":{\"90\":1}}],[\"当输入数组是逆序的\",{\"1\":{\"55\":1}}],[\"当输入数组已经是有序的\",{\"1\":{\"55\":2}}],[\"当收到通知时做出相应的反应\",{\"1\":{\"49\":1}}],[\"当\",{\"1\":{\"49\":2}}],[\"当主题状态频繁变化时\",{\"1\":{\"48\":1}}],[\"当且仅当接口值的动态类型和动态值都相等时才相等\",{\"1\":{\"38\":1}}],[\"当然可以\",{\"1\":{\"25\":1}}],[\"当然如果你只是想单纯的等待的话\",{\"1\":{\"16\":1}}],[\"当你看到一个writer接口类型的值时\",{\"1\":{\"23\":1}}],[\"当方法名首字母是大写且这个接口类型名首字母也是大写时\",{\"1\":{\"23\":1}}],[\"当我们使用接口类型说明相比于它是什么更关心它能做什么\",{\"1\":{\"21\":1}}],[\"你好\",{\"1\":{\"36\":1,\"87\":1}}],[\"你不知道它是什么\",{\"1\":{\"23\":1}}],[\"你还可以使用timer\",{\"1\":{\"16\":1}}],[\"你可以观察输出的时间\",{\"1\":{\"16\":1}}],[\"你可以告诉timer你要等待多长时间\",{\"1\":{\"16\":1}}],[\"你可以在外面加一个无限的for循环\",{\"1\":{\"14\":1}}],[\"你可以在多个goroutine从\",{\"1\":{\"8\":1}}],[\"你可以使用一个额外的返回参数来检查channel是否关闭\",{\"1\":{\"10\":1}}],[\"你可以把它看成一个管道\",{\"1\":{\"7\":1}}],[\"number\",{\"1\":{\"144\":2}}],[\"null值查询\",{\"1\":{\"111\":1}}],[\"null\",{\"1\":{\"88\":2}}],[\"nav\",{\"1\":{\"82\":1}}],[\"name=row\",{\"1\":{\"98\":1}}],[\"name=\",{\"1\":{\"83\":6}}],[\"name\",{\"1\":{\"32\":4,\"33\":2,\"37\":1,\"38\":2,\"39\":3,\"88\":2,\"92\":3,\"98\":1,\"140\":1,\"142\":1}}],[\"non\",{\"1\":{\"125\":1}}],[\"none\",{\"1\":{\"70\":1}}],[\"normal\",{\"1\":{\"73\":5}}],[\"not\",{\"1\":{\"52\":1,\"154\":1}}],[\"notify\",{\"1\":{\"49\":6}}],[\"next\",{\"0\":{\"121\":1},\"1\":{\"115\":2,\"121\":2}}],[\"net等\",{\"1\":{\"142\":1}}],[\"net\",{\"1\":{\"67\":1,\"79\":1}}],[\"newrow\",{\"1\":{\"98\":1}}],[\"newrow=table\",{\"1\":{\"98\":1}}],[\"new\",{\"1\":{\"38\":2,\"39\":1,\"49\":1}}],[\"newticker\",{\"1\":{\"16\":1}}],[\"newtimer\",{\"1\":{\"16\":2}}],[\"nth\",{\"1\":{\"67\":1}}],[\"nlogn\",{\"1\":{\"55\":2}}],[\"n2\",{\"1\":{\"55\":4}}],[\"n\",{\"1\":{\"26\":2,\"32\":2,\"33\":2,\"34\":2,\"36\":4,\"37\":1,\"39\":7,\"44\":1,\"49\":1,\"52\":2,\"55\":4,\"61\":3,\"98\":1}}],[\"nil来判断此时的接口值是否为空\",{\"1\":{\"38\":1}}],[\"nil\",{\"1\":{\"14\":1,\"38\":3,\"39\":1,\"44\":2}}],[\"代表未来的一个单一事件\",{\"1\":{\"16\":1}}],[\"代表channel的缓存的大小\",{\"1\":{\"8\":1}}],[\"代表channel的方向\",{\"1\":{\"8\":1}}],[\"代表channel容纳的最多的元素的数量\",{\"1\":{\"8\":1}}],[\"acknowledgment\",{\"1\":{\"146\":1}}],[\"ack包后\",{\"1\":{\"144\":1}}],[\"ack\",{\"1\":{\"144\":1,\"146\":1}}],[\"action=\",{\"1\":{\"83\":1}}],[\"active\",{\"1\":{\"67\":1}}],[\"ahead\",{\"1\":{\"133\":1}}],[\"addrow\",{\"1\":{\"98\":2}}],[\"address\",{\"1\":{\"38\":1}}],[\"addeventlistener\",{\"1\":{\"94\":1}}],[\"addeventlistener方法\",{\"1\":{\"93\":1}}],[\"align\",{\"1\":{\"98\":2}}],[\"alert\",{\"1\":{\"87\":1,\"90\":3,\"93\":1,\"94\":2}}],[\"alt=\",{\"1\":{\"67\":1,\"79\":5}}],[\"a>\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"79\":3,\"82\":5,\"94\":2}}],[\"absolute\",{\"1\":{\"73\":3}}],[\"amp\",{\"1\":{\"67\":1,\"79\":1}}],[\"amount\",{\"1\":{\"26\":4}}],[\"akamaized\",{\"1\":{\"67\":1,\"79\":1}}],[\"aqua\",{\"1\":{\"67\":2,\"68\":1,\"71\":1,\"73\":1}}],[\"array\",{\"1\":{\"52\":1,\"55\":2,\"58\":2,\"61\":2}}],[\"arr\",{\"1\":{\"52\":6,\"55\":14,\"58\":25,\"61\":12}}],[\"another\",{\"1\":{\"49\":1}}],[\"any\",{\"1\":{\"36\":3}}],[\"appendchild\",{\"1\":{\"94\":1}}],[\"append\",{\"1\":{\"49\":2}}],[\"agent等\",{\"1\":{\"141\":1}}],[\"age\",{\"1\":{\"37\":1}}],[\"a\",{\"1\":{\"27\":2,\"37\":3,\"39\":3,\"82\":1}}],[\"attach\",{\"1\":{\"49\":7}}],[\"at\",{\"1\":{\"16\":1,\"52\":1}}],[\"after方法\",{\"1\":{\"15\":1}}],[\"after\",{\"1\":{\"15\":1,\"67\":1,\"71\":1}}],[\"assignment\",{\"1\":{\"8\":1}}],[\"因为参数数据放在请求的消息体中\",{\"1\":{\"151\":1}}],[\"因为需要进行加密解密等过程\",{\"1\":{\"148\":1}}],[\"因为\",{\"1\":{\"132\":1}}],[\"因为读取到的数据可能会在事务提交之后发生变化\",{\"1\":{\"130\":1}}],[\"因为包含行锁\",{\"1\":{\"115\":1}}],[\"因为过多的索引会增加数据维护的开销\",{\"1\":{\"112\":1}}],[\"因为多个线程可能同时创建多个实例\",{\"1\":{\"44\":1}}],[\"因为它只是动态值的部分为nil\",{\"1\":{\"38\":1}}],[\"因为singer接口只包含一个sing方法\",{\"1\":{\"24\":1}}],[\"因为上面我们提到\",{\"1\":{\"15\":1}}],[\"因此会出现冲突\",{\"1\":{\"115\":1}}],[\"因此在对数据进行操作时\",{\"1\":{\"122\":2}}],[\"因此在相同的数据下\",{\"1\":{\"104\":1}}],[\"因此在高并发环境下性能较差\",{\"1\":{\"104\":1}}],[\"因此在最坏情况下可能会退化到\",{\"1\":{\"55\":1}}],[\"因此它们会在页面上呈现为一块独立的内容块\",{\"1\":{\"81\":1}}],[\"因此保持了它们的原始顺序\",{\"1\":{\"55\":1}}],[\"因此无需使用互斥锁来保护实例的创建过程\",{\"1\":{\"44\":1}}],[\"因此任何类型都可以视为实现了空接口\",{\"1\":{\"36\":1}}],[\"因此我们会打印出timeout\",{\"1\":{\"15\":1}}],[\"因此\",{\"1\":{\"0\":1,\"115\":1}}],[\"则会认为数据包丢失或损坏\",{\"1\":{\"146\":1}}],[\"则会选择default去处理\",{\"1\":{\"14\":1}}],[\"则添加的是quic头部\",{\"1\":{\"141\":1}}],[\"则使用quic\",{\"1\":{\"141\":1}}],[\"则回滚事务\",{\"1\":{\"122\":1}}],[\"则select语句会阻塞\",{\"1\":{\"14\":1}}],[\"则send会被执行\",{\"1\":{\"9\":1}}],[\"比如\",{\"1\":{\"132\":1}}],[\"比如文本\",{\"1\":{\"68\":1}}],[\"比如切片\",{\"1\":{\"38\":1}}],[\"比如满减券\",{\"1\":{\"26\":1}}],[\"比如三角形\",{\"1\":{\"26\":1}}],[\"比如一个网上商城可能使用支付宝\",{\"1\":{\"26\":1}}],[\"比如同时有多个channel可以接收数据\",{\"1\":{\"14\":1}}],[\"比如下面的\",{\"1\":{\"9\":1}}],[\"亦或者default\",{\"1\":{\"14\":1}}],[\"操作系统会检查自己的dns缓存\",{\"1\":{\"142\":1}}],[\"操作系统dns缓存查询\",{\"1\":{\"142\":1}}],[\"操作完更新语句\",{\"1\":{\"134\":1}}],[\"操作\",{\"1\":{\"14\":1}}],[\"操作符\",{\"0\":{\"10\":1}}],[\"程序会一直阻塞在for\",{\"1\":{\"13\":1}}],[\"1和2\",{\"1\":{\"141\":1}}],[\"19\",{\"0\":{\"122\":1}}],[\"168\",{\"1\":{\"142\":1}}],[\"16\",{\"0\":{\"119\":1}}],[\"16px\",{\"1\":{\"65\":1,\"66\":1}}],[\"15\",{\"0\":{\"118\":1}}],[\"150px\",{\"1\":{\"71\":1}}],[\"13\",{\"0\":{\"116\":1}}],[\"1nf\",{\"1\":{\"103\":1}}],[\"1px\",{\"1\":{\"98\":1}}],[\"17\",{\"0\":{\"120\":1},\"1\":{\"90\":1}}],[\"14\",{\"0\":{\"117\":1},\"1\":{\"88\":2}}],[\"11\",{\"0\":{\"113\":1,\"150\":1},\"1\":{\"55\":1,\"61\":1}}],[\"120px\",{\"1\":{\"73\":4}}],[\"12\",{\"0\":{\"115\":1,\"151\":1},\"1\":{\"55\":1,\"61\":1}}],[\"18\",{\"0\":{\"121\":1},\"1\":{\"37\":1}}],[\"10px\",{\"1\":{\"68\":1}}],[\"10\",{\"0\":{\"112\":1,\"149\":1},\"1\":{\"13\":1,\"14\":1,\"17\":4,\"58\":1}}],[\"100px\",{\"1\":{\"67\":2,\"71\":4,\"73\":8}}],[\"100\",{\"1\":{\"8\":1,\"12\":1,\"26\":6,\"36\":1,\"79\":2,\"98\":1}}],[\"1\",{\"0\":{\"103\":1,\"140\":1},\"1\":{\"13\":2,\"14\":1,\"15\":6,\"16\":1,\"17\":4,\"18\":1,\"38\":1,\"49\":1,\"52\":7,\"55\":2,\"58\":5,\"61\":2,\"78\":1,\"98\":4,\"104\":1,\"132\":1,\"141\":5,\"142\":2,\"150\":7}}],[\"b+树实现了聚集索引\",{\"1\":{\"107\":1}}],[\"b+树的树高比红黑树和二叉树低\",{\"1\":{\"107\":1}}],[\"b+树的叶子节点上存放的是数据页\",{\"1\":{\"106\":1}}],[\"b+树的叶子节点是一个有序链表\",{\"1\":{\"106\":1,\"107\":1}}],[\"b+树的所有数据都存放在叶子节点上\",{\"1\":{\"106\":1}}],[\"b+树更适合范围查询\",{\"1\":{\"106\":1,\"107\":1}}],[\"b+树\",{\"1\":{\"106\":1}}],[\"b树的叶子节点是无序的\",{\"1\":{\"106\":1}}],[\"b树的叶子节点和非叶子节点都可以存放数据\",{\"1\":{\"106\":1}}],[\"b树\",{\"1\":{\"106\":1}}],[\"b树和b+树都是一种自平衡的多叉树\",{\"1\":{\"106\":1}}],[\"b树和b+树的区别\",{\"0\":{\"106\":1}}],[\"bb1msihc\",{\"1\":{\"79\":1}}],[\"bb1msoou\",{\"1\":{\"67\":1}}],[\"basic和个人资料user\",{\"1\":{\"129\":1}}],[\"baidu等\",{\"1\":{\"142\":1}}],[\"baidu\",{\"1\":{\"79\":1}}],[\"background\",{\"1\":{\"67\":6,\"68\":2,\"71\":3,\"73\":6,\"98\":1}}],[\"b>\",{\"1\":{\"78\":1}}],[\"before\",{\"1\":{\"67\":1}}],[\"books\",{\"0\":{\"158\":1}}],[\"bool\",{\"1\":{\"18\":2,\"34\":3,\"39\":2}}],[\"body标签的内联样式\",{\"1\":{\"87\":1}}],[\"body>\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"box2\",{\"1\":{\"73\":4,\"94\":2}}],[\"box\",{\"1\":{\"73\":7}}],[\"box1\",{\"1\":{\"73\":4,\"94\":2}}],[\"both\",{\"1\":{\"71\":1}}],[\"border=\",{\"1\":{\"78\":1}}],[\"border\",{\"1\":{\"68\":7,\"71\":1,\"98\":2}}],[\"bolder\",{\"1\":{\"67\":1}}],[\"blur\",{\"1\":{\"93\":2}}],[\"blueviolet\",{\"1\":{\"67\":1,\"71\":1}}],[\"blue\",{\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"blank\",{\"1\":{\"79\":1}}],[\"block\",{\"0\":{\"81\":1},\"1\":{\"67\":7,\"68\":1}}],[\"blocking\",{\"0\":{\"11\":1},\"1\":{\"8\":1}}],[\"button\",{\"1\":{\"94\":5,\"98\":5}}],[\"button><button\",{\"1\":{\"98\":2}}],[\"button>\",{\"1\":{\"93\":1,\"94\":1,\"98\":3}}],[\"bubblesort\",{\"1\":{\"55\":2}}],[\"buffered\",{\"0\":{\"12\":1}}],[\"binlog和redolog都处于完成状态\",{\"1\":{\"134\":1}}],[\"bin\",{\"0\":{\"132\":1},\"1\":{\"132\":6}}],[\"binarysearch\",{\"1\":{\"52\":3}}],[\"bilibili\",{\"1\":{\"79\":2}}],[\"bird类型的sing方法\",{\"1\":{\"24\":1}}],[\"bird\",{\"1\":{\"24\":2}}],[\"br\",{\"1\":{\"82\":1}}],[\"brown\",{\"1\":{\"73\":1}}],[\"break用于跳出循环\",{\"1\":{\"91\":1}}],[\"break\",{\"1\":{\"49\":1,\"55\":1,\"91\":1}}],[\"brand\",{\"1\":{\"33\":3,\"38\":1}}],[\"b\",{\"1\":{\"24\":1,\"27\":2}}],[\"byte\",{\"1\":{\"23\":1,\"34\":2}}],[\"90\",{\"1\":{\"55\":1,\"61\":1}}],[\"9\",{\"0\":{\"111\":1,\"148\":1},\"1\":{\"11\":1,\"52\":1,\"58\":1}}],[\"8px\",{\"1\":{\"98\":1}}],[\"8080\",{\"1\":{\"83\":1}}],[\"8\",{\"0\":{\"110\":1,\"147\":1},\"1\":{\"11\":1,\"52\":1,\"58\":1,\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"2相比http\",{\"1\":{\"150\":1}}],[\"2的多路复用\",{\"1\":{\"150\":1}}],[\"2和http\",{\"1\":{\"150\":1}}],[\"2msl确保了即使在最坏的情况下\",{\"1\":{\"145\":1}}],[\"2msl\",{\"1\":{\"145\":1}}],[\"2msl时间\",{\"1\":{\"145\":1}}],[\"29\",{\"0\":{\"135\":1}}],[\"28\",{\"0\":{\"134\":1}}],[\"27\",{\"0\":{\"133\":1}}],[\"26\",{\"0\":{\"132\":1}}],[\"24\",{\"0\":{\"129\":1}}],[\"23\",{\"0\":{\"128\":1}}],[\"23123\",{\"1\":{\"79\":1}}],[\"21\",{\"0\":{\"125\":1,\"127\":1}}],[\"2nf\",{\"1\":{\"103\":1}}],[\"2022\",{\"1\":{\"129\":1}}],[\"2021\",{\"1\":{\"129\":1}}],[\"2020\",{\"1\":{\"129\":1}}],[\"20240701114204298\",{\"1\":{\"94\":1}}],[\"20240629142509994\",{\"1\":{\"68\":1}}],[\"20\",{\"0\":{\"124\":1}}],[\"200px\",{\"1\":{\"68\":1}}],[\"20px\",{\"1\":{\"66\":1,\"67\":1,\"94\":1,\"98\":1}}],[\"22\",{\"0\":{\"126\":1},\"1\":{\"55\":1,\"61\":1}}],[\"25\",{\"0\":{\"130\":1},\"1\":{\"55\":1,\"61\":1}}],[\"2f元\",{\"1\":{\"26\":2}}],[\"2\",{\"0\":{\"104\":1,\"141\":1},\"1\":{\"11\":3,\"15\":1,\"16\":3,\"17\":4,\"38\":1,\"49\":1,\"52\":2,\"58\":1,\"94\":1,\"98\":1,\"104\":1,\"141\":1,\"150\":1}}],[\"7\",{\"0\":{\"109\":1,\"146\":1},\"1\":{\"11\":1,\"52\":1,\"58\":1}}],[\"rtt连接建立\",{\"1\":{\"150\":1}}],[\"radio\",{\"1\":{\"83\":3}}],[\"random\",{\"1\":{\"14\":1}}],[\"range那一行\",{\"1\":{\"13\":1}}],[\"range语句可以处理channel\",{\"1\":{\"13\":1}}],[\"range\",{\"0\":{\"13\":1},\"1\":{\"11\":1,\"13\":2,\"16\":1,\"17\":1,\"49\":2}}],[\"rowid\",{\"1\":{\"109\":1}}],[\"row\",{\"1\":{\"98\":4}}],[\"row=button\",{\"1\":{\"98\":2}}],[\"rows\",{\"1\":{\"98\":1}}],[\"row<\",{\"1\":{\"78\":1}}],[\"routergroup\",{\"1\":{\"39\":3}}],[\"right\",{\"1\":{\"70\":1,\"71\":3,\"73\":1}}],[\"runtime\",{\"1\":{\"38\":2}}],[\"r\",{\"1\":{\"34\":2}}],[\"retransmit\",{\"1\":{\"146\":1}}],[\"retransmission\",{\"1\":{\"146\":1}}],[\"return\",{\"1\":{\"14\":2,\"34\":2,\"44\":3,\"52\":2,\"58\":2,\"92\":1}}],[\"repeatable\",{\"1\":{\"125\":1}}],[\"replacechild\",{\"1\":{\"94\":1}}],[\"record\",{\"1\":{\"115\":1}}],[\"received\",{\"1\":{\"49\":1}}],[\"receive语句可以将值赋值给一个或者两个变量\",{\"1\":{\"14\":1}}],[\"receive支持\",{\"1\":{\"8\":1}}],[\"receive\",{\"0\":{\"10\":1},\"1\":{\"8\":1,\"11\":1}}],[\"removechild\",{\"1\":{\"94\":1,\"98\":1}}],[\"relative\",{\"1\":{\"73\":3}}],[\"rel=\",{\"1\":{\"66\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"98\":1}}],[\"redolog\",{\"1\":{\"136\":2}}],[\"redolog和binlog\",{\"1\":{\"134\":1}}],[\"redo\",{\"0\":{\"136\":1},\"1\":{\"132\":4,\"133\":1,\"135\":1}}],[\"red\",{\"1\":{\"66\":1,\"67\":3,\"68\":1,\"94\":1}}],[\"reverse\",{\"1\":{\"34\":5}}],[\"readcloser\",{\"1\":{\"34\":2}}],[\"readwriter\",{\"1\":{\"34\":2}}],[\"read\",{\"1\":{\"34\":1,\"115\":2,\"125\":3,\"130\":4}}],[\"reader\",{\"1\":{\"34\":3}}],[\"res\",{\"1\":{\"15\":2}}],[\"result\",{\"1\":{\"15\":1}}],[\"0和https添加tcp头部\",{\"1\":{\"141\":1}}],[\"0\",{\"1\":{\"11\":2,\"13\":1,\"14\":3,\"17\":3,\"52\":1,\"55\":2,\"58\":1,\"61\":1,\"73\":1,\"91\":1,\"94\":2,\"98\":2,\"141\":3}}],[\"y=5\",{\"1\":{\"88\":1}}],[\"yellow\",{\"1\":{\"68\":1,\"71\":1,\"73\":1}}],[\"yellowgreen\",{\"1\":{\"67\":1,\"68\":1,\"71\":1}}],[\"yourapp\",{\"1\":{\"44\":2}}],[\"y\",{\"1\":{\"11\":3,\"14\":5,\"38\":2,\"88\":1}}],[\"默认情况下\",{\"1\":{\"11\":1}}],[\"x在性能上有显著提升\",{\"1\":{\"150\":1}}],[\"xid\",{\"1\":{\"136\":2}}],[\"x+y\",{\"1\":{\"11\":1,\"14\":2}}],[\"x\",{\"1\":{\"10\":3,\"11\":2,\"14\":5,\"27\":5,\"29\":5,\"30\":3,\"36\":14,\"38\":2,\"39\":7,\"88\":2,\"150\":2}}],[\"而post适合用于提交数据\",{\"1\":{\"151\":1}}],[\"而post请求的参数数据在消息体中\",{\"1\":{\"151\":1}}],[\"而post请求没有长度限制\",{\"1\":{\"151\":1}}],[\"而post请求将参数数据放在请求的消息体中\",{\"1\":{\"151\":1}}],[\"而http\",{\"1\":{\"150\":1}}],[\"而http容易受到攻击\",{\"1\":{\"148\":1}}],[\"而http协议的默认端口是80\",{\"1\":{\"148\":1}}],[\"而http是明文传输\",{\"1\":{\"148\":1}}],[\"而http不需要\",{\"1\":{\"148\":1}}],[\"而udp提供了低延迟和实时性\",{\"1\":{\"143\":1}}],[\"而没有\",{\"1\":{\"136\":1}}],[\"而这个更新往往是在系统比较空闲的时候做\",{\"1\":{\"133\":1}}],[\"而当前读取则适用于需要读取最新数据状态的场景\",{\"1\":{\"130\":1}}],[\"而写操作则需要获取排它锁\",{\"1\":{\"117\":1}}],[\"而且会和写入操作发生冲突\",{\"1\":{\"115\":1}}],[\"而会等到整个事务提交后再释放\",{\"1\":{\"115\":1}}],[\"而二级索引使用的是非聚集索引\",{\"1\":{\"109\":1}}],[\"而myisam使用的b树索引\",{\"1\":{\"104\":1}}],[\"而myisam则只支持表级锁定\",{\"1\":{\"104\":1}}],[\"而是收到了三个重复的ack\",{\"1\":{\"146\":1}}],[\"而是在事务提交之前检查数据是否被其他事务修改过\",{\"1\":{\"122\":1}}],[\"而是可以根据用户操作动态变化的\",{\"1\":{\"86\":1}}],[\"而是立即返回\",{\"1\":{\"10\":1}}],[\"而\",{\"1\":{\"49\":1}}],[\"而想要从接口值中获取到对应的实际值需要使用类型断言\",{\"1\":{\"39\":1}}],[\"而fmt包内部其实是使用反射的机制在程序运行时获取到动态类型的名称\",{\"1\":{\"39\":1}}],[\"而动态类型部分保存着对应值的类型\",{\"1\":{\"38\":1}}],[\"而接口间彼此独立\",{\"1\":{\"32\":1}}],[\"而channel的接收者可以以固定的时间间隔从channel中读取事件\",{\"1\":{\"16\":1}}],[\"而不是tcp\",{\"1\":{\"150\":1}}],[\"而不是等待超时计时器到期\",{\"1\":{\"146\":1}}],[\"而不是整行的宽度\",{\"1\":{\"82\":1}}],[\"而不是类型本身\",{\"1\":{\"25\":1}}],[\"而不是result\",{\"1\":{\"15\":1}}],[\"而不必使用显示的锁或者条件变量\",{\"1\":{\"11\":1}}],[\"而只有缓存空了后receive才会阻塞\",{\"1\":{\"8\":1}}],[\"从而影响系统的响应性能和并发能力\",{\"1\":{\"118\":1}}],[\"从而影响性能\",{\"1\":{\"48\":1}}],[\"从而导致事务等待和执行时间延长\",{\"1\":{\"118\":1}}],[\"从而改变了它们原来的相对顺序\",{\"1\":{\"55\":1}}],[\"从而让该结构体类型实现了该接口类型\",{\"1\":{\"34\":1}}],[\"从上面的代码中我们可以发现\",{\"1\":{\"29\":1}}],[\"从上面的代码示例中我们可以看出\",{\"1\":{\"26\":1}}],[\"从一个被close的channel中接收数据不会被阻塞\",{\"1\":{\"10\":1}}],[\"从一个nil\",{\"1\":{\"10\":1}}],[\"从channel\",{\"1\":{\"7\":1}}],[\"这些服务器相互协作\",{\"1\":{\"142\":1}}],[\"这些兴趣不仅丰富了我的生活体验\",{\"1\":{\"0\":1}}],[\"这涉及到三次握手过程\",{\"1\":{\"141\":1}}],[\"这一行的\",{\"1\":{\"132\":1}}],[\"这一次\",{\"1\":{\"38\":1}}],[\"这意味着无论事务中的其他并发操作是否已提交\",{\"1\":{\"130\":1}}],[\"这意味着在程序的任何地方调用getinstance\",{\"1\":{\"44\":1}}],[\"这可以减少不必要的重传\",{\"1\":{\"146\":1}}],[\"这可以提高程序的性能\",{\"1\":{\"44\":1}}],[\"这可能包括查询数据库\",{\"1\":{\"141\":1}}],[\"这可能导致其他事务阻塞和长时间等待\",{\"1\":{\"118\":1}}],[\"这并不是绝对的\",{\"1\":{\"55\":1}}],[\"这是一种可选的tcp扩展\",{\"1\":{\"146\":1}}],[\"这是一个段落标签\",{\"1\":{\"79\":1}}],[\"这是一个p标签选择器\",{\"1\":{\"65\":1}}],[\"这是一个实现了\",{\"1\":{\"49\":1}}],[\"这是因为在分区过程中\",{\"1\":{\"55\":1}}],[\"这通常发生在每次选择的基准元素都能将数组大致分为两部分时\",{\"1\":{\"55\":1}}],[\"这有助于降低系统各部分之间的耦合度\",{\"1\":{\"48\":1}}],[\"这种机制可以确保双方都同意建立连接\",{\"1\":{\"144\":1}}],[\"这种模式用于建立对象间的一种一对多的依赖关系\",{\"1\":{\"48\":1}}],[\"这种模式在go中非常容易实现\",{\"1\":{\"44\":1}}],[\"这种实现方式确保了单例实例的创建是线程安全的\",{\"1\":{\"44\":1}}],[\"这种方式可以保证线程安全\",{\"1\":{\"44\":1}}],[\"这种方式可以延迟对象的创建\",{\"1\":{\"44\":1}}],[\"这种方式可以用来在gororutine中进行同步\",{\"1\":{\"11\":1}}],[\"这种方式是并发安全的\",{\"1\":{\"44\":1}}],[\"这种方式是懒汉式单例模式的实现\",{\"1\":{\"44\":1}}],[\"这正是我们实现单例的关键\",{\"1\":{\"44\":1}}],[\"这里可以初始化单例的一些属性\",{\"1\":{\"44\":2}}],[\"这里可以放置你需要的变量\",{\"1\":{\"44\":2}}],[\"这样可以减少连接建立和断开的开销\",{\"1\":{\"143\":1}}],[\"这样可以防止其他并发事务同时修改相同的数据\",{\"1\":{\"117\":1}}],[\"这样可以提高并发性\",{\"1\":{\"115\":1}}],[\"这样即可使得元素进行浮动\",{\"1\":{\"70\":1}}],[\"这样做的目的是保证得到的reverse结构体中的interface属性一定不为nil\",{\"1\":{\"34\":1}}],[\"这样我们在代码中就可以把狗和汽车当成一个会动的类型来处理\",{\"1\":{\"33\":1}}],[\"这样就能够在不修改既有函数调用的基础上\",{\"1\":{\"26\":1}}],[\"这样就称为bird实现了singer接口\",{\"1\":{\"24\":1}}],[\"这就是典型的\",{\"1\":{\"26\":1}}],[\"这就足够了\",{\"1\":{\"25\":1}}],[\"这时候我们可能就需要一个超时操作\",{\"1\":{\"15\":1}}],[\"这个术语经常被用来泛指ssl和tls协议\",{\"1\":{\"149\":1}}],[\"这个阶段有两个作用\",{\"1\":{\"145\":1}}],[\"这个阶段就是为了让应用程序有时间处理完剩余的数据\",{\"1\":{\"145\":1}}],[\"这个包包含了服务器的初始序列号\",{\"1\":{\"144\":1}}],[\"这个包包含了客户端的初始序列号\",{\"1\":{\"144\":1}}],[\"这个时候更新就算完成了\",{\"1\":{\"133\":1}}],[\"这个时候又跑来了一只羊\",{\"1\":{\"25\":1}}],[\"这个过程就是回表\",{\"1\":{\"109\":1}}],[\"这个接口定义了\",{\"1\":{\"49\":1}}],[\"这个接口定义了一个\",{\"1\":{\"49\":1}}],[\"这个变量在类加载时就初始化\",{\"1\":{\"44\":1}}],[\"这个方法可以被接口所在的包\",{\"1\":{\"23\":1}}],[\"这个channel被关闭了或者为空\",{\"1\":{\"10\":1}}],[\"这个表达式会一直被block\",{\"1\":{\"10\":1}}],[\"ps\",{\"1\":{\"124\":1}}],[\"pseudo\",{\"1\":{\"14\":1}}],[\"phantom\",{\"1\":{\"125\":1}}],[\"phone\",{\"1\":{\"98\":1}}],[\"phone=row\",{\"1\":{\"98\":1}}],[\"php\",{\"1\":{\"26\":1}}],[\"placeholder=\",{\"1\":{\"83\":2}}],[\"plum\",{\"1\":{\"66\":1,\"67\":1}}],[\"post请求的参数数据在消息体中\",{\"1\":{\"151\":1}}],[\"post请求是非幂等的\",{\"1\":{\"151\":1}}],[\"post等\",{\"1\":{\"141\":1}}],[\"position\",{\"1\":{\"73\":3}}],[\"pointer\",{\"1\":{\"38\":1,\"127\":1}}],[\"push\",{\"1\":{\"150\":1}}],[\"purple\",{\"1\":{\"73\":1}}],[\"publish\",{\"1\":{\"48\":1}}],[\"p>\",{\"1\":{\"66\":1,\"67\":5,\"71\":1,\"73\":3,\"76\":1,\"77\":1,\"78\":2,\"79\":1,\"82\":3,\"87\":1}}],[\"pink\",{\"1\":{\"73\":2}}],[\"pi+1\",{\"1\":{\"58\":1}}],[\"pi\",{\"1\":{\"58\":2}}],[\"pivot\",{\"1\":{\"55\":1,\"58\":3}}],[\"p\",{\"1\":{\"34\":2,\"65\":1,\"66\":1,\"67\":1,\"81\":1}}],[\"path\",{\"1\":{\"151\":1}}],[\"pattern\",{\"1\":{\"43\":1,\"48\":1}}],[\"param1=value1\",{\"1\":{\"151\":1}}],[\"params\",{\"1\":{\"92\":2}}],[\"parentnode\",{\"1\":{\"98\":5}}],[\"partition\",{\"1\":{\"58\":2}}],[\"password\",{\"1\":{\"83\":1}}],[\"padding\",{\"1\":{\"68\":2,\"98\":1}}],[\"payer\",{\"1\":{\"26\":3}}],[\"pay\",{\"1\":{\"26\":9}}],[\"package\",{\"1\":{\"23\":1,\"25\":1,\"36\":1,\"44\":4,\"49\":1,\"52\":1,\"55\":1,\"58\":1,\"61\":1}}],[\"panic\",{\"1\":{\"9\":1,\"38\":2}}],[\"prepare\",{\"1\":{\"136\":2}}],[\"project\",{\"0\":{\"156\":1}}],[\"protocol\",{\"1\":{\"140\":5,\"143\":2,\"144\":1}}],[\"profile\",{\"1\":{\"129\":1}}],[\"proceed\",{\"1\":{\"9\":1}}],[\"printf\",{\"1\":{\"17\":1,\"26\":2,\"32\":2,\"33\":2,\"36\":4,\"37\":1,\"39\":5,\"44\":1,\"49\":1,\"52\":2}}],[\"println\",{\"1\":{\"9\":1,\"11\":1,\"13\":2,\"14\":3,\"15\":2,\"16\":4,\"17\":5,\"24\":1,\"25\":3,\"29\":1,\"30\":1,\"33\":2,\"37\":1,\"38\":6,\"39\":3,\"44\":1,\"55\":2,\"58\":2,\"61\":2}}],[\"一般在几千个字符左右\",{\"1\":{\"151\":1}}],[\"一般会在单词后面添加er\",{\"1\":{\"23\":1}}],[\"一是防止上一次连接中的延迟或重复的数据包被下一次连接错误的接收\",{\"1\":{\"145\":1}}],[\"一种基于udp的传输层协议\",{\"1\":{\"140\":1}}],[\"一种抽象的类型\",{\"1\":{\"21\":1,\"39\":1}}],[\"一致性\",{\"1\":{\"104\":1}}],[\"一行显示\",{\"1\":{\"71\":1}}],[\"一旦它停止\",{\"1\":{\"16\":1}}],[\"一直被阻塞着\",{\"1\":{\"9\":1}}],[\"一个事务提交之后\",{\"1\":{\"124\":1}}],[\"一个事务还未提交时可以被别的事务读取数据\",{\"1\":{\"124\":1}}],[\"一个事务正在修改表的结构或索引定义时\",{\"1\":{\"118\":1}}],[\"一个接口的所有方法\",{\"1\":{\"33\":1}}],[\"一个接口类型的变量能够存储所有实现了该接口的类型变量\",{\"1\":{\"27\":1}}],[\"一个接口类型就是一组方法的集合\",{\"1\":{\"21\":1}}],[\"一个类型可以同时实现多个接口\",{\"1\":{\"32\":1}}],[\"一个类型实现多个接口\",{\"0\":{\"32\":1}}],[\"一个channel\",{\"1\":{\"8\":1}}],[\"一个nil\",{\"1\":{\"8\":1}}],[\"一个记录我学习旅程\",{\"1\":{\"0\":1}}],[\"通信双方不需要先建立连接就可以直接发送数据\",{\"1\":{\"143\":1}}],[\"通信双方在进行数据传输之前需要先建立连接\",{\"1\":{\"143\":1}}],[\"通用选择器\",{\"1\":{\"67\":2}}],[\"通常是isp\",{\"1\":{\"142\":1}}],[\"通常会采用随机选择基准元素的方法来提高其平均性能\",{\"1\":{\"55\":1}}],[\"通常会选择饿汉式或者使用懒汉式的线程安全变体\",{\"1\":{\"44\":1}}],[\"通常使用一个公有的静态变量直接存储实例\",{\"1\":{\"44\":1}}],[\"通常使用一个私有静态变量来存储实例\",{\"1\":{\"44\":1}}],[\"通常我们在使用空接口类型时不必使用type关键字声明\",{\"1\":{\"36\":1}}],[\"通知任务已完成\",{\"1\":{\"18\":1}}],[\"通过指定滑动窗口的大小\",{\"1\":{\"147\":1}}],[\"通过三次握手\",{\"1\":{\"144\":1}}],[\"通过使用确认和重传机制\",{\"1\":{\"143\":1}}],[\"通过将同一个域名解析到多个ip地址\",{\"1\":{\"142\":1}}],[\"通过网卡\",{\"1\":{\"141\":1}}],[\"通过tcp协议与服务器建立连接\",{\"1\":{\"141\":1}}],[\"通过ssl\",{\"1\":{\"140\":1}}],[\"通过性能测试和监测工具\",{\"1\":{\"112\":1}}],[\"通过遵循这三个规范化级别\",{\"1\":{\"103\":1}}],[\"通过调用观察者的更新方法来通知所有注册的观察者\",{\"1\":{\"48\":1}}],[\"通过在结构体中嵌入一个接口类型\",{\"1\":{\"34\":1}}],[\"通过i\",{\"1\":{\"17\":1}}],[\"通过缓存的使用\",{\"1\":{\"12\":1}}],[\"通过它并发核心单元就可以发送或者接收数据进行通讯\",{\"1\":{\"7\":1}}],[\"通讯效率越低\",{\"1\":{\"147\":1}}],[\"通讯\",{\"1\":{\"9\":1}}],[\"输出7\",{\"1\":{\"9\":1}}],[\"ip模型\",{\"1\":{\"140\":1}}],[\"i和rool\",{\"1\":{\"127\":1}}],[\"i===7\",{\"1\":{\"91\":1}}],[\"i===3\",{\"1\":{\"91\":1}}],[\"i=1\",{\"1\":{\"91\":2}}],[\"i<=10\",{\"1\":{\"91\":2}}],[\"i>\",{\"1\":{\"78\":1}}],[\"image\",{\"1\":{\"68\":1,\"94\":1}}],[\"img\",{\"1\":{\"67\":2,\"79\":3,\"82\":1}}],[\"import\",{\"1\":{\"11\":1,\"14\":1,\"15\":2,\"17\":1,\"18\":1,\"25\":1,\"36\":1,\"44\":3,\"49\":1,\"52\":1,\"55\":1,\"58\":1,\"61\":1}}],[\"i+1\",{\"1\":{\"58\":2}}],[\"i++\",{\"1\":{\"14\":1,\"55\":1,\"58\":1,\"61\":1,\"91\":3}}],[\"id上\",{\"1\":{\"115\":1}}],[\"id=2\",{\"1\":{\"132\":1}}],[\"id=\",{\"1\":{\"67\":2,\"79\":1,\"94\":1,\"98\":1}}],[\"id选择器\",{\"1\":{\"67\":2}}],[\"id\",{\"1\":{\"49\":4,\"79\":1,\"94\":3,\"127\":4}}],[\"irouter\",{\"1\":{\"39\":3}}],[\"is\",{\"1\":{\"39\":6,\"44\":1}}],[\"innodb\",{\"1\":{\"132\":1,\"133\":2}}],[\"innodb需要更多的磁盘空间\",{\"1\":{\"104\":1}}],[\"innodb的数据存储方式比myisam更为复杂\",{\"1\":{\"104\":1}}],[\"innodb使用的是b+树索引来管理数据\",{\"1\":{\"104\":1}}],[\"innodb支持外键约束\",{\"1\":{\"104\":1}}],[\"innodb支持行级锁定\",{\"1\":{\"104\":1}}],[\"innodb支持事务\",{\"1\":{\"104\":1}}],[\"innodb在高并发环境下可以更好地处理数据一致性和完整性问题\",{\"1\":{\"104\":1}}],[\"innertext=\",{\"1\":{\"94\":1}}],[\"innerhtml=inputphone\",{\"1\":{\"98\":1}}],[\"innerhtml=inputname\",{\"1\":{\"98\":1}}],[\"innerhtml=\",{\"1\":{\"94\":1,\"98\":3}}],[\"inputphone=prompt\",{\"1\":{\"98\":1}}],[\"inputname=prompt\",{\"1\":{\"98\":1}}],[\"input等\",{\"1\":{\"82\":1}}],[\"insert\",{\"1\":{\"115\":1}}],[\"insertcell\",{\"1\":{\"98\":3}}],[\"insertrow\",{\"1\":{\"98\":1}}],[\"insertbefore\",{\"1\":{\"94\":1}}],[\"instance是一个包级别的私有变量\",{\"1\":{\"44\":1}}],[\"instance变量指向singleton的实例\",{\"1\":{\"44\":1}}],[\"instance\",{\"1\":{\"44\":11}}],[\"inline\",{\"0\":{\"82\":1},\"1\":{\"66\":1,\"67\":9,\"68\":1}}],[\"in\",{\"1\":{\"52\":1}}],[\"index\",{\"1\":{\"52\":4,\"112\":1}}],[\"indextoremove+1\",{\"1\":{\"49\":1}}],[\"indextoremove\",{\"1\":{\"49\":3}}],[\"invalid\",{\"1\":{\"38\":1}}],[\"intention\",{\"1\":{\"115\":1}}],[\"internet\",{\"1\":{\"140\":1}}],[\"internal\",{\"1\":{\"66\":1}}],[\"interface类型原本的less方法签名为\",{\"1\":{\"34\":1}}],[\"interface\",{\"1\":{\"21\":2,\"23\":2,\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"32\":2,\"33\":1,\"34\":15,\"36\":2,\"37\":2,\"38\":2,\"39\":2,\"49\":2}}],[\"interval\",{\"1\":{\"16\":1}}],[\"int型\",{\"1\":{\"36\":1}}],[\"int64\",{\"1\":{\"26\":3}}],[\"int\",{\"1\":{\"7\":1,\"8\":10,\"9\":1,\"11\":4,\"12\":1,\"13\":1,\"14\":3,\"17\":4,\"34\":7,\"38\":2,\"39\":2,\"44\":1,\"49\":2,\"52\":4,\"55\":2,\"58\":9,\"61\":2}}],[\"io\",{\"1\":{\"34\":2}}],[\"if语句\",{\"1\":{\"90\":1}}],[\"if\",{\"1\":{\"16\":1,\"39\":1,\"44\":2,\"49\":1,\"52\":3,\"55\":2,\"58\":3,\"61\":2,\"90\":5,\"91\":2}}],[\"i\",{\"1\":{\"9\":2,\"13\":7,\"14\":2,\"17\":4,\"34\":7,\"49\":2,\"55\":3,\"58\":5,\"61\":7,\"91\":5}}],[\"404\",{\"1\":{\"154\":1}}],[\"40px\",{\"1\":{\"66\":1,\"67\":2,\"68\":1}}],[\"4caf50\",{\"1\":{\"98\":1}}],[\"42\",{\"1\":{\"44\":1}}],[\"4\",{\"0\":{\"106\":1,\"143\":1},\"1\":{\"9\":1,\"11\":1,\"52\":1}}],[\"+=\",{\"1\":{\"11\":1}}],[\"+\",{\"1\":{\"9\":1,\"13\":1,\"52\":2,\"58\":1,\"61\":1,\"92\":5}}],[\"先计算出7然后再发送给channel\",{\"1\":{\"9\":1}}],[\"在涉及敏感信息的场景下\",{\"1\":{\"148\":1}}],[\"在浏览器地址中输入url\",{\"0\":{\"141\":1}}],[\"在线游戏等\",{\"1\":{\"140\":1}}],[\"在innodb的日志提交时用到了这个协议\",{\"1\":{\"134\":1}}],[\"在innodb中使用的是b+树\",{\"1\":{\"105\":1}}],[\"在某个数据页上做了什么修改\",{\"1\":{\"132\":1}}],[\"在某些情况下\",{\"1\":{\"48\":1,\"142\":1}}],[\"在数据库中\",{\"1\":{\"130\":1}}],[\"在事务结束的时候再释放锁\",{\"1\":{\"120\":1}}],[\"在事务结束时释放锁\",{\"1\":{\"115\":1}}],[\"在read\",{\"1\":{\"127\":1}}],[\"在rr\",{\"1\":{\"115\":1}}],[\"在rc\",{\"1\":{\"115\":1}}],[\"在语句执行开始时申请\",{\"1\":{\"115\":1}}],[\"在访问一个表的时候会被自动加上\",{\"1\":{\"115\":1}}],[\"在需要的情况下\",{\"1\":{\"112\":1}}],[\"在使用时数据一定要使用引号引用起来\",{\"1\":{\"111\":1}}],[\"在使用二级索引查询时\",{\"1\":{\"109\":1}}],[\"在查询的时候更具索引查询即可\",{\"1\":{\"109\":1}}],[\"在指定的子节点前面插入新的子节点\",{\"1\":{\"94\":1}}],[\"在指定的时间发送一个当前时间给返回的channel中\",{\"1\":{\"15\":1}}],[\"在web开发中\",{\"1\":{\"94\":1}}],[\"在左侧继续查找\",{\"1\":{\"52\":1}}],[\"在右侧继续查找\",{\"1\":{\"52\":1}}],[\"在实际应用中\",{\"1\":{\"143\":1,\"149\":1}}],[\"在实际开发中\",{\"1\":{\"44\":1}}],[\"在实际的编码过程中是否使用它由你自己决定\",{\"1\":{\"26\":1}}],[\"在实际的交易流程中\",{\"1\":{\"26\":1}}],[\"在上面的代码中\",{\"1\":{\"44\":1}}],[\"在第一次调用getinstance\",{\"1\":{\"44\":1}}],[\"在这个过程中\",{\"1\":{\"125\":1}}],[\"在这个示例中\",{\"1\":{\"44\":1,\"49\":1}}],[\"在这个示例中还有一个需要注意的地方是reverse结构体本身是不可导出的\",{\"1\":{\"34\":1}}],[\"在这个例子中\",{\"1\":{\"44\":1}}],[\"在这个场景下我们可以不关注最终输出的目的地是什么\",{\"1\":{\"25\":1}}],[\"在这种场景下我们可以将具体的支付方式抽象为一个名为payer的接口类型\",{\"1\":{\"26\":1}}],[\"在这里\",{\"1\":{\"0\":1}}],[\"在电商系统中我们允许用户使用多种支付方式\",{\"1\":{\"25\":1}}],[\"在饿肚子这个场景下\",{\"1\":{\"25\":1}}],[\"在\",{\"1\":{\"24\":1,\"39\":1}}],[\"在go语言中实现观察者模式\",{\"1\":{\"49\":1}}],[\"在go语言中实现单例模式要考虑线程安全问题\",{\"1\":{\"44\":1}}],[\"在go语言中\",{\"1\":{\"44\":1}}],[\"在go语言中使用隐式声明的方式实现接口\",{\"1\":{\"26\":1}}],[\"在go语言中提倡使用面向接口的编程方式实现解耦\",{\"1\":{\"21\":1}}],[\"在go语言中接口\",{\"1\":{\"21\":1}}],[\"在将来的那个时间那个channel提供了一个时间值\",{\"1\":{\"16\":1}}],[\"在通讯\",{\"1\":{\"9\":1}}],[\"editrow\",{\"1\":{\"98\":3}}],[\"event\",{\"1\":{\"93\":6}}],[\"evaluated\",{\"1\":{\"9\":1}}],[\"em\",{\"1\":{\"82\":1}}],[\"entityid\",{\"1\":{\"67\":1,\"79\":1}}],[\"en\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"exclusive\",{\"1\":{\"117\":1}}],[\"example\",{\"1\":{\"79\":3,\"142\":2,\"151\":1}}],[\"external\",{\"1\":{\"66\":1}}],[\"expired\",{\"1\":{\"16\":2}}],[\"expression\",{\"1\":{\"9\":2}}],[\"element=document\",{\"1\":{\"94\":1}}],[\"element\",{\"1\":{\"67\":2,\"94\":13}}],[\"elementtype\",{\"1\":{\"8\":1}}],[\"else语句\",{\"1\":{\"90\":1}}],[\"else\",{\"1\":{\"39\":1,\"52\":3,\"90\":3}}],[\"err\",{\"1\":{\"34\":2}}],[\"error\",{\"1\":{\"23\":1,\"34\":3,\"38\":2}}],[\"3可能会逐渐成为主流的网络协议\",{\"1\":{\"150\":1}}],[\"3则进一步优化了传输效率和稳定性\",{\"1\":{\"150\":1}}],[\"3nf\",{\"1\":{\"103\":1}}],[\"350px\",{\"1\":{\"73\":2}}],[\"3px\",{\"1\":{\"71\":1}}],[\"30\",{\"0\":{\"136\":1}}],[\"300px\",{\"1\":{\"67\":1,\"68\":1}}],[\"30px\",{\"1\":{\"66\":1,\"67\":1}}],[\"34\",{\"1\":{\"55\":1,\"61\":1}}],[\"3+4\",{\"1\":{\"9\":1}}],[\"3\",{\"0\":{\"105\":1,\"142\":1},\"1\":{\"9\":2,\"17\":1,\"38\":1,\"52\":1,\"88\":1,\"104\":1,\"141\":2,\"150\":2}}],[\"如sha\",{\"1\":{\"149\":1}}],[\"如aes\",{\"1\":{\"149\":1}}],[\"如音频\",{\"1\":{\"143\":1}}],[\"如文件传输\",{\"1\":{\"143\":1}}],[\"如用户的浏览器\",{\"1\":{\"142\":1}}],[\"如example\",{\"1\":{\"142\":1}}],[\"如explain\",{\"1\":{\"112\":1}}],[\"如com\",{\"1\":{\"142\":1}}],[\"如ch\",{\"1\":{\"9\":1}}],[\"如192\",{\"1\":{\"142\":1}}],[\"如www\",{\"1\":{\"142\":3}}],[\"如200表示成功\",{\"1\":{\"141\":1}}],[\"如post请求的数据\",{\"1\":{\"141\":1}}],[\"如host\",{\"1\":{\"141\":1}}],[\"如http\",{\"1\":{\"141\":1}}],[\"如视频会议\",{\"1\":{\"140\":1}}],[\"如订单数据量较大\",{\"1\":{\"129\":1}}],[\"如user表可以切分为账号基本信息user\",{\"1\":{\"129\":1}}],[\"如行锁\",{\"1\":{\"122\":1}}],[\"如表\",{\"1\":{\"116\":1,\"117\":1}}],[\"如表中的数据量较少时\",{\"1\":{\"111\":1}}],[\"如何避免mdl出现问题\",{\"0\":{\"119\":1}}],[\"如何使用\",{\"1\":{\"115\":1}}],[\"如何进行索引调优\",{\"0\":{\"112\":1}}],[\"如花\",{\"1\":{\"88\":2,\"92\":1}}],[\"如插入排序\",{\"1\":{\"55\":1}}],[\"如三数取中法\",{\"1\":{\"55\":1}}],[\"如访问数据库的连接对象\",{\"1\":{\"43\":1}}],[\"如有写操作的接口叫writer\",{\"1\":{\"23\":1}}],[\"如官方的例子中x\",{\"1\":{\"11\":1}}],[\"如前所述\",{\"1\":{\"10\":1}}],[\"如前所言\",{\"1\":{\"9\":1}}],[\"如\",{\"1\":{\"8\":1,\"48\":1,\"142\":1}}],[\"如果本地dns服务器没有该记录\",{\"1\":{\"142\":1}}],[\"如果本地缓存中没有找到记录\",{\"1\":{\"142\":1}}],[\"如果它也没有缓存结果\",{\"1\":{\"142\":1}}],[\"如果浏览器缓存中没有记录\",{\"1\":{\"142\":1}}],[\"如果浏览器没有缓存域名对应的ip地址\",{\"1\":{\"141\":1}}],[\"如果url以https开头\",{\"1\":{\"141\":1}}],[\"如果使用https\",{\"1\":{\"141\":1}}],[\"如果使用http\",{\"1\":{\"141\":3}}],[\"如果碰到只有\",{\"1\":{\"136\":1}}],[\"如果碰到既有\",{\"1\":{\"136\":1}}],[\"如果不在\",{\"1\":{\"127\":1}}],[\"如果不加以控制\",{\"1\":{\"44\":1}}],[\"如果在设定的时间内没有收到确认\",{\"1\":{\"146\":1}}],[\"如果在\",{\"1\":{\"127\":1}}],[\"如果在这一轮排序中没有发生交换\",{\"1\":{\"55\":1}}],[\"如果后续的事务回滚\",{\"1\":{\"125\":1}}],[\"如果被修改过\",{\"1\":{\"122\":1}}],[\"如果对数据库对象的元数据访问没有正确加锁或使用不恰当的隔离级别\",{\"1\":{\"118\":1}}],[\"如果对一个接口值有多个实际类型需要判断\",{\"1\":{\"39\":1}}],[\"如果事务之间的元数据锁请求存在循环依赖\",{\"1\":{\"118\":1}}],[\"如果一个事务持有元数据锁并长时间不释放\",{\"1\":{\"118\":1}}],[\"如果一条更新语句没有走索引\",{\"1\":{\"115\":1}}],[\"如果存在并发事务对读取的数据进行修改但尚未提交\",{\"1\":{\"130\":1}}],[\"如果存在过多的元数据锁竞争\",{\"1\":{\"118\":1}}],[\"如果存在这样的情况\",{\"1\":{\"103\":1}}],[\"如果存在这要的情况\",{\"1\":{\"103\":1}}],[\"如果查询条件中的数据类型与索引列的数据类型不匹配\",{\"1\":{\"111\":1}}],[\"如果索引中没有我们需要的数据时\",{\"1\":{\"109\":1}}],[\"如果条件为false时\",{\"1\":{\"90\":1}}],[\"如果条件为true时\",{\"1\":{\"90\":2}}],[\"如果当前元素小于或等于pivot\",{\"1\":{\"58\":1}}],[\"如果数组长度小于2\",{\"1\":{\"58\":1}}],[\"如果稳定性是一个关键需求\",{\"1\":{\"55\":1}}],[\"如果遇到相等的元素\",{\"1\":{\"55\":1}}],[\"如果两个元素相等\",{\"1\":{\"55\":1}}],[\"如果需要确保线程安全\",{\"1\":{\"44\":1}}],[\"如果需要线程安全\",{\"1\":{\"44\":1}}],[\"如果接口值保存的动态类型相同\",{\"1\":{\"38\":1}}],[\"如果channel\",{\"1\":{\"17\":1}}],[\"如果想一直处理channel\",{\"1\":{\"14\":1}}],[\"如果default\",{\"1\":{\"14\":1}}],[\"如果有指定\",{\"1\":{\"141\":1}}],[\"如果有同时多个case去处理\",{\"1\":{\"14\":1}}],[\"如果有缓存\",{\"1\":{\"9\":1}}],[\"如果ok\",{\"1\":{\"10\":1}}],[\"如果设置了缓存\",{\"1\":{\"8\":1}}],[\"如果没有\",{\"1\":{\"132\":1}}],[\"如果没有了redo\",{\"1\":{\"132\":1}}],[\"如果没有主键id\",{\"1\":{\"109\":1}}],[\"如果没有default\",{\"1\":{\"14\":2}}],[\"如果没有case需要处理\",{\"1\":{\"14\":1,\"15\":1}}],[\"如果没有设置容量\",{\"1\":{\"8\":1}}],[\"如果没有指定方向\",{\"1\":{\"8\":1}}],[\"如果你对我的分享感兴趣\",{\"1\":{\"0\":1}}],[\"m2=value2\",{\"1\":{\"151\":1}}],[\"msl是tcp实现定义的一个时间值\",{\"1\":{\"145\":1}}],[\"msn\",{\"1\":{\"67\":1,\"79\":1}}],[\"mvcc工作在读已提交和可重复读的隔离级别下\",{\"1\":{\"127\":1}}],[\"mvcc又叫基于版本号的多版本并发控制\",{\"1\":{\"127\":1}}],[\"mvcc是如何实现的\",{\"0\":{\"127\":1}}],[\"mvcc+间隙锁\",{\"1\":{\"125\":1}}],[\"mdl有什么危害\",{\"0\":{\"118\":1}}],[\"mdl什么时候加锁\",{\"0\":{\"117\":1}}],[\"mdl\",{\"1\":{\"115\":4,\"116\":1,\"117\":1}}],[\"myisam使用的是b树\",{\"1\":{\"105\":1}}],[\"myisam不支持\",{\"1\":{\"104\":1}}],[\"myisam不支持事务\",{\"1\":{\"104\":1}}],[\"mysql重启时\",{\"1\":{\"135\":1}}],[\"mysql处于空闲状态时\",{\"1\":{\"135\":1}}],[\"mysql什么时候刷脏页\",{\"0\":{\"135\":1}}],[\"mysql的默认隔离级别是可重复读\",{\"1\":{\"124\":1}}],[\"mysql的事务的隔离级别有哪些\",{\"0\":{\"124\":1}}],[\"mysql加行锁默认加nk锁\",{\"1\":{\"115\":1}}],[\"mysql中的锁有哪些\",{\"0\":{\"115\":1}}],[\"mysql可能无法使用索引\",{\"1\":{\"111\":1}}],[\"mysql对b+树有优化\",{\"1\":{\"106\":1}}],[\"mysql存储引擎myisam和innodb有哪些区别\",{\"0\":{\"104\":1}}],[\"mysql\",{\"0\":{\"101\":1},\"1\":{\"132\":1}}],[\"model\",{\"1\":{\"94\":1}}],[\"move\",{\"1\":{\"28\":1,\"29\":4,\"30\":3,\"32\":3,\"33\":5,\"38\":4}}],[\"mover\",{\"1\":{\"28\":2,\"29\":1,\"32\":3,\"33\":1,\"38\":4,\"39\":2}}],[\"metadata\",{\"1\":{\"116\":1}}],[\"median\",{\"1\":{\"55\":1}}],[\"memory\",{\"1\":{\"38\":1}}],[\"minindex\",{\"1\":{\"61\":6}}],[\"mid\",{\"1\":{\"52\":6}}],[\"millisecond\",{\"1\":{\"16\":1}}],[\"mutex\",{\"1\":{\"44\":4}}],[\"mutex变量\",{\"1\":{\"44\":1}}],[\"multiplexing\",{\"1\":{\"150\":1}}],[\"multi\",{\"1\":{\"8\":1}}],[\"m\",{\"1\":{\"32\":2,\"38\":6,\"39\":5}}],[\"mali等\",{\"1\":{\"142\":1}}],[\"max\",{\"1\":{\"127\":1}}],[\"markup\",{\"1\":{\"76\":1}}],[\"margin\",{\"1\":{\"68\":2,\"98\":2}}],[\"married\",{\"1\":{\"37\":1}}],[\"main文件\",{\"1\":{\"66\":1}}],[\"main\",{\"1\":{\"11\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"25\":2,\"26\":2,\"36\":2,\"39\":2,\"44\":5,\"49\":2,\"52\":2,\"55\":2,\"58\":2,\"61\":2,\"66\":1,\"87\":2}}],[\"makehungry\",{\"1\":{\"25\":4}}],[\"makesheephungry\",{\"1\":{\"25\":2}}],[\"makecathungry\",{\"1\":{\"25\":2}}],[\"make的第二个参数指定缓存的大小\",{\"1\":{\"12\":1}}],[\"make\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":1,\"17\":4,\"18\":1,\"37\":1}}],[\"map\",{\"1\":{\"7\":1,\"37\":1}}],[\"的重传机制是其确保数据可靠传输的关键组成部分\",{\"1\":{\"146\":1}}],[\"的顶级域dns服务器的地址\",{\"1\":{\"142\":1}}],[\"的redolog\",{\"1\":{\"136\":1}}],[\"的全称是\",{\"1\":{\"133\":1}}],[\"的\",{\"1\":{\"132\":1,\"136\":1}}],[\"的元数据的并发访问\",{\"1\":{\"116\":1}}],[\"的隔离级别下\",{\"1\":{\"115\":1}}],[\"的状态发生变化时\",{\"1\":{\"49\":1}}],[\"的具体实现\",{\"1\":{\"49\":2}}],[\"的方法\",{\"1\":{\"44\":2}}],[\"的时候才会创建实例\",{\"1\":{\"44\":1}}],[\"的场景\",{\"1\":{\"26\":1}}],[\"的问题\",{\"1\":{\"21\":1}}],[\"的队列\",{\"1\":{\"8\":1}}],[\"的数据\",{\"1\":{\"8\":1}}],[\"ftp的安全版本\",{\"1\":{\"140\":1}}],[\"ftp\",{\"1\":{\"140\":1}}],[\"ftwrl\",{\"1\":{\"115\":1}}],[\"float\",{\"1\":{\"70\":1,\"71\":2}}],[\"float64\",{\"1\":{\"8\":2,\"26\":2}}],[\"flexbox和grid\",{\"1\":{\"70\":1}}],[\"fast\",{\"1\":{\"146\":1}}],[\"father\",{\"1\":{\"67\":2,\"71\":3}}],[\"father>\",{\"1\":{\"67\":1}}],[\"family\",{\"1\":{\"67\":1}}],[\"false\",{\"1\":{\"17\":1,\"37\":1,\"38\":2,\"55\":1}}],[\"four\",{\"1\":{\"144\":1}}],[\"found\",{\"1\":{\"52\":2,\"154\":1}}],[\"focus\",{\"1\":{\"93\":2}}],[\"fontsize=\",{\"1\":{\"94\":1}}],[\"font\",{\"1\":{\"65\":1,\"66\":4,\"67\":6}}],[\"for循环\",{\"1\":{\"91\":2}}],[\"form>\",{\"1\":{\"83\":1}}],[\"form等\",{\"1\":{\"81\":1}}],[\"for\",{\"1\":{\"11\":1,\"13\":3,\"14\":3,\"16\":1,\"17\":1,\"49\":2,\"52\":1,\"55\":2,\"58\":1,\"61\":2,\"91\":3}}],[\"file\",{\"1\":{\"140\":2}}],[\"fixed\",{\"1\":{\"73\":3}}],[\"first\",{\"1\":{\"67\":1}}],[\"fibonacci\",{\"1\":{\"14\":2}}],[\"finished\",{\"1\":{\"13\":1}}],[\"fifo\",{\"1\":{\"8\":1}}],[\"from\",{\"1\":{\"11\":1}}],[\"fmt\",{\"1\":{\"9\":1,\"11\":2,\"13\":2,\"14\":4,\"15\":3,\"16\":4,\"17\":6,\"18\":1,\"24\":1,\"25\":4,\"26\":2,\"29\":1,\"30\":1,\"32\":2,\"33\":4,\"36\":5,\"37\":2,\"38\":6,\"39\":8,\"44\":4,\"49\":2,\"52\":3,\"55\":3,\"58\":3,\"61\":3}}],[\"function\",{\"1\":{\"92\":5,\"93\":3,\"94\":1,\"98\":3}}],[\"func\",{\"1\":{\"9\":1,\"11\":2,\"13\":3,\"14\":3,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"24\":1,\"25\":7,\"26\":8,\"29\":1,\"30\":1,\"32\":2,\"33\":4,\"34\":2,\"36\":1,\"37\":1,\"38\":2,\"39\":1,\"44\":7,\"49\":6,\"52\":2,\"55\":2,\"58\":4,\"61\":2,\"92\":2}}],[\"中的一种机制\",{\"1\":{\"116\":1}}],[\"中\",{\"1\":{\"8\":1}}],[\"往channel发送一个事件\",{\"1\":{\"16\":1}}],[\"往nil\",{\"1\":{\"9\":1}}],[\"往一个已经被close的channel中继续发送数据会导致run\",{\"1\":{\"9\":1}}],[\"往\",{\"1\":{\"8\":1}}],[\"ssl的替代者是tls\",{\"1\":{\"149\":1}}],[\"ssl使用消息摘要算法\",{\"1\":{\"149\":1}}],[\"ssl使用对称加密算法\",{\"1\":{\"149\":1}}],[\"ssl使用数字证书来验证服务器和\",{\"1\":{\"149\":1}}],[\"ssl加密的主要功能包括\",{\"1\":{\"149\":1}}],[\"ssl加密通信\",{\"1\":{\"148\":1}}],[\"ssl协议通过使用加密算法来保护数据不被未授权的第三方访问或篡改\",{\"1\":{\"149\":1}}],[\"ssl\",{\"1\":{\"149\":3}}],[\"ssl证书能够证明网站的身份\",{\"1\":{\"148\":1}}],[\"ssl握手\",{\"1\":{\"141\":1}}],[\"sftp\",{\"1\":{\"140\":1}}],[\"syn=1\",{\"1\":{\"144\":1}}],[\"sync\",{\"1\":{\"44\":5}}],[\"system\",{\"1\":{\"140\":1,\"142\":1}}],[\"sack\",{\"1\":{\"146\":1}}],[\"safe\",{\"1\":{\"132\":1}}],[\"sayer\",{\"1\":{\"25\":2,\"27\":1,\"32\":3}}],[\"say\",{\"1\":{\"25\":9,\"27\":2,\"32\":3}}],[\"snapshot\",{\"1\":{\"130\":2}}],[\"s><\",{\"1\":{\"78\":1}}],[\"script>\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":3,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"script\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1}}],[\"span>\",{\"1\":{\"67\":2,\"82\":2}}],[\"span\",{\"1\":{\"67\":2}}],[\"size\",{\"1\":{\"65\":1,\"66\":4,\"67\":4}}],[\"singleton应当替换为你实际的模块路径\",{\"1\":{\"44\":1}}],[\"singleton\",{\"1\":{\"43\":1,\"44\":23}}],[\"sing\",{\"1\":{\"24\":3}}],[\"singer\",{\"1\":{\"24\":2}}],[\"sockets\",{\"1\":{\"149\":1}}],[\"solid\",{\"1\":{\"68\":2,\"71\":1,\"98\":1}}],[\"son\",{\"1\":{\"67\":2,\"71\":4}}],[\"some\",{\"1\":{\"49\":1}}],[\"sorted\",{\"1\":{\"55\":1,\"58\":1,\"61\":1}}],[\"sort\",{\"1\":{\"34\":3,\"58\":4}}],[\"submit\",{\"1\":{\"83\":1}}],[\"subject\",{\"1\":{\"48\":1,\"49\":15}}],[\"subscribe\",{\"1\":{\"48\":1}}],[\"sum\",{\"1\":{\"11\":7}}],[\"switch\",{\"1\":{\"39\":1}}],[\"swapped\",{\"1\":{\"55\":3}}],[\"swap\",{\"1\":{\"34\":1}}],[\"shared\",{\"1\":{\"117\":1}}],[\"show\",{\"1\":{\"37\":1}}],[\"sheep\",{\"1\":{\"25\":3}}],[\"sql中也有很多类似的结构体内嵌接口类型的使用示例\",{\"1\":{\"34\":1}}],[\"src=\",{\"1\":{\"67\":1,\"77\":1,\"78\":1,\"79\":6,\"82\":1,\"83\":1,\"87\":1,\"98\":1}}],[\"src\",{\"1\":{\"34\":2}}],[\"s速度70迈\",{\"1\":{\"33\":1}}],[\"s会动\",{\"1\":{\"32\":1,\"33\":1}}],[\"s会叫汪汪汪\",{\"1\":{\"32\":1}}],[\"style\",{\"1\":{\"68\":1,\"77\":1,\"78\":1,\"79\":2,\"82\":1,\"83\":1,\"94\":2}}],[\"style=\",{\"1\":{\"66\":1,\"67\":2,\"98\":1}}],[\"style>\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"87\":1}}],[\"stylesheet\",{\"1\":{\"66\":3,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"98\":1}}],[\"styles\",{\"1\":{\"66\":1}}],[\"state\",{\"1\":{\"49\":10}}],[\"studentinfo\",{\"1\":{\"37\":5}}],[\"strong\",{\"1\":{\"82\":1}}],[\"strong>\",{\"1\":{\"78\":1}}],[\"struct\",{\"1\":{\"24\":1,\"25\":3,\"26\":2,\"29\":1,\"30\":1,\"32\":1,\"33\":3,\"34\":1,\"36\":1,\"38\":2,\"39\":1,\"44\":3,\"49\":2}}],[\"string\",{\"1\":{\"15\":1,\"32\":1,\"33\":1,\"37\":1,\"38\":2,\"39\":2,\"49\":4}}],[\"stopped\",{\"1\":{\"16\":1}}],[\"stop\",{\"1\":{\"16\":1}}],[\"stop2\",{\"1\":{\"16\":2}}],[\"stop来停止计时器\",{\"1\":{\"16\":1}}],[\"sequence\",{\"1\":{\"144\":2}}],[\"security\",{\"1\":{\"149\":1}}],[\"secure\",{\"1\":{\"140\":2,\"149\":1}}],[\"section\",{\"1\":{\"79\":1}}],[\"second\",{\"1\":{\"15\":2,\"16\":2,\"18\":1}}],[\"server\",{\"1\":{\"66\":1,\"87\":2,\"98\":2,\"132\":1,\"144\":1,\"150\":1}}],[\"setstate\",{\"1\":{\"49\":4}}],[\"selective\",{\"1\":{\"146\":1}}],[\"selectionsort\",{\"1\":{\"61\":2}}],[\"selection\",{\"1\":{\"55\":1}}],[\"select有很重要的一个应用就是超时处理\",{\"1\":{\"15\":1}}],[\"select语句就会一直阻塞着\",{\"1\":{\"15\":1}}],[\"select语句和switch语句一样\",{\"1\":{\"14\":1}}],[\"select语句选择一组可能的send操作和receive操作去处理\",{\"1\":{\"14\":1}}],[\"select\",{\"0\":{\"14\":1},\"1\":{\"14\":2,\"15\":1}}],[\"send被执行前\",{\"1\":{\"9\":1}}],[\"sendstmt\",{\"1\":{\"9\":1}}],[\"send语句用来往channel中发送数据\",{\"1\":{\"9\":1}}],[\"send语句\",{\"0\":{\"9\":1}}],[\"send\",{\"1\":{\"8\":1,\"11\":1,\"17\":1}}],[\"send才会阻塞\",{\"1\":{\"8\":1}}],[\"slow\",{\"1\":{\"112\":1}}],[\"sleep来实现\",{\"1\":{\"16\":1}}],[\"sleep\",{\"1\":{\"13\":1,\"15\":1,\"17\":1,\"18\":1}}],[\"slice\",{\"1\":{\"7\":1}}],[\"s\",{\"1\":{\"11\":7,\"25\":5,\"32\":2,\"44\":5,\"49\":1,\"67\":1,\"79\":1}}],[\"就可以实现双方无需等待确认\",{\"1\":{\"147\":1}}],[\"就拿着\",{\"1\":{\"136\":1}}],[\"就直接提交\",{\"1\":{\"136\":1}}],[\"就会直接释放掉不符合要求的行锁\",{\"1\":{\"115\":1}}],[\"就会出现空指针panic\",{\"1\":{\"34\":1}}],[\"就不会使用索引\",{\"1\":{\"111\":1}}],[\"就如下图所示\",{\"1\":{\"38\":1}}],[\"就有可能不发生阻塞\",{\"1\":{\"8\":1}}],[\"就像\",{\"1\":{\"7\":1}}],[\"才会发生\",{\"1\":{\"8\":1}}],[\"只是获取数据\",{\"1\":{\"151\":1}}],[\"只支持头部压缩\",{\"1\":{\"150\":1}}],[\"只能将or条件中的每个列都加上索引\",{\"1\":{\"111\":1}}],[\"只会在父元素的内部移动\",{\"1\":{\"70\":1}}],[\"只需要知道它实现了观察者接口\",{\"1\":{\"48\":1}}],[\"只需要调用它们的move方法就可以了\",{\"1\":{\"33\":1}}],[\"只需要它能提供一个write方法让我们把内容写入就可以了\",{\"1\":{\"25\":1}}],[\"只关心它能做什么\",{\"1\":{\"26\":1}}],[\"只要一个类型实现了接口中规定的所有方法\",{\"1\":{\"26\":1}}],[\"只要它能提供一个实现支付功能的pay方法让调用方调用就可以了\",{\"1\":{\"25\":1}}],[\"只要实现了say\",{\"1\":{\"25\":1}}],[\"只要饿肚子了\",{\"1\":{\"25\":1}}],[\"只定义规范不实现\",{\"1\":{\"21\":1}}],[\"只有插入才会出现幻读\",{\"1\":{\"125\":1}}],[\"只有在insert的时候会使用\",{\"1\":{\"115\":1}}],[\"只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口\",{\"1\":{\"39\":1}}],[\"只有nil\",{\"1\":{\"14\":1}}],[\"只有buffer满了后\",{\"1\":{\"8\":1}}],[\"只有sender和receiver都准备好了后它们的通讯\",{\"1\":{\"8\":1}}],[\"只可以用来接收\",{\"1\":{\"8\":1}}],[\"只可以用来发送\",{\"1\":{\"8\":1}}],[\"可靠性\",{\"1\":{\"143\":1}}],[\"可重复读和串行化解决不可重复读和幻读的问题\",{\"1\":{\"128\":1}}],[\"可重复读\",{\"1\":{\"115\":1,\"124\":1,\"126\":1}}],[\"可选的\",{\"1\":{\"149\":1}}],[\"可选的<\",{\"1\":{\"8\":1}}],[\"可选\",{\"1\":{\"92\":1}}],[\"可能导致网络拥塞\",{\"1\":{\"143\":1}}],[\"可能导致数据丢失或乱序\",{\"1\":{\"143\":1}}],[\"可能导致数据库对象的不一致性\",{\"1\":{\"118\":1}}],[\"可能导致更新的过度调用\",{\"1\":{\"48\":1}}],[\"可能引发死锁\",{\"1\":{\"118\":1}}],[\"可能更合适\",{\"1\":{\"55\":1}}],[\"可能会对服务器产生副作用\",{\"1\":{\"151\":1}}],[\"可能会存在读写冲突或数据不一致的问题\",{\"1\":{\"117\":1}}],[\"可能会导致回表\",{\"1\":{\"108\":1}}],[\"可能会导致大量的更新通知\",{\"1\":{\"48\":1}}],[\"可能会浪费资源\",{\"1\":{\"44\":1}}],[\"可能会创建多个实例\",{\"1\":{\"44\":1}}],[\"可以被缓存\",{\"1\":{\"151\":1}}],[\"可以直接在url中看到\",{\"1\":{\"151\":1}}],[\"可以继续发送数据的最大值\",{\"1\":{\"147\":1}}],[\"可以避免发送方发送过多的数据导致接收方无法及时处理\",{\"1\":{\"143\":1}}],[\"可以有效地控制并发访问\",{\"1\":{\"122\":1}}],[\"可以考虑优化元数据的访问频率和方式\",{\"1\":{\"119\":1}}],[\"可以认为是记录锁和间隙锁的组合\",{\"1\":{\"115\":1}}],[\"可以加快查询的效率\",{\"1\":{\"105\":1}}],[\"可以高效地处理大量数据\",{\"1\":{\"104\":1}}],[\"可以提高并发性能\",{\"1\":{\"104\":1}}],[\"可以提前结束\",{\"1\":{\"55\":1}}],[\"可以很好的解决常见的并发问题\",{\"1\":{\"104\":1}}],[\"可以减少连接建立和关闭的开销\",{\"1\":{\"150\":1}}],[\"可以减少锁的使用\",{\"1\":{\"122\":1}}],[\"可以减少数据和数据的不一致性\",{\"1\":{\"103\":1}}],[\"可以减少稳定性问题\",{\"1\":{\"55\":1}}],[\"可以包含其他块级元素和行内元素\",{\"1\":{\"81\":1}}],[\"可以相应地更新自己或执行特定操作\",{\"1\":{\"48\":1}}],[\"可以使用margin属性来设置\",{\"1\":{\"68\":1}}],[\"可以使用border属性来设置\",{\"1\":{\"68\":1}}],[\"可以使用padding属性来设置\",{\"1\":{\"68\":1}}],[\"可以使用synchronized关键字或者静态内部类来实现\",{\"1\":{\"44\":1}}],[\"可以使用sync包中的once类型来确保全局实例只被创建一次\",{\"1\":{\"44\":1}}],[\"可以使用time\",{\"1\":{\"16\":1}}],[\"可以像下面的代码一样直接使用interface\",{\"1\":{\"36\":1}}],[\"可以将c1当成mover类型\",{\"1\":{\"30\":1}}],[\"可以将d1赋值给变量x\",{\"1\":{\"29\":1}}],[\"可以把隔离级别降到rc\",{\"1\":{\"115\":1}}],[\"可以把dog类型变量直接赋值给x\",{\"1\":{\"27\":1}}],[\"可以把cat类型变量直接赋值给x\",{\"1\":{\"27\":1}}],[\"可以尽量避免阻塞\",{\"1\":{\"12\":1}}],[\"可以通过内建的close方法可以关闭channel\",{\"1\":{\"8\":1}}],[\"可以接收和发送类型为\",{\"1\":{\"8\":1}}],[\"ttl\",{\"1\":{\"142\":1}}],[\"tls的网站时\",{\"1\":{\"149\":1}}],[\"tls加密通常用于以下场景\",{\"1\":{\"149\":1}}],[\"tls\",{\"1\":{\"141\":1}}],[\"tls协议提供加密\",{\"1\":{\"140\":1}}],[\"tcp的头部中存在一个window的字段用来描述接收方的数据大小\",{\"1\":{\"147\":1}}],[\"tcp的重传机制是什么\",{\"0\":{\"146\":1}}],[\"tcp的特点\",{\"1\":{\"143\":1}}],[\"tcp使用三次握手\",{\"1\":{\"144\":1}}],[\"tcp提供了可靠性和有序性\",{\"1\":{\"143\":1}}],[\"tcp和udp是两种不同的传输层协议\",{\"1\":{\"143\":1}}],[\"tcp和udp有什么特点\",{\"0\":{\"143\":1}}],[\"tcp适用于对数据可靠性要求较高的应用场景\",{\"1\":{\"143\":1}}],[\"tcp具有流控制和拥塞控制机制\",{\"1\":{\"143\":1}}],[\"tcp保证数据按照发送的顺序被接收\",{\"1\":{\"143\":1}}],[\"tcp保证数据能够完整地按序到达目的地\",{\"1\":{\"143\":1}}],[\"tcp是通过滑动窗口的方式来进行流量控制的\",{\"1\":{\"147\":1}}],[\"tcp是如何进行流量控制的\",{\"0\":{\"147\":1}}],[\"tcp是面向连接的协议\",{\"1\":{\"143\":1}}],[\"tcp是一种可靠的传输协议\",{\"1\":{\"143\":1}}],[\"tcp\",{\"1\":{\"140\":2,\"143\":2,\"144\":1,\"146\":1}}],[\"td\",{\"1\":{\"98\":1}}],[\"td>\",{\"1\":{\"78\":9,\"98\":3}}],[\"transport\",{\"1\":{\"149\":1}}],[\"transfer\",{\"1\":{\"140\":3}}],[\"transmission\",{\"1\":{\"140\":1,\"143\":1,\"144\":1}}],[\"trx\",{\"1\":{\"127\":5}}],[\"tr>\",{\"1\":{\"78\":4,\"98\":2}}],[\"true\",{\"1\":{\"18\":1,\"36\":1,\"38\":1,\"55\":1,\"90\":1}}],[\"text\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":2,\"93\":1,\"98\":2}}],[\"tenant\",{\"1\":{\"67\":1,\"79\":1}}],[\"tag\",{\"1\":{\"94\":4}}],[\"tables\",{\"1\":{\"115\":2}}],[\"table=document\",{\"1\":{\"98\":1}}],[\"table>\",{\"1\":{\"78\":1,\"98\":1}}],[\"table\",{\"1\":{\"71\":1,\"81\":1,\"98\":4,\"115\":1}}],[\"target=\",{\"1\":{\"79\":1}}],[\"target\",{\"1\":{\"52\":7}}],[\"th\",{\"1\":{\"98\":2}}],[\"this\",{\"1\":{\"98\":4}}],[\"th>\",{\"1\":{\"78\":3,\"98\":3}}],[\"three\",{\"1\":{\"55\":1,\"144\":1}}],[\"the\",{\"1\":{\"44\":1,\"52\":1}}],[\"type=\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":10,\"93\":1}}],[\"type\",{\"1\":{\"23\":2,\"24\":2,\"25\":4,\"26\":3,\"28\":1,\"29\":1,\"30\":1,\"32\":3,\"33\":4,\"34\":8,\"36\":6,\"37\":1,\"38\":4,\"39\":4,\"44\":3,\"49\":4}}],[\"title>\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"tick\",{\"1\":{\"16\":1}}],[\"ticker也可以通过stop方法来停止\",{\"1\":{\"16\":1}}],[\"ticker\",{\"1\":{\"16\":2}}],[\"ticker是一个定时触发的计时器\",{\"1\":{\"16\":1}}],[\"time<=18\",{\"1\":{\"90\":1}}],[\"time<=12\",{\"1\":{\"90\":1}}],[\"timer2\",{\"1\":{\"16\":3}}],[\"timer\",{\"1\":{\"16\":3}}],[\"timer1\",{\"1\":{\"16\":2}}],[\"timer是一个定时器\",{\"1\":{\"16\":1}}],[\"timer和ticker\",{\"0\":{\"16\":1}}],[\"time的单向的channel\",{\"1\":{\"15\":1}}],[\"timeout\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"146\":1}}],[\"time\",{\"0\":{\"145\":1},\"1\":{\"9\":1,\"13\":2,\"15\":5,\"16\":6,\"17\":3,\"18\":3,\"90\":1,\"145\":1}}],[\"top\",{\"1\":{\"73\":2,\"98\":1}}],[\"to\",{\"1\":{\"11\":1}}],[\"t\",{\"1\":{\"8\":2,\"16\":2,\"17\":1,\"36\":4,\"37\":1,\"39\":4}}],[\"也不会重发数据\",{\"1\":{\"143\":1}}],[\"也存在单标签\",{\"1\":{\"76\":1}}],[\"也称双标签\",{\"1\":{\"76\":1}}],[\"也称元素\",{\"1\":{\"76\":1}}],[\"也称为发布\",{\"1\":{\"48\":1}}],[\"也就是dom\",{\"1\":{\"94\":1}}],[\"也就是它的类型和值部分都是nil\",{\"1\":{\"38\":1}}],[\"也就是说接口值由\",{\"1\":{\"38\":1}}],[\"也正是因为空接口类型的这个特性\",{\"1\":{\"36\":1}}],[\"也可以隐藏某个功能的内部实现\",{\"1\":{\"39\":1}}],[\"也可以实现mover接口\",{\"1\":{\"32\":1}}],[\"也可以将d2赋值给变量x\",{\"1\":{\"29\":1}}],[\"也可以是receive语句\",{\"1\":{\"14\":1}}],[\"也可以发送数据\",{\"1\":{\"8\":1}}],[\"也为我的技术工作带来了新的视角和灵感\",{\"1\":{\"0\":1}}],[\"既可以接收数据\",{\"1\":{\"8\":1}}],[\"它是基于ssl协议进一步发展的\",{\"1\":{\"149\":1}}],[\"它是一个分层和可扩展的命名系统\",{\"1\":{\"142\":1}}],[\"它是一个全局变量\",{\"1\":{\"44\":1}}],[\"它是一个只要求实现特定方法的抽象类型\",{\"1\":{\"39\":1}}],[\"它防止了旧的数据包在连接重新建立后干扰新的通信\",{\"1\":{\"145\":1}}],[\"它发送一个fin\",{\"1\":{\"144\":1}}],[\"它不保证数据的可靠传输\",{\"1\":{\"143\":1}}],[\"它不是循环\",{\"1\":{\"14\":1}}],[\"它确保数据的传输是可靠的\",{\"1\":{\"143\":1}}],[\"它确保一个类只有一个实例\",{\"1\":{\"43\":1}}],[\"它认为在整个事务过程中\",{\"1\":{\"122\":2}}],[\"它看不见\",{\"1\":{\"109\":1}}],[\"它就会根据主键id到原表中查询\",{\"1\":{\"109\":1}}],[\"它接受输入参数\",{\"1\":{\"92\":1}}],[\"它接收一个payer类型的参数\",{\"1\":{\"26\":1}}],[\"它主要被设计用于在网页上实现动态效果\",{\"1\":{\"86\":1}}],[\"它允许你对特定元素或一组元素定义样式\",{\"1\":{\"67\":1}}],[\"它将通知所有已注册的\",{\"1\":{\"49\":1}}],[\"它将维护观察者列表\",{\"1\":{\"49\":1}}],[\"它也有一些缺点\",{\"1\":{\"48\":1}}],[\"它维护一系列观察者\",{\"1\":{\"48\":1}}],[\"它们在数据传输和语义上有以下区别\",{\"1\":{\"151\":1}}],[\"它们在java等编程语言中用来确保一个类只有一个实例\",{\"1\":{\"44\":1}}],[\"它们有不同的特点和适用场景\",{\"1\":{\"143\":1}}],[\"它们有一个共同的数据字段\",{\"1\":{\"136\":1}}],[\"它们有以下区别\",{\"1\":{\"106\":1}}],[\"它们只占据其内容所需的宽度\",{\"1\":{\"82\":1}}],[\"它们可以在文本中插如小的元素\",{\"1\":{\"82\":1}}],[\"它们可能会被交换位置\",{\"1\":{\"55\":1}}],[\"它们用于创建页面的主要部分\",{\"1\":{\"81\":1}}],[\"它们用于定义元素的行为和外观\",{\"1\":{\"79\":1}}],[\"它们就不会交换位置\",{\"1\":{\"55\":1}}],[\"它们的时间复杂度如下\",{\"1\":{\"55\":1}}],[\"它们饿了都会叫\",{\"1\":{\"25\":1}}],[\"它必须实现一个say\",{\"1\":{\"25\":1}}],[\"它必须是一个receive操作\",{\"1\":{\"14\":1}}],[\"它包含一个move方法\",{\"1\":{\"28\":1}}],[\"它包含一个sing方法\",{\"1\":{\"24\":1}}],[\"它包括三种类型的定义\",{\"1\":{\"8\":1}}],[\"它规定了需要实现的所有方法\",{\"1\":{\"21\":1}}],[\"它会将查询结果返回给本地dns服务器\",{\"1\":{\"142\":1}}],[\"它会首先查询根dns服务器\",{\"1\":{\"142\":1}}],[\"它会向其他dns服务器发起递归查询\",{\"1\":{\"142\":1}}],[\"它会向dns服务器发起查询\",{\"1\":{\"141\":1}}],[\"它会以一个间隔\",{\"1\":{\"16\":1}}],[\"它会一直迭代直到channel被关闭\",{\"1\":{\"13\":1}}],[\"它提供一个channel\",{\"1\":{\"16\":1}}],[\"它返回一个类型为<\",{\"1\":{\"15\":1}}],[\"它只会选择一个case来处理\",{\"1\":{\"14\":1}}],[\"它可以放在case列表的任何位置\",{\"1\":{\"14\":1}}],[\"它可以用来检查channel是否已经被关闭\",{\"1\":{\"8\":1}}],[\"它类似switch\",{\"1\":{\"14\":1}}],[\"它的关键点就是先写日志\",{\"1\":{\"133\":1}}],[\"它的值在包被初始化时就已经被赋予一个\",{\"1\":{\"44\":1}}],[\"它的case可以是send语句\",{\"1\":{\"14\":1}}],[\"它的定义如下\",{\"1\":{\"9\":1}}],[\"它的操作符是箭头\",{\"1\":{\"7\":1}}],[\"|\",{\"1\":{\"8\":2}}],[\"和udp\",{\"1\":{\"143\":1}}],[\"和资源路径\",{\"1\":{\"141\":1}}],[\"和路径\",{\"1\":{\"141\":1}}],[\"和当前读\",{\"1\":{\"130\":1}}],[\"和m\",{\"1\":{\"127\":1}}],[\"和间隙锁冲突\",{\"1\":{\"115\":1}}],[\"和更新类事物的提交\",{\"1\":{\"115\":1}}],[\"和随机选择基准元素的方法\",{\"1\":{\"55\":1}}],[\"和\",{\"1\":{\"7\":1,\"38\":1,\"49\":2,\"55\":1,\"58\":1}}],[\"箭头的指向就是数据的流向\",{\"1\":{\"7\":1}}],[\"=操作符\",{\"1\":{\"111\":1}}],[\"=3\",{\"1\":{\"88\":1}}],[\"==\",{\"1\":{\"38\":5,\"44\":2,\"49\":1,\"52\":1}}],[\"=\",{\"1\":{\"7\":2,\"8\":2,\"9\":4,\"10\":3,\"11\":6,\"12\":1,\"13\":4,\"14\":6,\"15\":2,\"16\":5,\"17\":7,\"18\":1,\"25\":2,\"27\":4,\"29\":4,\"30\":4,\"32\":3,\"33\":2,\"36\":4,\"37\":4,\"38\":5,\"39\":8,\"44\":6,\"49\":9,\"52\":8,\"55\":7,\"58\":7,\"61\":8,\"88\":2,\"90\":1,\"91\":1,\"92\":2,\"94\":3}}],[\"view中\",{\"1\":{\"127\":1}}],[\"view\",{\"1\":{\"127\":1}}],[\"view和undo\",{\"1\":{\"127\":1}}],[\"view的时机不同\",{\"1\":{\"127\":1}}],[\"var全局未定义\",{\"1\":{\"92\":1}}],[\"var\",{\"1\":{\"10\":1,\"25\":2,\"27\":1,\"29\":3,\"30\":2,\"32\":3,\"33\":1,\"36\":2,\"37\":1,\"38\":4,\"39\":3,\"44\":4,\"49\":1,\"88\":1,\"92\":8}}],[\"value=\",{\"1\":{\"83\":1}}],[\"value\",{\"1\":{\"10\":1,\"36\":4,\"37\":1,\"39\":1,\"44\":4,\"88\":2}}],[\"valued\",{\"1\":{\"8\":1}}],[\"v\",{\"1\":{\"7\":2,\"8\":1,\"11\":2,\"36\":4,\"37\":1,\"39\":9}}],[\"<9\",{\"1\":{\"91\":1}}],[\"<label>\",{\"1\":{\"93\":1}}],[\"<label>爱好\",{\"1\":{\"83\":1}}],[\"<label>性别\",{\"1\":{\"83\":1}}],[\"<label>密码\",{\"1\":{\"83\":1}}],[\"<label>用户名\",{\"1\":{\"83\":1}}],[\"<li>有序列表3<\",{\"1\":{\"78\":1}}],[\"<li>有序列表2<\",{\"1\":{\"78\":1}}],[\"<li>有序列表1<\",{\"1\":{\"78\":1}}],[\"<li>无序列表3<\",{\"1\":{\"78\":1}}],[\"<li>无序列表2<\",{\"1\":{\"78\":1}}],[\"<li>无序列表1<\",{\"1\":{\"78\":1}}],[\"<link\",{\"1\":{\"66\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"98\":1}}],[\"<form\",{\"1\":{\"83\":1}}],[\"<开始标签\",{\"1\":{\"79\":1}}],[\"<td>\",{\"1\":{\"98\":1}}],[\"<td>12345678901<\",{\"1\":{\"98\":1}}],[\"<td>云中月<\",{\"1\":{\"98\":1}}],[\"<td>元素33<\",{\"1\":{\"78\":1}}],[\"<td>元素32<\",{\"1\":{\"78\":1}}],[\"<td>元素31<\",{\"1\":{\"78\":1}}],[\"<td>元素23<\",{\"1\":{\"78\":1}}],[\"<td>元素22<\",{\"1\":{\"78\":1}}],[\"<td>元素21<\",{\"1\":{\"78\":1}}],[\"<td>元素13<\",{\"1\":{\"78\":1}}],[\"<td>元素12<\",{\"1\":{\"78\":1}}],[\"<td>元素11<\",{\"1\":{\"78\":1}}],[\"<th>操作<\",{\"1\":{\"98\":1}}],[\"<th>联系方式<\",{\"1\":{\"98\":1}}],[\"<th>姓名<\",{\"1\":{\"98\":1}}],[\"<th>列标题3<\",{\"1\":{\"78\":1}}],[\"<th>列标题2<\",{\"1\":{\"78\":1}}],[\"<th>列标题1<\",{\"1\":{\"78\":1}}],[\"<tr>\",{\"1\":{\"78\":4,\"98\":2}}],[\"<table\",{\"1\":{\"78\":1,\"98\":1}}],[\"<title>表格的增删改查<\",{\"1\":{\"98\":1}}],[\"<title>jsdom<\",{\"1\":{\"94\":1}}],[\"<title>js循环语句<\",{\"1\":{\"91\":3,\"92\":1,\"93\":1}}],[\"<title>js基本语法<\",{\"1\":{\"88\":1,\"90\":1}}],[\"<title>js的导入方式<\",{\"1\":{\"87\":1}}],[\"<title>html表单<\",{\"1\":{\"83\":1}}],[\"<title>html区块<\",{\"1\":{\"82\":1}}],[\"<title>html属性<\",{\"1\":{\"79\":1}}],[\"<title>常见文本标签<\",{\"1\":{\"78\":1}}],[\"<title>文档标题<\",{\"1\":{\"77\":1}}],[\"<title>定位<\",{\"1\":{\"73\":1}}],[\"<title>浮动<\",{\"1\":{\"71\":1}}],[\"<title>盒子模型<\",{\"1\":{\"68\":1}}],[\"<title>css块元素<\",{\"1\":{\"67\":1}}],[\"<title>css选择器<\",{\"1\":{\"67\":1}}],[\"<title>css导入方式<\",{\"1\":{\"66\":1}}],[\"<ol>\",{\"1\":{\"78\":1}}],[\"<ul>\",{\"1\":{\"78\":1}}],[\"<u>下划线<\",{\"1\":{\"78\":1}}],[\"<button>点击按钮<\",{\"1\":{\"94\":1}}],[\"<button\",{\"1\":{\"93\":1,\"98\":3}}],[\"<b>字体加粗<\",{\"1\":{\"78\":1}}],[\"<br>\",{\"1\":{\"76\":1,\"79\":2,\"83\":4}}],[\"<body>\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"<i>斜体<\",{\"1\":{\"78\":1}}],[\"<input\",{\"1\":{\"76\":1,\"83\":9,\"93\":1}}],[\"<img\",{\"1\":{\"67\":1,\"79\":5}}],[\"<a\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"79\":3,\"82\":4,\"94\":2}}],[\"<s>删除线<\",{\"1\":{\"78\":1}}],[\"<strong>字体加粗<\",{\"1\":{\"78\":1}}],[\"<style><\",{\"1\":{\"87\":1}}],[\"<style>\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1}}],[\"<script>\",{\"1\":{\"87\":2,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1}}],[\"<script\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"98\":1}}],[\"<span>链接点击这里<a\",{\"1\":{\"82\":1}}],[\"<span>这是一个span标签<\",{\"1\":{\"82\":1}}],[\"<span\",{\"1\":{\"67\":2}}],[\"<p>javascript的导入方式<\",{\"1\":{\"87\":1}}],[\"<p>文章内容<\",{\"1\":{\"82\":3}}],[\"<p>文本样式\",{\"1\":{\"78\":1}}],[\"<p>固定定位<\",{\"1\":{\"73\":1}}],[\"<p>绝对定位<\",{\"1\":{\"73\":1}}],[\"<p>相对定位<\",{\"1\":{\"73\":1}}],[\"<p>这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本<\",{\"1\":{\"71\":1}}],[\"<p>这是一个段落<\",{\"1\":{\"76\":1,\"77\":1,\"78\":1}}],[\"<p>这是一个普通的p标签<\",{\"1\":{\"67\":2}}],[\"<p>这是一个应用了css样式的文本<\",{\"1\":{\"66\":1}}],[\"<p\",{\"1\":{\"67\":3,\"79\":1}}],[\"<div>普通的div标签<\",{\"1\":{\"94\":1}}],[\"<div>\",{\"1\":{\"67\":1}}],[\"<div\",{\"1\":{\"67\":3,\"68\":2,\"71\":3,\"73\":9,\"82\":2,\"94\":2}}],[\"<meta\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"<h6>这是一个六级标题<\",{\"1\":{\"78\":1}}],[\"<h5>这是一个五级标题<\",{\"1\":{\"78\":1}}],[\"<hr>\",{\"1\":{\"76\":1,\"79\":1}}],[\"<h4>这是一个四级标题<\",{\"1\":{\"78\":1}}],[\"<h4\",{\"1\":{\"67\":1}}],[\"<h3>这是一个三级标题<\",{\"1\":{\"78\":1}}],[\"<h3>这是一个相邻元素选择器示例<\",{\"1\":{\"67\":1}}],[\"<h3>这是一个应用了外部样式表的文本<\",{\"1\":{\"66\":1}}],[\"<h3\",{\"1\":{\"67\":2}}],[\"<h2>这是一个二级标题<\",{\"1\":{\"78\":1}}],[\"<h2>这是一个元素选择器示例<\",{\"1\":{\"67\":1}}],[\"<h2>这是一个应用了内部样式表的文本<\",{\"1\":{\"66\":1}}],[\"<h1>文章标题<\",{\"1\":{\"82\":1}}],[\"<h1>table\",{\"1\":{\"78\":3}}],[\"<h1>这是一个一级标题<\",{\"1\":{\"77\":1,\"78\":1}}],[\"<h1>这是一个标题<\",{\"1\":{\"76\":1}}],[\"<h1>display<\",{\"1\":{\"67\":1}}],[\"<h1>不同类型的选择器<\",{\"1\":{\"67\":1}}],[\"<h1\",{\"1\":{\"66\":1,\"67\":1,\"98\":1}}],[\"<head>\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"<html\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"<=\",{\"1\":{\"52\":1,\"58\":1}}],[\"<\",{\"1\":{\"7\":3,\"8\":12,\"9\":4,\"10\":4,\"11\":5,\"13\":2,\"14\":7,\"15\":3,\"16\":2,\"17\":13,\"18\":2,\"52\":1,\"55\":2,\"58\":3,\"61\":3,\"66\":5,\"67\":12,\"68\":5,\"71\":6,\"73\":7,\"77\":4,\"78\":11,\"79\":5,\"82\":7,\"83\":9,\"87\":6,\"88\":5,\"90\":5,\"91\":15,\"92\":5,\"93\":6,\"94\":5,\"98\":8}}],[\"current\",{\"1\":{\"130\":2}}],[\"cells2\",{\"1\":{\"98\":1}}],[\"cells2=newrow\",{\"1\":{\"98\":1}}],[\"cells1\",{\"1\":{\"98\":1}}],[\"cells1=newrow\",{\"1\":{\"98\":1}}],[\"cells\",{\"1\":{\"98\":3}}],[\"cells=newrow\",{\"1\":{\"98\":1}}],[\"center\",{\"1\":{\"98\":2}}],[\"create\",{\"1\":{\"127\":1}}],[\"createtextnode\",{\"1\":{\"94\":1}}],[\"createelement\",{\"1\":{\"94\":1}}],[\"createattribute\",{\"1\":{\"94\":1}}],[\"client\",{\"1\":{\"144\":1}}],[\"click\",{\"1\":{\"93\":2,\"94\":1}}],[\"class\",{\"1\":{\"79\":1,\"94\":3}}],[\"class=\",{\"1\":{\"67\":9,\"68\":2,\"71\":3,\"73\":9,\"79\":1,\"82\":2,\"94\":1}}],[\"clear\",{\"1\":{\"71\":1}}],[\"closer\",{\"1\":{\"34\":3}}],[\"closed\",{\"1\":{\"17\":1}}],[\"close\",{\"0\":{\"17\":1},\"1\":{\"9\":1,\"13\":1,\"17\":4,\"34\":1,\"145\":1}}],[\"css文件\",{\"1\":{\"98\":1}}],[\"css中的块元素\",{\"1\":{\"67\":1}}],[\"css三种导入方式\",{\"0\":{\"66\":1}}],[\"css通常由选择器\",{\"1\":{\"65\":1}}],[\"css语法\",{\"0\":{\"65\":1}}],[\"css\",{\"0\":{\"64\":1},\"1\":{\"66\":2,\"77\":2,\"78\":2,\"79\":2,\"82\":2,\"83\":2,\"98\":2}}],[\"cs\",{\"1\":{\"49\":14}}],[\"collapse\",{\"1\":{\"98\":2}}],[\"color=\",{\"1\":{\"94\":1}}],[\"color\",{\"1\":{\"65\":1,\"66\":4,\"67\":11,\"68\":3,\"71\":3,\"73\":6,\"98\":2}}],[\"connections\",{\"1\":{\"140\":1}}],[\"control\",{\"1\":{\"140\":1,\"143\":1,\"144\":1}}],[\"continue\",{\"1\":{\"91\":1}}],[\"continue用于跳过当前循环中的剩余代码\",{\"1\":{\"91\":1}}],[\"content\",{\"1\":{\"68\":1,\"71\":1,\"82\":1}}],[\"condition\",{\"1\":{\"90\":2}}],[\"const\",{\"1\":{\"88\":3,\"90\":1,\"92\":2,\"94\":4,\"98\":12}}],[\"console\",{\"1\":{\"87\":3,\"88\":3,\"91\":5,\"92\":6,\"93\":2,\"94\":4,\"98\":7}}],[\"concreteobserver\",{\"1\":{\"49\":6}}],[\"concretesubject\",{\"1\":{\"49\":8}}],[\"co\",{\"1\":{\"49\":2}}],[\"commit\",{\"1\":{\"136\":2}}],[\"communication\",{\"1\":{\"7\":1,\"8\":1,\"9\":2,\"14\":1}}],[\"com\",{\"1\":{\"67\":1,\"77\":1,\"78\":1,\"79\":4,\"142\":3,\"151\":1}}],[\"comparing\",{\"1\":{\"38\":1}}],[\"c2是cat类型\",{\"1\":{\"30\":1}}],[\"c2\",{\"1\":{\"30\":2}}],[\"c可以查看channel的状态\",{\"1\":{\"17\":1}}],[\"c已经被关闭\",{\"1\":{\"17\":1}}],[\"c1是\",{\"1\":{\"30\":1}}],[\"c1\",{\"1\":{\"15\":3,\"30\":2}}],[\"c1中发送一个数据\",{\"1\":{\"15\":1}}],[\"car类型的值\",{\"1\":{\"38\":1}}],[\"car类型实现mover接口\",{\"1\":{\"33\":1}}],[\"car\",{\"1\":{\"33\":4,\"38\":5,\"39\":2}}],[\"cat类型的变量直接赋值给mover接口类型的变量x\",{\"1\":{\"30\":1}}],[\"cat类型\",{\"1\":{\"30\":2}}],[\"cat\",{\"1\":{\"25\":5,\"27\":1,\"30\":5}}],[\"case存在的情况下\",{\"1\":{\"14\":1}}],[\"case\",{\"1\":{\"14\":7,\"15\":2,\"39\":3}}],[\"capacity\",{\"1\":{\"8\":1}}],[\"c产生的迭代值为channel中发送的值\",{\"1\":{\"13\":1}}],[\"c这句会一直等待计算结果发送到channel中\",{\"1\":{\"11\":1}}],[\"c\",{\"1\":{\"9\":4,\"11\":10,\"13\":5,\"14\":6,\"16\":3,\"17\":21,\"25\":7,\"30\":1,\"33\":2,\"38\":3,\"132\":1}}],[\"checkbox\",{\"1\":{\"83\":3}}],[\"checkoutwithwx\",{\"1\":{\"26\":1}}],[\"checkoutwithzfb\",{\"1\":{\"26\":1}}],[\"checkout\",{\"1\":{\"26\":9}}],[\"child\",{\"1\":{\"67\":2}}],[\"charset=\",{\"1\":{\"66\":1,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"78\":1,\"79\":1,\"82\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":1,\"94\":1,\"98\":1}}],[\"chan<\",{\"1\":{\"8\":5}}],[\"chan\",{\"1\":{\"7\":1,\"8\":16,\"9\":1,\"11\":2,\"12\":1,\"13\":1,\"14\":3,\"15\":2,\"17\":4,\"18\":2}}],[\"channel等待worker完成任务\",{\"1\":{\"18\":1}}],[\"channel可以用在goroutine之间的同步\",{\"1\":{\"18\":1}}],[\"channel可以作为一个先入先出\",{\"1\":{\"8\":1}}],[\"channel关闭后for循环会跳出\",{\"1\":{\"17\":1}}],[\"channel上的操作会一直被阻塞\",{\"1\":{\"14\":1}}],[\"channels\",{\"0\":{\"12\":1}}],[\"channel中接收数据会一直被block\",{\"1\":{\"10\":1}}],[\"channel中发送数据会一致被阻塞着\",{\"1\":{\"9\":1}}],[\"channel\",{\"1\":{\"9\":2,\"17\":1}}],[\"channel的select会一直被阻塞\",{\"1\":{\"14\":1}}],[\"channel的\",{\"1\":{\"8\":1}}],[\"channel不会通信\",{\"1\":{\"8\":1}}],[\"channeltype\",{\"1\":{\"8\":1}}],[\"channel类型的定义格式如下\",{\"1\":{\"8\":1}}],[\"channel类型\",{\"0\":{\"8\":1}}],[\"channel必须先创建再使用\",{\"1\":{\"7\":1}}],[\"channel是go中的一个核心类型\",{\"1\":{\"7\":1}}],[\"channel详解\",{\"0\":{\"7\":1}}],[\"ch用来从channel\",{\"1\":{\"10\":1}}],[\"ch中接收数据\",{\"1\":{\"7\":1,\"10\":1}}],[\"ch中\",{\"1\":{\"7\":1}}],[\"ch\",{\"1\":{\"7\":3,\"8\":1,\"10\":3,\"12\":1}}],[\"​\",{\"1\":{\"7\":1,\"8\":3,\"21\":3,\"24\":1,\"25\":3,\"26\":1,\"58\":1,\"65\":1,\"67\":1,\"69\":1,\"70\":1,\"72\":1,\"76\":1,\"86\":3,\"87\":1,\"90\":1,\"91\":1,\"93\":1,\"94\":1,\"103\":2,\"105\":4,\"106\":4,\"107\":1,\"109\":1,\"113\":1,\"116\":1,\"119\":1,\"120\":1,\"122\":2,\"125\":1,\"127\":1,\"130\":2,\"133\":1,\"134\":1,\"136\":1,\"142\":1,\"143\":2,\"144\":2,\"146\":1,\"147\":1,\"148\":1,\"151\":2}}],[\"项目介绍\",{\"2\":{\"5\":1}}],[\"项目案例\",{\"1\":{\"0\":1}}],[\"聊天室\",{\"0\":{\"4\":1}}],[\"游戏攻略\",{\"2\":{\"3\":1}}],[\"游戏杂谈\",{\"2\":{\"2\":1}}],[\"待开发\",{\"1\":{\"1\":1,\"4\":1}}],[\"鸣潮\",{\"0\":{\"1\":1}}],[\"希望我们能在这个知识共享的社区中共同成长和进步\",{\"1\":{\"0\":1}}],[\"欢迎在文章下方留言\",{\"1\":{\"0\":1}}],[\"并重新发送该数据包\",{\"1\":{\"146\":1}}],[\"并主动关闭连接\",{\"1\":{\"145\":1}}],[\"并使用四次挥手\",{\"1\":{\"144\":1}}],[\"并使用值接收者为其定义一个move方法\",{\"1\":{\"29\":1}}],[\"并验证服务器的身份\",{\"1\":{\"141\":1}}],[\"并更新内存\",{\"1\":{\"133\":1}}],[\"并不会覆盖以前的日志\",{\"1\":{\"132\":1}}],[\"并不对其进行加锁\",{\"1\":{\"122\":1}}],[\"并发送一个ack包给服务器\",{\"1\":{\"144\":1}}],[\"并发送一个ack包给客户端\",{\"1\":{\"144\":1}}],[\"并发性能下降\",{\"1\":{\"118\":1}}],[\"并发事务访问同一数据\",{\"1\":{\"117\":1}}],[\"并进行必要的调整和优化\",{\"1\":{\"112\":1}}],[\"并可能导致索引失效或选择不正确的索引\",{\"1\":{\"112\":1}}],[\"并返回输出\",{\"1\":{\"92\":1}}],[\"并占据整行的宽度\",{\"1\":{\"81\":1}}],[\"并集选择器\",{\"1\":{\"67\":1}}],[\"并在浏览器中执行\",{\"1\":{\"86\":1}}],[\"并在状态发生变化时通知它们\",{\"1\":{\"49\":1}}],[\"并在其内部状态发生变化时通知所有观察者\",{\"1\":{\"48\":1}}],[\"并通过一个公有静态方法来获取这个实例\",{\"1\":{\"44\":1}}],[\"并提供一个全局访问点\",{\"1\":{\"44\":1}}],[\"并提供一个全局访问点来获取这个唯一的实例\",{\"1\":{\"43\":1}}],[\"并且可以互相确认对方的请求和确认\",{\"1\":{\"144\":1}}],[\"并且可以处理丢弃\",{\"1\":{\"143\":1}}],[\"并且可以设置容量\",{\"1\":{\"8\":1}}],[\"并且在等待最后的确认报文\",{\"1\":{\"145\":1}}],[\"并且在程序的执行过程中只会创建一次\",{\"1\":{\"44\":1}}],[\"并且在单例不需要提前初始化的场景下非常有用\",{\"1\":{\"44\":1}}],[\"并且还可以改写该接口的方法\",{\"1\":{\"34\":1}}],[\"并且缓存未满\",{\"1\":{\"9\":1}}],[\"并且不断追求知识的深度与广度\",{\"1\":{\"0\":1}}],[\"并将数据赋值给v\",{\"1\":{\"7\":1}}],[\"并为初学者提供易于理解的教程和指南\",{\"1\":{\"0\":1}}],[\"技术见解和生活点滴的空间\",{\"1\":{\"0\":1}}],[\"我们给接口变量m赋值为一个\",{\"1\":{\"38\":1}}],[\"我们将一个\",{\"1\":{\"38\":1}}],[\"我们不能对一个空接口值调用任何方法\",{\"1\":{\"38\":1}}],[\"我们创建一个mover接口类型的变量m\",{\"1\":{\"38\":1}}],[\"我们接下来通过一个示例来加深对接口值的理解\",{\"1\":{\"38\":1}}],[\"我们接下来定义一个饿肚子的场景\",{\"1\":{\"25\":1}}],[\"我们称之为接口的动态类型和动态值\",{\"1\":{\"38\":1}}],[\"我们来看一段go标准库sort源码中的示例\",{\"1\":{\"34\":1}}],[\"我们完全可以分别定义sayer接口和mover接口\",{\"1\":{\"32\":1}}],[\"我们再来测试一下使用指针接收者实现接口有什么区别\",{\"1\":{\"30\":1}}],[\"我们定义一个dog结构体类型\",{\"1\":{\"29\":1}}],[\"我们定义一个mover接口\",{\"1\":{\"28\":1}}],[\"我们定义的singer接口类型\",{\"1\":{\"24\":1}}],[\"我们能不能把它们当成\",{\"1\":{\"26\":3}}],[\"我们只关心调用pay方法时能否正常运行\",{\"1\":{\"26\":1}}],[\"我们只是在代码中调用它的say\",{\"1\":{\"25\":1}}],[\"我们其实并不怎么关心用户选择的是什么支付方式\",{\"1\":{\"26\":1}}],[\"我们的电商系统最开始只设计了支付宝一种支付方式\",{\"1\":{\"26\":1}}],[\"我们的交易流程中可能不太在乎用户究竟使用什么支付方式\",{\"1\":{\"25\":1}}],[\"我们的代码其实并不关心究竟是什么动物在叫\",{\"1\":{\"25\":1}}],[\"我们的代码世界该怎么拓展呢\",{\"1\":{\"25\":1}}],[\"我们通过使用接口类型\",{\"1\":{\"25\":1}}],[\"我们就调用say\",{\"1\":{\"25\":1}}],[\"我们可以定义两个主要的接口\",{\"1\":{\"49\":1}}],[\"我们可以借助标准库fmt包的格式化打印获取到接口值的动态类型\",{\"1\":{\"39\":1}}],[\"我们可以使用m\",{\"1\":{\"38\":1}}],[\"我们可以使用如下代码体现这个关系\",{\"1\":{\"33\":1}}],[\"我们可以将\",{\"1\":{\"30\":1}}],[\"我们可以根据用户选择的支付方式来决定最终调用支付宝的pay方法还是微信支付的pay方法\",{\"1\":{\"26\":1}}],[\"我们可以约定一个sayer类型\",{\"1\":{\"25\":1}}],[\"我们可不可以把所有动物都当成一个\",{\"1\":{\"25\":1}}],[\"我们有一个bird\",{\"1\":{\"24\":1}}],[\"我们看一下关于时间的两个channel\",{\"1\":{\"16\":1}}],[\"我能做什么\",{\"1\":{\"21\":1}}],[\"我是谁\",{\"1\":{\"21\":1}}],[\"我是一名资深二次元宅男\",{\"1\":{\"0\":1}}],[\"我的目标是通过这个平台记录自己的成长\",{\"1\":{\"0\":1}}],[\"我的爱好还包括阅读和游戏\",{\"1\":{\"0\":1}}],[\"我将分享我的技术探索\",{\"1\":{\"0\":1}}],[\"我创建了这个博客\",{\"1\":{\"0\":1}}],[\"我对世界保持好奇\",{\"1\":{\"0\":1}}],[\"大家好\",{\"1\":{\"0\":1}}],[\"个人介绍\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
