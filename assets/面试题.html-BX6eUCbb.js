import{_ as i,c as s,a,d as n,o as l}from"./app-CKza1MQ-.js";const h={},t=n(`<h2 id="php对比go性能为什么差" tabindex="-1"><a class="header-anchor" href="#php对比go性能为什么差"><span>PHP对比Go性能为什么差？</span></a></h2><ul><li>PHP是解释型语言，运行效率低；Go是编译型语言，运行效率高。</li><li>PHP运行时组件繁多，提高了项目部署的规模。</li><li>PHP在使用中，消耗的资源更多。（内存、CPU等）</li></ul><h2 id="详细讲一讲资产的铸造、空投、合成和交易的功能怎么实现的" tabindex="-1"><a class="header-anchor" href="#详细讲一讲资产的铸造、空投、合成和交易的功能怎么实现的"><span>详细讲一讲资产的铸造、空投、合成和交易的功能怎么实现的？</span></a></h2><h3 id="铸造" tabindex="-1"><a class="header-anchor" href="#铸造"><span>铸造</span></a></h3><p>铸造是指创建新的区块链资产的过程</p><p><strong>定义资产标准</strong></p><p>首先，需要确定您要铸造的资产类型。例如，是ERC-20代币、ERC-721 NFT，还是其他类型的资产。每种资产类型都有其特定的标准和功能。</p><p><strong>编写智能合约</strong></p><p>​ 根据资产类型，编写相应的智能合约。例如，对于ERC-20代币，您需要实现以下功能：</p><ol><li><code>totalSupply()</code>：返回代币的总供应量。</li><li><code>balanceOf(address owner)</code>：返回指定地址的代币余额。</li><li><code>transfer(address to, uint256 amount)</code>：允许地址将自己的代币转移给另一个地址。</li></ol><p>​ 对于ERC-721 NFT，您可能需要实现：</p><ol><li><code>totalSupply()</code>：返回NFT的总供应量。</li><li><code>balanceOf(address owner)</code>：返回指定地址拥有的NFT数量。</li><li><code>ownerOf(uint256 tokenId)</code>：返回指定NFT的拥有者地址。</li><li><code>transferFrom(address from, address to, uint256 tokenId)</code>：允许从一个地址到另一个地址转移特定的NFT。</li></ol><p><strong>添加铸造功能</strong></p><p>在智能合约中添加铸造函数。例如，对于NFT，这可能是一个<code>mint</code>函数：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">address</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> tokenId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 确保调用者有铸造权限</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == owner, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Only owner can mint&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 确保tokenId尚未被铸造</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tokenIds[tokenId] != </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Token ID already minted&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 铸造逻辑</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    _mint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(to, tokenId);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    tokenIds[tokenId] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编译和部署智能合约</strong></p><p>使用Solidity编译器编译智能合约，并通常通过Truffle、Hardhat或Remix等开发框架将其部署到区块链上。</p><p><strong>编写铸造逻辑</strong></p><p>在应用程序中，编写调用铸造函数的逻辑。这可能涉及用户界面，允许用户输入铸造参数（如接收地址和数量），以及后端逻辑，处理与智能合约的交互。</p><h3 id="合成" tabindex="-1"><a class="header-anchor" href="#合成"><span>合成</span></a></h3><p>合成通常指的是将多个资产或代币合并成一个新的资产的过程。</p><p><strong>编写智能合约</strong></p><p>在智能合约中添加合成函数。例如：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 执行合成的函数，将多个NFT合成一个新的NFT</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> synthesisNFT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">memory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> tokenIds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> memory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tokenIds.length &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;At least two NFTs are required for synthesis&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_isApprovedOrOwner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_msgSender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), tokenIds[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Not owner nor approved&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 合成逻辑，这里简单地取第一个NFT的id作为新NFT的id</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">        uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> newNFTId </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tokenIds[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        _nft </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nfts[newNFTId] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NFT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newNFTId, name, value);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 将用于合成的原始NFT设置为不存在</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i &lt; tokenIds.length; i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            _burn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tokenIds[i]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 将新合成的NFT分配给调用者</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        _mint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_msgSender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), newNFTId);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>定义合成函数</strong>：在智能合约中定义一个合成函数，该函数接受多个NFT的ID作为输入，并创建一个新的NFT。</li><li><strong>验证权限</strong>：确保只有拥有合成权限的地址可以调用合成函数。</li><li><strong>验证NFT所有权</strong>：检查调用者是否拥有所有输入的NFT。</li><li><strong>创建新NFT</strong>：创建一个新的NFT，其属性可能基于原有NFT的属性进行合成。</li><li><strong>销毁旧NFT</strong>：将输入的NFT标记为销毁状态，以防止双重使用。</li><li><strong>铸造新NFT</strong>：将新创建的NFT分配给调用者或指定的接收者。</li><li><strong>触发事件</strong>：触发一个事件，记录合成操作的详细信息。</li></ol><p>请注意，这个示例假设您已经有了智能合约的ABI定义，并且ABI中已经包含了<code>synthesisNFT</code>函数的定义。您需要根据智能合约实际的ABI和铸造函数的参数来调整<code>contractABI</code>和参数编码部分。</p><p>此外，确保您的智能合约已经部署到区块链上，并且您有足够的以太币来支付交易的gas费用。在生产环境中，私钥应该安全地存储和管理，避免将其硬编码在代码中或提交到版本控制系统。</p><h3 id="空投" tabindex="-1"><a class="header-anchor" href="#空投"><span>空投</span></a></h3><p>空投是一种将区块链资产免费分发给大量地址的市场营销手段。</p><p><strong>确定空投参数</strong></p><ol><li><strong>资产类型</strong>：确定要空投的是代币（如ERC-20）还是NFT（如ERC-721）。</li><li><strong>接收者列表</strong>：准备或生成要接收空投的地址列表。</li><li><strong>空投数量</strong>：确定每个接收者将获得的资产数量或特定的资产ID。</li></ol><p><strong>部署智能合约</strong></p><p>将编写好的智能合约部署到区块链上。这通常通过Truffle、Hardhat或Remix等工具完成。</p><p><strong>准备空投数据</strong></p><p>在服务器或本地环境中，准备空投数据，包括接收者地址列表和每个地址对应的资产数量或ID。</p><p><strong>编写空投脚本</strong></p><ol><li>连接到区块链节点。</li><li>构造空投交易。</li><li>签署并发送交易。</li></ol><p><strong>执行空投</strong></p><p>运行空投脚本，该脚本将：</p><ol><li>遍历接收者地址列表。</li><li>对于每个地址，调用智能合约的空投函数或直接发送资产转移交易。</li></ol><p><strong>监控和确认</strong></p><ol><li>监控交易状态，确保每笔交易都被成功处理。</li><li>确认空投是否成功到达每个接收者的地址。</li></ol><p><strong>用户通知</strong></p><p>通知用户空投已经完成，他们可以查看自己的资产。</p><h2 id="_3-后台管理的对账、日报和监控与告警功能怎么实现的" tabindex="-1"><a class="header-anchor" href="#_3-后台管理的对账、日报和监控与告警功能怎么实现的"><span>3.后台管理的对账、日报和监控与告警功能怎么实现的？</span></a></h2><h3 id="对账功能" tabindex="-1"><a class="header-anchor" href="#对账功能"><span>对账功能</span></a></h3><ol><li><strong>数据核对</strong>：定期核对系统中记录的交易数据和财务数据，确保所有记录都是准确和一致的。</li><li><strong>自动化脚本</strong>：编写自动化脚本，对比不同数据源或数据库表之间的数据，以发现差异。</li><li><strong>报告生成</strong>：当发现不一致时，生成对账报告，报告中应包含不一致的详细信息，供进一步分析和解决。</li><li><strong>用户界面</strong>：提供一个用户界面，让操作人员可以方便地启动对账过程、查看报告和采取行动。</li></ol><h3 id="日报功能" tabindex="-1"><a class="header-anchor" href="#日报功能"><span>日报功能</span></a></h3><ol><li><strong>数据汇总</strong>：每天结束时，汇总关键业务指标和性能数据。（起个定时器去刷数据库）</li><li><strong>模板设计</strong>：设计日报模板，包括必要的图表、数据表格和关键指标。（查看一天总共有多少单，交易完成了多少单，支付了多少，支付金额是多少，总金额是多少，扣除手续费这个是多少，平台的利润是多少。统计新增用户，活跃用户，最活跃用户的排行榜。）</li><li><strong>自动化报告</strong>：使用自动化工具或脚本生成日报，可以通过电子邮件或其他通讯渠道分发。（扔到钉钉群，权限只有公司这个管理层的人）</li><li><strong>实时更新</strong>：提供实时数据更新，确保日报内容的时效性。</li></ol><h3 id="监控与告警功能" tabindex="-1"><a class="header-anchor" href="#监控与告警功能"><span>监控与告警功能</span></a></h3><p>​ 基于阿里云，服务器上面有监控和阈值，可以添加webhook，把钉钉机器人的hook填进去，出问题可以及时报警。没有进行单独的开发。</p><ol><li><strong>性能指标监控</strong>：监控系统的性能指标，如响应时间、事务吞吐量、系统负载等。</li><li><strong>阈值设置</strong>：为关键指标设置阈值，当指标超出正常范围时触发告警。</li><li><strong>实时监控系统</strong>：使用实时监控系统（如Prometheus、Grafana等）来观察和记录系统状态。</li><li><strong>告警通知</strong>：集成告警通知系统（如邮件、短信、Slack等），在检测到问题时及时通知相关人员。</li><li><strong>日志管理</strong>：收集和分析系统日志，以便在出现问题时快速定位和解决。</li><li><strong>自动化响应</strong>：在可能的情况下，实现自动化响应措施，如自动重启服务、自动扩展资源等。</li></ol><h2 id="_4-限流策略除了xyz和令牌桶还有哪些-能详细讲讲吗" tabindex="-1"><a class="header-anchor" href="#_4-限流策略除了xyz和令牌桶还有哪些-能详细讲讲吗"><span>4.限流策略除了XYZ和令牌桶还有哪些？能详细讲讲吗？</span></a></h2><ol><li><strong>固定窗口计数器</strong>： <ul><li>在固定时间窗口（如每分钟）内，只允许一定数量的请求通过。</li><li>超出限额的请求会被拒绝或排队等待。</li></ul></li><li><strong>漏桶算法</strong>（Leaky Bucket）： <ul><li>漏桶算法通过固定速率将请求“漏”到系统中，类似于一个有孔的桶慢慢漏水。</li><li>请求首先进入桶中，然后以固定速率被处理，超出桶容量的请求会被丢弃或排队。</li></ul></li><li><strong>自适应限流</strong>： <ul><li>根据系统的实时负载动态调整限流策略。</li><li>例如，当检测到系统负载较高时，自动降低请求处理速率。</li></ul></li><li><strong>队列等待</strong>： <ul><li>当请求超出处理能力时，将请求放入队列中等待处理。</li><li>这种方法可以保证所有请求最终都会被处理，但可能会增加响应时间。</li></ul></li></ol><h2 id="_5-怎么解决超卖问题" tabindex="-1"><a class="header-anchor" href="#_5-怎么解决超卖问题"><span>5.怎么解决超卖问题？</span></a></h2><h3 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁"><span>悲观锁</span></a></h3><p><strong>数据库层面的悲观锁</strong></p><p>例如，在SQL中使用悲观锁：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BEGIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 开始事务</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> products </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOR</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 锁定特定行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 执行更新操作</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> products </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stock - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">COMMIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 提交事务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用层面的悲观锁</strong></p><p>在应用层面实现悲观锁，可以通过以下步骤：</p><ul><li><strong>检查数据状态</strong>：在事务开始时，检查数据的状态，确保它是最新的。</li><li><strong>加锁</strong>：在数据上加锁，这可以通过数据库的锁机制或应用逻辑来实现。</li><li><strong>执行业务逻辑</strong>：在数据被锁定的情况下执行业务逻辑。</li><li><strong>释放锁</strong>：在事务结束时释放锁，确保其他事务可以访问数据。</li></ul><p>例如，在Go语言中使用<code>database/sql</code>包与数据库交互时，可以使用类似如下的伪代码：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mysql&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user:password@/dbname&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 开始事务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 锁定数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SELECT * FROM products WHERE id = ? FOR UPDATE&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">productID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">defer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 检查是否有数据行被锁定</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;No product found or out of stock&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 执行更新操作</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UPDATE products SET stock = stock - 1 WHERE id = ?&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">productID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 提交事务</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="go-redisson" tabindex="-1"><a class="header-anchor" href="#go-redisson"><span>Go-Redisson</span></a></h3><p>​ <code>go-redis</code> 是一个用于与 Redis 进行交互的 Go 语言客户端库。在分布式系统中，<code>go-redis</code> 可以用来实现分布式锁，以确保跨多个进程或多个服务器的同步访问共享资源。</p><p>以下是使用 <code>go-redis</code> 实现分布式锁的一般步骤：</p><p><strong>设置锁</strong></p><p>使用 <code>SET</code> 命令和 <code>NX</code>（Not Exist）和 <code>PX</code>（毫秒为单位设置超时时间）选项来设置一个键，如果该键不存在，则操作成功并获取锁；如果键已存在，则操作失败，表示锁被其他进程持有。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">expiration</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 尝试设置键，如果不存在则设置超时时间（毫秒）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SetNX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">expiration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 如果 SETNX 命令返回 1，表示键被成功设置，获取了锁</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">nil</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行业务逻辑</strong></p><p>在成功获取锁之后，执行需要同步的业务逻辑。</p><p><strong>释放锁</strong></p><p>使用 <code>DEL</code> 命令删除键，释放锁。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 使用 Lua 脚本来确保原子性地释放锁</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    script</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        if redis.call(&quot;GET&quot;, KEYS[1]) == ARGV[1] then</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return redis.call(&quot;DEL&quot;, KEYS[1])</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        else</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return 0</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        end</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    \`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 如果 Lua 脚本返回 1，表示锁被成功释放</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自动续期</strong></p><p>为了防止在执行业务逻辑期间锁过期，可以使用一个定时器在锁的有效期内自动续期。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> renewLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">expiration</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">expiration</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 每段时间小于锁的过期时间</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 使用 GETSET 命令原子性地设置新值并获取旧值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        oldVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">expiration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Error renewing lock:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> oldVal</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 如果值不匹配，表示锁已经被释放</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误处理</strong></p><p>在实现分布式锁时，需要考虑错误处理，比如网络问题或 Redis 服务不可用等情况</p><h2 id="_6-nginx-是怎么实现反向代理和负载均衡的" tabindex="-1"><a class="header-anchor" href="#_6-nginx-是怎么实现反向代理和负载均衡的"><span>6.Nginx 是怎么实现反向代理和负载均衡的？</span></a></h2><p>Nginx 是一款高性能的 HTTP 和反向代理服务器，它的设计目标是提供高并发、高扩展性以及高可靠性。以下是 Nginx 实现反向代理和负载均衡的基本方式：</p><h3 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理"><span>反向代理</span></a></h3><ol><li><p><strong>客户端请求</strong>：客户端向 Nginx 发送 HTTP 请求。</p></li><li><p><strong>代理配置</strong>：Nginx 使用配置文件（通常为 nginx.conf）来定义代理规则。在配置文件中，可以设置一个或多个 <code>location</code> 块来匹配特定的 URL 模式。</p></li><li><p><strong>请求转发</strong>：当 Nginx 接收到客户端的请求，并且请求与配置文件中的某个 <code>location</code> 块匹配时，Nginx 将请求转发到后端服务器。</p></li><li><p><strong>服务器响应</strong>：后端服务器处理请求并返回响应给 Nginx。</p></li><li><p><strong>响应转发</strong>：Nginx 接收到后端服务器的响应后，将其转发回客户端。</p></li><li><p><strong>缓存</strong>：Nginx 可以配置缓存机制，以缓存后端服务器的响应，提高响应速度和减轻后端服务器的负载。</p></li></ol><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><ol><li><p><strong>配置负载均衡器</strong>：在 Nginx 配置文件中，通过 <code>upstream</code> 指令定义一个负载均衡器，并列出所有的后端服务器地址和端口。</p></li><li><p><strong>定义代理规则</strong>：在 <code>server</code> 块中使用 <code>location</code> 指令定义请求的代理规则，并通过 <code>proxy_pass</code> 指令指定负载均衡器。</p></li><li><p><strong>请求分发</strong>：当 Nginx 接收到客户端的请求并匹配到 <code>location</code> 规则时，它根据配置的负载均衡策略将请求分发到不同的后端服务器。</p></li><li><p><strong>负载均衡策略</strong>：Nginx 支持多种负载均衡策略，包括轮询、最少连接、IP哈希等，以确保请求均匀地分配到各个后端服务器。</p></li><li><p><strong>健康检查</strong>：Nginx 可以配置对后端服务器进行健康检查，以确保请求只分发到健康的服务器。</p></li><li><p><strong>故障转移</strong>：如果后端服务器不健康或响应超时，Nginx 可以自动将请求转发到其他健康的服务器。</p></li></ol><h3 id="示例配置" tabindex="-1"><a class="header-anchor" href="#示例配置"><span>示例配置</span></a></h3><p>以下是一个简单的 Nginx 配置示例，演示了反向代理和轮询负载均衡的实现：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> myapp1 {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend1.example.com;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend2.example.com;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend3.example.com;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://myapp1;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Host $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Forwarded-For $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_add_x_forwarded_for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个配置中：</p><ul><li><code>upstream</code> 指令定义了一个名为 <code>myapp1</code> 的负载均衡器，并列出三个后端服务器。</li><li><code>server</code> 指令监听 80 端口。</li><li><code>location /</code> 指令将所有请求通过 <code>proxy_pass</code> 转发到 <code>myapp1</code> 负载均衡器。</li><li><code>proxy_set_header</code> 指令用于设置 HTTP 头部，确保后端服务器能够接收到原始的客户端信息。</li></ul><p>Nginx 的反向代理和负载均衡功能非常强大和灵活，可以通过详细的配置来满足各种复杂的需求。</p>`,92);function k(e,p){return l(),s("div",null,[a(" more "),t])}const d=i(h,[["render",k],["__file","面试题.html.vue"]]),g=JSON.parse('{"path":"/project/%E9%A6%99%E9%A6%99%E6%95%B0%E8%97%8F/%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"面试题","lang":"zh-CN","frontmatter":{"title":"面试题","cover":"https://upyun.yzyx.fun/24.jpg","order":2,"date":"2024-08-09T00:00:00.000Z","category":["面试题"],"tag":["NFT"]},"headers":[{"level":2,"title":"PHP对比Go性能为什么差？","slug":"php对比go性能为什么差","link":"#php对比go性能为什么差","children":[]},{"level":2,"title":"详细讲一讲资产的铸造、空投、合成和交易的功能怎么实现的？","slug":"详细讲一讲资产的铸造、空投、合成和交易的功能怎么实现的","link":"#详细讲一讲资产的铸造、空投、合成和交易的功能怎么实现的","children":[{"level":3,"title":"铸造","slug":"铸造","link":"#铸造","children":[]},{"level":3,"title":"合成","slug":"合成","link":"#合成","children":[]},{"level":3,"title":"空投","slug":"空投","link":"#空投","children":[]}]},{"level":2,"title":"3.后台管理的对账、日报和监控与告警功能怎么实现的？","slug":"_3-后台管理的对账、日报和监控与告警功能怎么实现的","link":"#_3-后台管理的对账、日报和监控与告警功能怎么实现的","children":[{"level":3,"title":"对账功能","slug":"对账功能","link":"#对账功能","children":[]},{"level":3,"title":"日报功能","slug":"日报功能","link":"#日报功能","children":[]},{"level":3,"title":"监控与告警功能","slug":"监控与告警功能","link":"#监控与告警功能","children":[]}]},{"level":2,"title":"4.限流策略除了XYZ和令牌桶还有哪些？能详细讲讲吗？","slug":"_4-限流策略除了xyz和令牌桶还有哪些-能详细讲讲吗","link":"#_4-限流策略除了xyz和令牌桶还有哪些-能详细讲讲吗","children":[]},{"level":2,"title":"5.怎么解决超卖问题？","slug":"_5-怎么解决超卖问题","link":"#_5-怎么解决超卖问题","children":[{"level":3,"title":"悲观锁","slug":"悲观锁","link":"#悲观锁","children":[]},{"level":3,"title":"Go-Redisson","slug":"go-redisson","link":"#go-redisson","children":[]}]},{"level":2,"title":"6.Nginx 是怎么实现反向代理和负载均衡的？","slug":"_6-nginx-是怎么实现反向代理和负载均衡的","link":"#_6-nginx-是怎么实现反向代理和负载均衡的","children":[{"level":3,"title":"反向代理","slug":"反向代理","link":"#反向代理","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"示例配置","slug":"示例配置","link":"#示例配置","children":[]}]}],"git":{"createdTime":1723164889000,"updatedTime":1723164889000,"contributors":[{"name":"yunzhongyue","email":"15737369015@163.com","commits":1}]},"readingTime":{"minutes":12.84,"words":3852},"filePathRelative":"project/香香数藏/面试题.md","localizedDate":"2024年8月9日","excerpt":""}');export{d as comp,g as data};
